/* Generated by Cython 0.14.1+ on Sun Apr 24 14:01:29 2011 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#else

#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif

#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif

#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif

#if PY_VERSION_HEX < 0x02040000
  #define METH_COEXIST 0
  #define PyDict_CheckExact(op) (Py_TYPE(op) == &PyDict_Type)
  #define PyDict_Contains(d,o)   PySequence_Contains(d,o)
#endif

#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   PyInt_AsLong(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
#endif

#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)

#endif

#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#endif

#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif

#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif

#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)

#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif

#if PY_VERSION_HEX < 0x03020000
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__re2
#define __PYX_HAVE_API__re2
#include <string>
#include <map>
#include "re2/stringpiece.h"
#include "re2/re2.h"
#include "_re2macros.h"

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif


/* inline attribute */
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

/* unused attribute */
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || defined(__INTEL_COMPILER)
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif

typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/


/* Type Conversion Predeclarations */

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))

#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))


#ifdef __GNUC__
/* Test for GCC > 2.95 */
#if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
#define likely(x)   __builtin_expect(!!(x), 1)
#define unlikely(x) __builtin_expect(!!(x), 0)
#else /* __GNUC__ > 2 ... */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "re2.pyx",
};

/* Type declarations */

/* "re2.pyx":726
 *             del sp
 * 
 * cdef class MatchIterator:             # <<<<<<<<<<<<<<
 *     cdef Pattern pattern
 *     cdef object bytestring
 */
struct __pyx_obj_3re2_MatchIterator {
  PyObject_HEAD
  struct __pyx_obj_3re2_Pattern *pattern;
  PyObject *bytestring;
  int pos;
  int endpos;
  int as_match;
  Py_ssize_t size;
  char *cstring;
  re2::StringPiece *sp;
  int encoded;
};


/* "re2.pyx":404
 *             return None
 * 
 * cdef class Pattern:             # <<<<<<<<<<<<<<
 *     cdef _re2.RE2 * re_pattern
 *     cdef int ngroups
 */
struct __pyx_obj_3re2_Pattern {
  PyObject_HEAD
  struct __pyx_vtabstruct_3re2_Pattern *__pyx_vtab;
  re2::RE2 *re_pattern;
  int ngroups;
  int encoded;
  int _flags;
  PyObject *pattern;
  PyObject *__weakref__;
};


/* "re2.pyx":128
 *     return cpos
 * 
 * cdef class Match:             # <<<<<<<<<<<<<<
 *     cdef _re2.StringPiece * matches
 *     cdef _re2.const_stringintmap * named_groups
 */
struct __pyx_obj_3re2_Match {
  PyObject_HEAD
  struct __pyx_vtabstruct_3re2_Match *__pyx_vtab;
  re2::StringPiece *matches;
  const std::map<std::string, int> *named_groups;
  int encoded;
  int _lastindex;
  int nmatches;
  int _pos;
  int _endpos;
  PyObject *match_string;
  PyObject *_pattern_object;
  PyObject *_groups;
  PyObject *_spans;
  PyObject *_named_groups;
  PyObject *_named_indexes;
};



struct __pyx_vtabstruct_3re2_Match {
  PyObject *(*init_groups)(struct __pyx_obj_3re2_Match *);
  PyObject *(*_convert_positions)(struct __pyx_obj_3re2_Match *, PyObject *);
  PyObject *(*_make_spans)(struct __pyx_obj_3re2_Match *);
};
static struct __pyx_vtabstruct_3re2_Match *__pyx_vtabptr_3re2_Match;


/* "re2.pyx":404
 *             return None
 * 
 * cdef class Pattern:             # <<<<<<<<<<<<<<
 *     cdef _re2.RE2 * re_pattern
 *     cdef int ngroups
 */

struct __pyx_vtabstruct_3re2_Pattern {
  PyObject *(*_search)(struct __pyx_obj_3re2_Pattern *, PyObject *, int, int, RE2::Anchor);
  PyObject *(*_print_pattern)(struct __pyx_obj_3re2_Pattern *);
};
static struct __pyx_vtabstruct_3re2_Pattern *__pyx_vtabptr_3re2_Pattern;

#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif

#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
  #define __Pyx_RefNannySetupContext(name)           __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
  #define __Pyx_RefNannyFinishContext()           __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],     PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,     const char* function_name); /*proto*/

#include <string.h>

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict,
    const char* function_name, int kw_allowed); /*proto*/


static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}


#define __Pyx_GetItemInt_List(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_List_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
            PyObject *r = PyList_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyList_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyList_GET_ITEM(o, PyList_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

#define __Pyx_GetItemInt_Tuple(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Tuple_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyTuple_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyTuple_GET_ITEM(o, PyTuple_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}


#define __Pyx_GetItemInt(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i) {
    PyObject *r;
    if (PyList_CheckExact(o) && ((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (PyTuple_CheckExact(o) && ((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (Py_TYPE(o)->tp_as_sequence && Py_TYPE(o)->tp_as_sequence->sq_item && (likely(i >= 0))) {
        r = PySequence_GetItem(o, i);
    }
    else {
        r = __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
    }
    return r;
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static PyObject *__Pyx_UnpackItem(PyObject *, Py_ssize_t index); /*proto*/
static int __Pyx_EndUnpack(PyObject *, Py_ssize_t expected); /*proto*/

static CYTHON_INLINE void __Pyx_RaiseNoneIndexingError(void);

#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    if (unlikely(d == Py_None)) {
        __Pyx_RaiseNoneIndexingError();
        return NULL;
    }
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred())
            PyErr_SetObject(PyExc_KeyError, key);
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (PyList_Append(L, x) < 0) return NULL;
        Py_INCREF(Py_None);
        return Py_None; /* this is just to have an accurate signature */
    }
    else {
        PyObject *r, *m;
        m = __Pyx_GetAttrString(L, "append");
        if (!m) return NULL;
        r = PyObject_CallFunctionObjArgs(m, x, NULL);
        Py_DECREF(m);
        return r;
    }
}

static CYTHON_INLINE long __Pyx_NegateNonNeg(long b) { return unlikely(b < 0) ? b : !b; }
static CYTHON_INLINE PyObject* __Pyx_PyBoolOrNull_FromLong(long b) {
    return unlikely(b < 0) ? NULL : __Pyx_PyBool_FromLong(b);
}

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

#define __Pyx_SetItemInt(o, i, v, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_SetItemInt_Fast(o, i, v) : \
                                                    __Pyx_SetItemInt_Generic(o, to_py_func(i), v))

static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}

static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v) {
    if (PyList_CheckExact(o) && ((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        Py_INCREF(v);
        Py_DECREF(PyList_GET_ITEM(o, i));
        PyList_SET_ITEM(o, i, v);
        return 1;
    }
    else if (Py_TYPE(o)->tp_as_sequence && Py_TYPE(o)->tp_as_sequence->sq_ass_item && (likely(i >= 0)))
        return PySequence_SetItem(o, i, v);
    else {
        PyObject *j = PyInt_FromSsize_t(i);
        return __Pyx_SetItemInt_Generic(o, j, v);
    }
}

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb); /*proto*/
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, long level); /*proto*/

static PyObject *__Pyx_FindPy2Metaclass(PyObject *bases); /*proto*/

static PyObject *__Pyx_CreateClass(PyObject *bases, PyObject *dict, PyObject *name,
                                   PyObject *modname); /*proto*/

#if PY_VERSION_HEX < 0x02050000
#ifndef PyAnySet_CheckExact

#define PyAnySet_CheckExact(ob) \
    ((ob)->ob_type == &PySet_Type || \
     (ob)->ob_type == &PyFrozenSet_Type)

#define PySet_New(iterable) \
    PyObject_CallFunctionObjArgs((PyObject *)&PySet_Type, (iterable), NULL)

#define Pyx_PyFrozenSet_New(iterable) \
    PyObject_CallFunctionObjArgs((PyObject *)&PyFrozenSet_Type, (iterable), NULL)

#define PySet_Size(anyset) \
    PyObject_Size((anyset))

#define PySet_Contains(anyset, key) \
    PySequence_Contains((anyset), (key))

#define PySet_Pop(set) \
    PyObject_CallMethod(set, (char *)"pop", NULL)

static CYTHON_INLINE int PySet_Clear(PyObject *set) {
    PyObject *ret = PyObject_CallMethod(set, (char *)"clear", NULL);
    if (!ret) return -1;
    Py_DECREF(ret); return 0;
}

static CYTHON_INLINE int PySet_Discard(PyObject *set, PyObject *key) {
    PyObject *ret = PyObject_CallMethod(set, (char *)"discard", (char *)"O", key);
    if (!ret) return -1;
    Py_DECREF(ret); return 0;
}

static CYTHON_INLINE int PySet_Add(PyObject *set, PyObject *key) {
    PyObject *ret = PyObject_CallMethod(set, (char *)"add", (char *)"O", key);
    if (!ret) return -1;
    Py_DECREF(ret); return 0;
}

#endif /* PyAnySet_CheckExact (<= Py2.4) */

#if PY_VERSION_HEX < 0x02040000
#ifndef Py_SETOBJECT_H
#define Py_SETOBJECT_H

static PyTypeObject *__Pyx_PySet_Type = NULL;
static PyTypeObject *__Pyx_PyFrozenSet_Type = NULL;

#define PySet_Type (*__Pyx_PySet_Type)
#define PyFrozenSet_Type (*__Pyx_PyFrozenSet_Type)

#define PyAnySet_Check(ob) \
    (PyAnySet_CheckExact(ob) || \
     PyType_IsSubtype((ob)->ob_type, &PySet_Type) || \
     PyType_IsSubtype((ob)->ob_type, &PyFrozenSet_Type))

#define PyFrozenSet_CheckExact(ob) ((ob)->ob_type == &PyFrozenSet_Type)

static int __Pyx_Py23SetsImport(void) {
    PyObject *sets=0, *Set=0, *ImmutableSet=0;

    sets = PyImport_ImportModule((char *)"sets");
    if (!sets) goto bad;
    Set = PyObject_GetAttrString(sets, (char *)"Set");
    if (!Set) goto bad;
    ImmutableSet = PyObject_GetAttrString(sets, (char *)"ImmutableSet");
    if (!ImmutableSet) goto bad;
    Py_DECREF(sets);

    __Pyx_PySet_Type       = (PyTypeObject*) Set;
    __Pyx_PyFrozenSet_Type = (PyTypeObject*) ImmutableSet;

    return 0;

 bad:
    Py_XDECREF(sets);
    Py_XDECREF(Set);
    Py_XDECREF(ImmutableSet);
    return -1;
}

#else
static int __Pyx_Py23SetsImport(void) { return 0; }
#endif /* !Py_SETOBJECT_H */
#endif /* < Py2.4  */
#endif /* < Py2.5  */

#define __pyx_binding_PyCFunctionType_USED 1

typedef struct {
    PyCFunctionObject func;
} __pyx_binding_PyCFunctionType_object;

static PyTypeObject __pyx_binding_PyCFunctionType_type;
static PyTypeObject *__pyx_binding_PyCFunctionType = NULL;

static PyObject *__pyx_binding_PyCFunctionType_NewEx(PyMethodDef *ml, PyObject *self, PyObject *module); /* proto */
#define __pyx_binding_PyCFunctionType_New(ml, self) __pyx_binding_PyCFunctionType_NewEx(ml, self, NULL)

static int __pyx_binding_PyCFunctionType_init(void); /* proto */

static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *); /*proto*/

#ifndef __PYX_FORCE_INIT_THREADS
  #if PY_VERSION_HEX < 0x02040200
    #define __PYX_FORCE_INIT_THREADS 1
  #else
    #define __PYX_FORCE_INIT_THREADS 0
  #endif
#endif

static int __Pyx_Print(PyObject*, PyObject *, int); /*proto*/
#if PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

static int __Pyx_PrintOne(PyObject* stream, PyObject *o); /*proto*/

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static int __Pyx_check_binary_version(void);

static int __Pyx_SetVtable(PyObject *dict, void *vtable); /*proto*/

static void __Pyx_AddTraceback(const char *funcname); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/
/* Module declarations from _re2 */

/* Module declarations from cpython.unicode */

/* Module declarations from cpython */

/* Module declarations from re2 */

static PyTypeObject *__pyx_ptype_3re2_Match = 0;
static PyTypeObject *__pyx_ptype_3re2_Pattern = 0;
static PyTypeObject *__pyx_ptype_3re2_MatchIterator = 0;
static int __pyx_v_3re2_current_notification;
static int __pyx_v_3re2__I;
static int __pyx_v_3re2__M;
static int __pyx_v_3re2__S;
static int __pyx_v_3re2__U;
static int __pyx_v_3re2__X;
static int __pyx_v_3re2__L;
static PyObject *__pyx_f_3re2_cpp_to_pystring(std::string); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_3re2_cpp_to_utf8(std::string); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_3re2_char_to_utf8(const char*, int); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_3re2_unicode_to_bytestring(PyObject *, int *); /*proto*/
static CYTHON_INLINE int __pyx_f_3re2_pystring_to_bytestring(PyObject *, char **, Py_ssize_t *); /*proto*/
#define __Pyx_MODULE_NAME "re2"
int __pyx_module_is_main_re2 = 0;

/* Implementation of re2 */
static PyObject *__pyx_builtin_Exception;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_basestring;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_sorted;
static PyObject *__pyx_builtin_zip;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_callable;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_StopIteration;
static PyObject *__pyx_builtin_ord;
static char __pyx_k_1[] = "This function expects a valid notification level.";
static char __pyx_k_3[] = "no such group";
static char __pyx_k_7[] = "\\";
static char __pyx_k_9[] = "\000";
static char __pyx_k_10[] = "g<";
static char __pyx_k_11[] = ">";
static char __pyx_k_13[] = "";
static char __pyx_k_16[] = "expected string or buffer";
static char __pyx_k_18[] = "NamedCapturingGroups";
static char __pyx_k_19[] = "\n";
static char __pyx_k_22[] = "Invalid rewrite pattern";
static char __pyx_k_24[] = "So far pyre2 does not support custom replacement counts";
static char __pyx_k_29[] = "bogus escape (end of line)";
static char __pyx_k_30[] = "(?";
static char __pyx_k_31[] = ")";
static char __pyx_k_32[] = "#";
static char __pyx_k_33[] = "[\\";
static char __pyx_k_34[] = "[";
static char __pyx_k_35[] = "unexpected end of regular expression";
static char __pyx_k_36[] = "]";
static char __pyx_k_37[] = "\\p{Nd}";
static char __pyx_k_38[] = "_\\p{L}\\p{Nd}";
static char __pyx_k_39[] = "\\s\\p{Z}";
static char __pyx_k_40[] = "BackreferencesException";
static char __pyx_k_41[] = "[_\\p{L}\\p{Nd}]";
static char __pyx_k_42[] = "[\\s\\p{Z}]";
static char __pyx_k_43[] = "Cannot process flags argument with a compiled pattern";
static char __pyx_k_45[] = "Backreferences not supported";
static char __pyx_k_46[] = "WARNING: Using re module. Reason: %s";
static char __pyx_k_47[] = "first argument must be a string or compiled pattern";
static char __pyx_k_49[] = "NumberOfCapturingGroups";
static char __pyx_k_50[] = "\\000";
static char __pyx_k_53[] = "set_fallback_notification";
static char __pyx_k_54[] = "\n    Some error has occured in compilation of the regex.\n    ";
static char __pyx_k_55[] = " \t\n\r\013\014";
static char __pyx_k_57[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890";
static char __pyx_k__0[] = "0";
static char __pyx_k__I[] = "I";
static char __pyx_k__L[] = "L";
static char __pyx_k__M[] = "M";
static char __pyx_k__S[] = "S";
static char __pyx_k__U[] = "U";
static char __pyx_k__X[] = "X";
static char __pyx_k__c[] = "c";
static char __pyx_k__d[] = "d";
static char __pyx_k__m[] = "m";
static char __pyx_k__s[] = "s";
static char __pyx_k__w[] = "w";
static char __pyx_k__89[] = "89";
static char __pyx_k__ok[] = "ok";
static char __pyx_k__re[] = "re";
static char __pyx_k__sp[] = "sp";
static char __pyx_k__end[] = "end";
static char __pyx_k__get[] = "get";
static char __pyx_k__ord[] = "ord";
static char __pyx_k__pos[] = "pos";
static char __pyx_k__re2[] = "re2";
static char __pyx_k__sub[] = "sub";
static char __pyx_k__sys[] = "sys";
static char __pyx_k__zip[] = "zip";
static char __pyx_k___pos[] = "_pos";
static char __pyx_k__data[] = "data";
static char __pyx_k__join[] = "join";
static char __pyx_k__next[] = "next";
static char __pyx_k__repl[] = "repl";
static char __pyx_k__self[] = "self";
static char __pyx_k__size[] = "size";
static char __pyx_k__span[] = "span";
static char __pyx_k__subn[] = "subn";
static char __pyx_k__warn[] = "warn";
static char __pyx_k__Match[] = "Match";
static char __pyx_k__begin[] = "begin";
static char __pyx_k__c_str[] = "c_str";
static char __pyx_k__clear[] = "clear";
static char __pyx_k__count[] = "count";
static char __pyx_k__error[] = "error";
static char __pyx_k__first[] = "first";
static char __pyx_k__flags[] = "flags";
static char __pyx_k__flush[] = "flush";
static char __pyx_k__group[] = "group";
static char __pyx_k__index[] = "index";
static char __pyx_k__match[] = "match";
static char __pyx_k__range[] = "range";
static char __pyx_k__split[] = "split";
static char __pyx_k__DOTALL[] = "DOTALL";
static char __pyx_k__LOCALE[] = "LOCALE";
static char __pyx_k____next[] = "__next";
static char __pyx_k___cache[] = "_cache";
static char __pyx_k___flags[] = "_flags";
static char __pyx_k___spans[] = "_spans";
static char __pyx_k__append[] = "append";
static char __pyx_k__endpos[] = "endpos";
static char __pyx_k__escape[] = "escape";
static char __pyx_k__groups[] = "groups";
static char __pyx_k__length[] = "length";
static char __pyx_k__search[] = "search";
static char __pyx_k__second[] = "second";
static char __pyx_k__sorted[] = "sorted";
static char __pyx_k__stdout[] = "stdout";
static char __pyx_k__strict[] = "strict";
static char __pyx_k__string[] = "string";
static char __pyx_k__1234567[] = "1234567";
static char __pyx_k__UNICODE[] = "UNICODE";
static char __pyx_k__VERBOSE[] = "VERBOSE";
static char __pyx_k__VERSION[] = "VERSION";
static char __pyx_k___endpos[] = "_endpos";
static char __pyx_k___groups[] = "_groups";
static char __pyx_k___search[] = "_search";
static char __pyx_k__compile[] = "compile";
static char __pyx_k__cstring[] = "cstring";
static char __pyx_k__default[] = "default";
static char __pyx_k__encoded[] = "encoded";
static char __pyx_k__findall[] = "findall";
static char __pyx_k__isdigit[] = "isdigit";
static char __pyx_k__matches[] = "matches";
static char __pyx_k__max_mem[] = "max_mem";
static char __pyx_k__ngroups[] = "ngroups";
static char __pyx_k__pattern[] = "pattern";
static char __pyx_k____init__[] = "__init__";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k___compile[] = "_compile";
static char __pyx_k__as_match[] = "as_match";
static char __pyx_k__callable[] = "callable";
static char __pyx_k__callback[] = "callback";
static char __pyx_k__finditer[] = "finditer";
static char __pyx_k__maxsplit[] = "maxsplit";
static char __pyx_k__nmatches[] = "nmatches";
static char __pyx_k__position[] = "position";
static char __pyx_k__tostring[] = "tostring";
static char __pyx_k__warnings[] = "warnings";
static char __pyx_k__Exception[] = "Exception";
static char __pyx_k__MULTILINE[] = "MULTILINE";
static char __pyx_k__Tokenizer[] = "Tokenizer";
static char __pyx_k__TypeError[] = "TypeError";
static char __pyx_k___MAXCACHE[] = "_MAXCACHE";
static char __pyx_k___alphanum[] = "_alphanum";
static char __pyx_k__enumerate[] = "enumerate";
static char __pyx_k__groupdict[] = "groupdict";
static char __pyx_k__push_back[] = "push_back";
static char __pyx_k__IGNORECASE[] = "IGNORECASE";
static char __pyx_k__IndexError[] = "IndexError";
static char __pyx_k__RegexError[] = "RegexError";
static char __pyx_k__SREPattern[] = "SREPattern";
static char __pyx_k__ValueError[] = "ValueError";
static char __pyx_k__WHITESPACE[] = "WHITESPACE";
static char __pyx_k___lastindex[] = "_lastindex";
static char __pyx_k__basestring[] = "basestring";
static char __pyx_k__bytestring[] = "bytestring";
static char __pyx_k__error_code[] = "error_code";
static char __pyx_k__num_groups[] = "num_groups";
static char __pyx_k__re_pattern[] = "re_pattern";
static char __pyx_k__VERSION_HEX[] = "VERSION_HEX";
static char __pyx_k___cache_repl[] = "_cache_repl";
static char __pyx_k___make_spans[] = "_make_spans";
static char __pyx_k__init_groups[] = "init_groups";
static char __pyx_k__set_max_mem[] = "set_max_mem";
static char __pyx_k__match_string[] = "match_string";
static char __pyx_k__named_groups[] = "named_groups";
static char __pyx_k__set_encoding[] = "set_encoding";
static char __pyx_k__StopIteration[] = "StopIteration";
static char __pyx_k___named_groups[] = "_named_groups";
static char __pyx_k___convert_spans[] = "_convert_spans";
static char __pyx_k___named_indexes[] = "_named_indexes";
static char __pyx_k___subn_callback[] = "_subn_callback";
static char __pyx_k__pattern_object[] = "pattern_object";
static char __pyx_k__set_log_errors[] = "set_log_errors";
static char __pyx_k___pattern_object[] = "_pattern_object";
static char __pyx_k__prepare_pattern[] = "prepare_pattern";
static char __pyx_k__FALLBACK_QUIETLY[] = "FALLBACK_QUIETLY";
static char __pyx_k__FALLBACK_WARNING[] = "FALLBACK_WARNING";
static char __pyx_k__convert_position[] = "convert_position";
static char __pyx_k__FALLBACK_EXCEPTION[] = "FALLBACK_EXCEPTION";
static char __pyx_k___convert_positions[] = "_convert_positions";
static char __pyx_k__set_case_sensitive[] = "set_case_sensitive";
static char __pyx_k__NotImplementedError[] = "NotImplementedError";
static PyObject *__pyx_kp_s_1;
static PyObject *__pyx_kp_s_10;
static PyObject *__pyx_kp_s_11;
static PyObject *__pyx_kp_s_13;
static PyObject *__pyx_kp_u_13;
static PyObject *__pyx_kp_s_16;
static PyObject *__pyx_n_s_18;
static PyObject *__pyx_kp_s_19;
static PyObject *__pyx_kp_s_22;
static PyObject *__pyx_kp_s_24;
static PyObject *__pyx_kp_s_29;
static PyObject *__pyx_kp_s_3;
static PyObject *__pyx_kp_s_30;
static PyObject *__pyx_kp_s_31;
static PyObject *__pyx_kp_s_32;
static PyObject *__pyx_kp_s_33;
static PyObject *__pyx_kp_s_34;
static PyObject *__pyx_kp_s_35;
static PyObject *__pyx_kp_s_36;
static PyObject *__pyx_kp_s_37;
static PyObject *__pyx_kp_s_38;
static PyObject *__pyx_kp_s_39;
static PyObject *__pyx_n_s_40;
static PyObject *__pyx_kp_s_41;
static PyObject *__pyx_kp_s_42;
static PyObject *__pyx_kp_s_43;
static PyObject *__pyx_kp_s_45;
static PyObject *__pyx_kp_s_46;
static PyObject *__pyx_kp_s_47;
static PyObject *__pyx_n_s_49;
static PyObject *__pyx_kp_s_50;
static PyObject *__pyx_n_s_53;
static PyObject *__pyx_kp_s_54;
static PyObject *__pyx_kp_s_55;
static PyObject *__pyx_n_s_57;
static PyObject *__pyx_kp_s_7;
static PyObject *__pyx_kp_s_9;
static PyObject *__pyx_kp_s__0;
static PyObject *__pyx_kp_s__1234567;
static PyObject *__pyx_kp_s__89;
static PyObject *__pyx_n_s__DOTALL;
static PyObject *__pyx_n_s__Exception;
static PyObject *__pyx_n_s__FALLBACK_EXCEPTION;
static PyObject *__pyx_n_s__FALLBACK_QUIETLY;
static PyObject *__pyx_n_s__FALLBACK_WARNING;
static PyObject *__pyx_n_s__I;
static PyObject *__pyx_n_s__IGNORECASE;
static PyObject *__pyx_n_s__IndexError;
static PyObject *__pyx_n_s__L;
static PyObject *__pyx_n_s__LOCALE;
static PyObject *__pyx_n_s__M;
static PyObject *__pyx_n_s__MULTILINE;
static PyObject *__pyx_n_s__Match;
static PyObject *__pyx_n_s__NotImplementedError;
static PyObject *__pyx_n_s__RegexError;
static PyObject *__pyx_n_s__S;
static PyObject *__pyx_n_s__SREPattern;
static PyObject *__pyx_n_s__StopIteration;
static PyObject *__pyx_n_s__Tokenizer;
static PyObject *__pyx_n_s__TypeError;
static PyObject *__pyx_n_s__U;
static PyObject *__pyx_n_s__UNICODE;
static PyObject *__pyx_n_s__VERBOSE;
static PyObject *__pyx_n_s__VERSION;
static PyObject *__pyx_n_s__VERSION_HEX;
static PyObject *__pyx_n_s__ValueError;
static PyObject *__pyx_n_s__WHITESPACE;
static PyObject *__pyx_n_s__X;
static PyObject *__pyx_n_s___MAXCACHE;
static PyObject *__pyx_n_s____init__;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____next;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s___alphanum;
static PyObject *__pyx_n_s___cache;
static PyObject *__pyx_n_s___cache_repl;
static PyObject *__pyx_n_s___compile;
static PyObject *__pyx_n_s___convert_positions;
static PyObject *__pyx_n_s___convert_spans;
static PyObject *__pyx_n_s___endpos;
static PyObject *__pyx_n_s___flags;
static PyObject *__pyx_n_s___groups;
static PyObject *__pyx_n_s___lastindex;
static PyObject *__pyx_n_s___make_spans;
static PyObject *__pyx_n_s___named_groups;
static PyObject *__pyx_n_s___named_indexes;
static PyObject *__pyx_n_s___pattern_object;
static PyObject *__pyx_n_s___pos;
static PyObject *__pyx_n_s___search;
static PyObject *__pyx_n_s___spans;
static PyObject *__pyx_n_s___subn_callback;
static PyObject *__pyx_n_s__append;
static PyObject *__pyx_n_s__as_match;
static PyObject *__pyx_n_s__basestring;
static PyObject *__pyx_n_s__begin;
static PyObject *__pyx_n_s__bytestring;
static PyObject *__pyx_n_s__c;
static PyObject *__pyx_n_s__c_str;
static PyObject *__pyx_n_s__callable;
static PyObject *__pyx_n_s__callback;
static PyObject *__pyx_n_s__clear;
static PyObject *__pyx_n_s__compile;
static PyObject *__pyx_n_s__convert_position;
static PyObject *__pyx_n_s__count;
static PyObject *__pyx_n_s__cstring;
static PyObject *__pyx_n_s__d;
static PyObject *__pyx_n_s__data;
static PyObject *__pyx_n_s__default;
static PyObject *__pyx_n_s__encoded;
static PyObject *__pyx_n_s__end;
static PyObject *__pyx_n_s__endpos;
static PyObject *__pyx_n_s__enumerate;
static PyObject *__pyx_n_s__error;
static PyObject *__pyx_n_s__error_code;
static PyObject *__pyx_n_s__escape;
static PyObject *__pyx_n_s__findall;
static PyObject *__pyx_n_s__finditer;
static PyObject *__pyx_n_s__first;
static PyObject *__pyx_n_s__flags;
static PyObject *__pyx_n_s__flush;
static PyObject *__pyx_n_s__get;
static PyObject *__pyx_n_s__group;
static PyObject *__pyx_n_s__groupdict;
static PyObject *__pyx_n_s__groups;
static PyObject *__pyx_n_s__index;
static PyObject *__pyx_n_s__init_groups;
static PyObject *__pyx_n_s__isdigit;
static PyObject *__pyx_n_s__join;
static PyObject *__pyx_n_s__length;
static PyObject *__pyx_n_s__m;
static PyObject *__pyx_n_s__match;
static PyObject *__pyx_n_s__match_string;
static PyObject *__pyx_n_s__matches;
static PyObject *__pyx_n_s__max_mem;
static PyObject *__pyx_n_s__maxsplit;
static PyObject *__pyx_n_s__named_groups;
static PyObject *__pyx_n_s__next;
static PyObject *__pyx_n_s__ngroups;
static PyObject *__pyx_n_s__nmatches;
static PyObject *__pyx_n_s__num_groups;
static PyObject *__pyx_n_s__ok;
static PyObject *__pyx_n_s__ord;
static PyObject *__pyx_n_s__pattern;
static PyObject *__pyx_n_s__pattern_object;
static PyObject *__pyx_n_s__pos;
static PyObject *__pyx_n_s__position;
static PyObject *__pyx_n_s__prepare_pattern;
static PyObject *__pyx_n_s__push_back;
static PyObject *__pyx_n_s__range;
static PyObject *__pyx_n_s__re;
static PyObject *__pyx_n_s__re2;
static PyObject *__pyx_n_s__re_pattern;
static PyObject *__pyx_n_s__repl;
static PyObject *__pyx_n_s__s;
static PyObject *__pyx_n_s__search;
static PyObject *__pyx_n_s__second;
static PyObject *__pyx_n_s__self;
static PyObject *__pyx_n_s__set_case_sensitive;
static PyObject *__pyx_n_s__set_encoding;
static PyObject *__pyx_n_s__set_log_errors;
static PyObject *__pyx_n_s__set_max_mem;
static PyObject *__pyx_n_s__size;
static PyObject *__pyx_n_s__sorted;
static PyObject *__pyx_n_s__sp;
static PyObject *__pyx_n_s__span;
static PyObject *__pyx_n_s__split;
static PyObject *__pyx_n_s__stdout;
static PyObject *__pyx_n_s__string;
static PyObject *__pyx_n_s__sub;
static PyObject *__pyx_n_s__subn;
static PyObject *__pyx_n_s__sys;
static PyObject *__pyx_n_s__tostring;
static PyObject *__pyx_n_s__w;
static PyObject *__pyx_n_s__warn;
static PyObject *__pyx_n_s__warnings;
static PyObject *__pyx_n_s__zip;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_int_13;
static PyObject *__pyx_int_100;
static PyObject *__pyx_int_128;
static PyObject *__pyx_int_525;
static PyObject *__pyx_k_tuple_2;
static PyObject *__pyx_k_tuple_4;
static PyObject *__pyx_k_tuple_5;
static PyObject *__pyx_k_tuple_6;
static PyObject *__pyx_k_tuple_8;
static PyObject *__pyx_k_tuple_12;
static PyObject *__pyx_k_tuple_14;
static PyObject *__pyx_k_tuple_15;
static PyObject *__pyx_k_tuple_17;
static PyObject *__pyx_k_tuple_20;
static PyObject *__pyx_k_tuple_21;
static PyObject *__pyx_k_tuple_23;
static PyObject *__pyx_k_tuple_25;
static PyObject *__pyx_k_tuple_26;
static PyObject *__pyx_k_tuple_27;
static PyObject *__pyx_k_tuple_28;
static PyObject *__pyx_k_tuple_44;
static PyObject *__pyx_k_tuple_48;
static PyObject *__pyx_k_tuple_51;
static PyObject *__pyx_k_tuple_52;
static PyObject *__pyx_k_tuple_56;

/* "re2.pyx":31
 * cdef int current_notification = FALLBACK_QUIETLY
 * 
 * def set_fallback_notification(level):             # <<<<<<<<<<<<<<
 *     """
 *     Set the fallback notification to a level; one of:
 */

static PyObject *__pyx_pf_3re2_set_fallback_notification(PyObject *__pyx_self, PyObject *__pyx_v_level); /*proto*/
static char __pyx_doc_3re2_set_fallback_notification[] = "\n    Set the fallback notification to a level; one of:\n        FALLBACK_QUIETLY\n\tFALLBACK_WARNING\n\tFALLBACK_EXCEPTION\n    ";
static PyMethodDef __pyx_mdef_3re2_set_fallback_notification = {__Pyx_NAMESTR("set_fallback_notification"), (PyCFunction)__pyx_pf_3re2_set_fallback_notification, METH_O, __Pyx_DOCSTR(__pyx_doc_3re2_set_fallback_notification)};
static PyObject *__pyx_pf_3re2_set_fallback_notification(PyObject *__pyx_self, PyObject *__pyx_v_level) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_fallback_notification");
  __pyx_self = __pyx_self;
  __Pyx_INCREF(__pyx_v_level);

  /* "re2.pyx":39
 *     """
 *     global current_notification
 *     level = int(level)             # <<<<<<<<<<<<<<
 *     if level < 0 or level > 2:
 *         raise ValueError("This function expects a valid notification level.")
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_level);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_level);
  __Pyx_GIVEREF(__pyx_v_level);
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_v_level);
  __pyx_v_level = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "re2.pyx":40
 *     global current_notification
 *     level = int(level)
 *     if level < 0 or level > 2:             # <<<<<<<<<<<<<<
 *         raise ValueError("This function expects a valid notification level.")
 *     current_notification = level
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_level, __pyx_int_0, Py_LT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!__pyx_t_3) {
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_level, __pyx_int_2, Py_GT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = __pyx_t_4;
  } else {
    __pyx_t_5 = __pyx_t_3;
  }
  if (__pyx_t_5) {

    /* "re2.pyx":41
 *     level = int(level)
 *     if level < 0 or level > 2:
 *         raise ValueError("This function expects a valid notification level.")             # <<<<<<<<<<<<<<
 *     current_notification = level
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_2), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "re2.pyx":42
 *     if level < 0 or level > 2:
 *         raise ValueError("This function expects a valid notification level.")
 *     current_notification = level             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_v_level); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_3re2_current_notification = __pyx_t_6;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("re2.set_fallback_notification");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_level);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":60
 * import warnings
 * 
 * cdef object cpp_to_pystring(_re2.cpp_string input):             # <<<<<<<<<<<<<<
 *     # This function is a quick converter from a std::string object
 *     # to a python string. By taking the slice we go to the right size,
 */

static PyObject *__pyx_f_3re2_cpp_to_pystring(std::string __pyx_v_input) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cpp_to_pystring");

  /* "re2.pyx":64
 *     # to a python string. By taking the slice we go to the right size,
 *     # despite spurious or missing null characters.
 *     return input.c_str()[:input.length()]             # <<<<<<<<<<<<<<
 * 
 * cdef inline object cpp_to_utf8(_re2.cpp_string input):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromStringAndSize(__pyx_v_input.c_str() + 0, __pyx_v_input.length() - 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("re2.cpp_to_pystring");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":66
 *     return input.c_str()[:input.length()]
 * 
 * cdef inline object cpp_to_utf8(_re2.cpp_string input):             # <<<<<<<<<<<<<<
 *     # This function converts a std::string object to a utf8 object.
 *     return cpython.unicode.PyUnicode_DecodeUTF8(input.c_str(), input.length(), 'strict')
 */

static CYTHON_INLINE PyObject *__pyx_f_3re2_cpp_to_utf8(std::string __pyx_v_input) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cpp_to_utf8");

  /* "re2.pyx":68
 * cdef inline object cpp_to_utf8(_re2.cpp_string input):
 *     # This function converts a std::string object to a utf8 object.
 *     return cpython.unicode.PyUnicode_DecodeUTF8(input.c_str(), input.length(), 'strict')             # <<<<<<<<<<<<<<
 * 
 * cdef inline object char_to_utf8(_re2.const_char_ptr input, int length):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyUnicode_DecodeUTF8(__pyx_v_input.c_str(), __pyx_v_input.length(), __pyx_k__strict); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("re2.cpp_to_utf8");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":70
 *     return cpython.unicode.PyUnicode_DecodeUTF8(input.c_str(), input.length(), 'strict')
 * 
 * cdef inline object char_to_utf8(_re2.const_char_ptr input, int length):             # <<<<<<<<<<<<<<
 *     # This function converts a C string to a utf8 object.
 *     return cpython.unicode.PyUnicode_DecodeUTF8(input, length, 'strict')
 */

static CYTHON_INLINE PyObject *__pyx_f_3re2_char_to_utf8(const char* __pyx_v_input, int __pyx_v_length) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("char_to_utf8");

  /* "re2.pyx":72
 * cdef inline object char_to_utf8(_re2.const_char_ptr input, int length):
 *     # This function converts a C string to a utf8 object.
 *     return cpython.unicode.PyUnicode_DecodeUTF8(input, length, 'strict')             # <<<<<<<<<<<<<<
 * 
 * cdef inline object unicode_to_bytestring(object pystring, int * encoded):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyUnicode_DecodeUTF8(__pyx_v_input, __pyx_v_length, __pyx_k__strict); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("re2.char_to_utf8");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":74
 *     return cpython.unicode.PyUnicode_DecodeUTF8(input, length, 'strict')
 * 
 * cdef inline object unicode_to_bytestring(object pystring, int * encoded):             # <<<<<<<<<<<<<<
 *     # This function will convert a utf8 string to a bytestring object.
 *     if cpython.unicode.PyUnicode_Check(pystring):
 */

static CYTHON_INLINE PyObject *__pyx_f_3re2_unicode_to_bytestring(PyObject *__pyx_v_pystring, int *__pyx_v_encoded) {
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unicode_to_bytestring");
  __Pyx_INCREF(__pyx_v_pystring);

  /* "re2.pyx":76
 * cdef inline object unicode_to_bytestring(object pystring, int * encoded):
 *     # This function will convert a utf8 string to a bytestring object.
 *     if cpython.unicode.PyUnicode_Check(pystring):             # <<<<<<<<<<<<<<
 *         pystring = cpython.unicode.PyUnicode_EncodeUTF8(cpython.unicode.PyUnicode_AS_UNICODE(pystring),
 *                                                        cpython.unicode.PyUnicode_GET_SIZE(pystring),
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_pystring);
  if (__pyx_t_1) {

    /* "re2.pyx":78
 *     if cpython.unicode.PyUnicode_Check(pystring):
 *         pystring = cpython.unicode.PyUnicode_EncodeUTF8(cpython.unicode.PyUnicode_AS_UNICODE(pystring),
 *                                                        cpython.unicode.PyUnicode_GET_SIZE(pystring),             # <<<<<<<<<<<<<<
 *                                                        "strict")
 *         encoded[0] = 1
 */
    __pyx_t_2 = PyUnicode_EncodeUTF8(PyUnicode_AS_UNICODE(__pyx_v_pystring), PyUnicode_GET_SIZE(__pyx_v_pystring), __pyx_k__strict); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_v_pystring);
    __pyx_v_pystring = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "re2.pyx":80
 *                                                        cpython.unicode.PyUnicode_GET_SIZE(pystring),
 *                                                        "strict")
 *         encoded[0] = 1             # <<<<<<<<<<<<<<
 *     else:
 *         encoded[0] = 0
 */
    (__pyx_v_encoded[0]) = 1;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "re2.pyx":82
 *         encoded[0] = 1
 *     else:
 *         encoded[0] = 0             # <<<<<<<<<<<<<<
 *     return pystring
 * 
 */
    (__pyx_v_encoded[0]) = 0;
  }
  __pyx_L3:;

  /* "re2.pyx":83
 *     else:
 *         encoded[0] = 0
 *     return pystring             # <<<<<<<<<<<<<<
 * 
 * cdef inline int pystring_to_bytestring(object pystring, char ** cstring, Py_ssize_t * length):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pystring);
  __pyx_r = __pyx_v_pystring;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("re2.unicode_to_bytestring");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_pystring);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":85
 *     return pystring
 * 
 * cdef inline int pystring_to_bytestring(object pystring, char ** cstring, Py_ssize_t * length):             # <<<<<<<<<<<<<<
 *     # This function will convert a pystring to a bytesstring, placing
 *     # the char * in cstring, and the length in length.
 */

static CYTHON_INLINE int __pyx_f_3re2_pystring_to_bytestring(PyObject *__pyx_v_pystring, char **__pyx_v_cstring, Py_ssize_t *__pyx_v_length) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pystring_to_bytestring");

  /* "re2.pyx":91
 *     # it will move to utf-8. If utf8 does not work, then it has to be
 *     # a non-supported encoding.
 *     return _re2.PyObject_AsCharBuffer(pystring, <_re2.const_char_ptr*> cstring, length)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from *:
 */
  __pyx_r = PyObject_AsCharBuffer(__pyx_v_pystring, ((const char* *)__pyx_v_cstring), __pyx_v_length);
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":97
 *     cdef void emit_endif "#endif //" ()
 * 
 * def convert_position(char* match_string, int position):             # <<<<<<<<<<<<<<
 *     cdef char * s = match_string
 *     cdef int cpos = 0
 */

static PyObject *__pyx_pf_3re2_1convert_position(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3re2_1convert_position = {__Pyx_NAMESTR("convert_position"), (PyCFunction)__pyx_pf_3re2_1convert_position, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pf_3re2_1convert_position(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_match_string;
  int __pyx_v_position;
  char *__pyx_v_s;
  int __pyx_v_cpos;
  int __pyx_v_upos;
  int __pyx_v_size;
  unsigned char __pyx_v_c;
  PyObject *__pyx_r = NULL;
  size_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char *__pyx_t_3;
  char *__pyx_t_4;
  char *__pyx_t_5;
  char *__pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannyDeclarations
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__match_string,&__pyx_n_s__position,0};
  __Pyx_RefNannySetupContext("convert_position");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__match_string);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__position);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("convert_position", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "convert_position") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_match_string = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_match_string) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_position = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_position == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_match_string = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((!__pyx_v_match_string) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_position = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_position == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("convert_position", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.convert_position");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "re2.pyx":98
 * 
 * def convert_position(char* match_string, int position):
 *     cdef char * s = match_string             # <<<<<<<<<<<<<<
 *     cdef int cpos = 0
 *     cdef int upos = 0
 */
  __pyx_v_s = __pyx_v_match_string;

  /* "re2.pyx":99
 * def convert_position(char* match_string, int position):
 *     cdef char * s = match_string
 *     cdef int cpos = 0             # <<<<<<<<<<<<<<
 *     cdef int upos = 0
 *     cdef int size = len(match_string)
 */
  __pyx_v_cpos = 0;

  /* "re2.pyx":100
 *     cdef char * s = match_string
 *     cdef int cpos = 0
 *     cdef int upos = 0             # <<<<<<<<<<<<<<
 *     cdef int size = len(match_string)
 *     cdef unsigned char c
 */
  __pyx_v_upos = 0;

  /* "re2.pyx":101
 *     cdef int cpos = 0
 *     cdef int upos = 0
 *     cdef int size = len(match_string)             # <<<<<<<<<<<<<<
 *     cdef unsigned char c
 * 
 */
  __pyx_t_1 = strlen(__pyx_v_match_string); 
  __pyx_v_size = __pyx_t_1;

  /* "re2.pyx":104
 *     cdef unsigned char c
 * 
 *     for c in s:             # <<<<<<<<<<<<<<
 *         if upos == position:
 *             break
 */
  __pyx_t_2 = PyBytes_FromString(__pyx_v_s); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_t_4 = PyBytes_AS_STRING(__pyx_t_2);
  __pyx_t_5 = (__pyx_t_4 + PyBytes_GET_SIZE(__pyx_t_2));
  for (__pyx_t_6 = __pyx_t_4; __pyx_t_6 < __pyx_t_5; __pyx_t_6++) {
    __pyx_t_3 = __pyx_t_6;
    __pyx_v_c = (__pyx_t_3[0]);

    /* "re2.pyx":105
 * 
 *     for c in s:
 *         if upos == position:             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    __pyx_t_7 = (__pyx_v_upos == __pyx_v_position);
    if (__pyx_t_7) {

      /* "re2.pyx":106
 *     for c in s:
 *         if upos == position:
 *             break             # <<<<<<<<<<<<<<
 * 
 *         if c < 0x80:
 */
      goto __pyx_L7_break;
      goto __pyx_L8;
    }
    __pyx_L8:;

    /* "re2.pyx":108
 *             break
 * 
 *         if c < 0x80:             # <<<<<<<<<<<<<<
 *             inc(cpos)
 *             inc(upos)
 */
    __pyx_t_7 = (__pyx_v_c < 0x80);
    if (__pyx_t_7) {

      /* "re2.pyx":109
 * 
 *         if c < 0x80:
 *             inc(cpos)             # <<<<<<<<<<<<<<
 *             inc(upos)
 *         elif c < 0xe0:
 */
      (++__pyx_v_cpos);

      /* "re2.pyx":110
 *         if c < 0x80:
 *             inc(cpos)
 *             inc(upos)             # <<<<<<<<<<<<<<
 *         elif c < 0xe0:
 *             cpos += 2
 */
      (++__pyx_v_upos);
      goto __pyx_L9;
    }

    /* "re2.pyx":111
 *             inc(cpos)
 *             inc(upos)
 *         elif c < 0xe0:             # <<<<<<<<<<<<<<
 *             cpos += 2
 *             inc(upos)
 */
    __pyx_t_7 = (__pyx_v_c < 0xe0);
    if (__pyx_t_7) {

      /* "re2.pyx":112
 *             inc(upos)
 *         elif c < 0xe0:
 *             cpos += 2             # <<<<<<<<<<<<<<
 *             inc(upos)
 *         elif c < 0xf0:
 */
      __pyx_v_cpos = (__pyx_v_cpos + 2);

      /* "re2.pyx":113
 *         elif c < 0xe0:
 *             cpos += 2
 *             inc(upos)             # <<<<<<<<<<<<<<
 *         elif c < 0xf0:
 *             cpos += 3
 */
      (++__pyx_v_upos);
      goto __pyx_L9;
    }

    /* "re2.pyx":114
 *             cpos += 2
 *             inc(upos)
 *         elif c < 0xf0:             # <<<<<<<<<<<<<<
 *             cpos += 3
 *             inc(upos)
 */
    __pyx_t_7 = (__pyx_v_c < 0xf0);
    if (__pyx_t_7) {

      /* "re2.pyx":115
 *             inc(upos)
 *         elif c < 0xf0:
 *             cpos += 3             # <<<<<<<<<<<<<<
 *             inc(upos)
 *         else:
 */
      __pyx_v_cpos = (__pyx_v_cpos + 3);

      /* "re2.pyx":116
 *         elif c < 0xf0:
 *             cpos += 3
 *             inc(upos)             # <<<<<<<<<<<<<<
 *         else:
 *             cpos += 4
 */
      (++__pyx_v_upos);
      goto __pyx_L9;
    }
    /*else*/ {

      /* "re2.pyx":118
 *             inc(upos)
 *         else:
 *             cpos += 4             # <<<<<<<<<<<<<<
 *             inc(upos)
 *             # wide unicode chars get 2 unichars when python is compiled with --enable-unicode=ucs2
 */
      __pyx_v_cpos = (__pyx_v_cpos + 4);

      /* "re2.pyx":119
 *         else:
 *             cpos += 4
 *             inc(upos)             # <<<<<<<<<<<<<<
 *             # wide unicode chars get 2 unichars when python is compiled with --enable-unicode=ucs2
 *             # TODO: verify this
 */
      (++__pyx_v_upos);

      /* "re2.pyx":122
 *             # wide unicode chars get 2 unichars when python is compiled with --enable-unicode=ucs2
 *             # TODO: verify this
 *             emit_ifndef_py_unicode_wide()             # <<<<<<<<<<<<<<
 *             inc(upos)
 *             emit_endif()
 */
      #if !defined(Py_UNICODE_WIDE) //();

      /* "re2.pyx":123
 *             # TODO: verify this
 *             emit_ifndef_py_unicode_wide()
 *             inc(upos)             # <<<<<<<<<<<<<<
 *             emit_endif()
 * 
 */
      (++__pyx_v_upos);

      /* "re2.pyx":124
 *             emit_ifndef_py_unicode_wide()
 *             inc(upos)
 *             emit_endif()             # <<<<<<<<<<<<<<
 * 
 *     return cpos
 */
      #endif //();
    }
    __pyx_L9:;
  }
  __pyx_L7_break:;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

  /* "re2.pyx":126
 *             emit_endif()
 * 
 *     return cpos             # <<<<<<<<<<<<<<
 * 
 * cdef class Match:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_cpos); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("re2.convert_position");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":144
 *     cdef dict _named_indexes
 * 
 *     def __init__(self, object pattern_object, int num_groups):             # <<<<<<<<<<<<<<
 *         self._lastindex = -1
 *         self._groups = None
 */

static int __pyx_pf_3re2_5Match___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_3re2_5Match___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pattern_object = 0;
  int __pyx_v_num_groups;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__pattern_object,&__pyx_n_s__num_groups,0};
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pattern_object);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__num_groups);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_pattern_object = values[0];
    __pyx_v_num_groups = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_num_groups == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_pattern_object = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_num_groups = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_num_groups == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.Match.__init__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "re2.pyx":145
 * 
 *     def __init__(self, object pattern_object, int num_groups):
 *         self._lastindex = -1             # <<<<<<<<<<<<<<
 *         self._groups = None
 *         self._pos = 0
 */
  ((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_lastindex = -1;

  /* "re2.pyx":146
 *     def __init__(self, object pattern_object, int num_groups):
 *         self._lastindex = -1
 *         self._groups = None             # <<<<<<<<<<<<<<
 *         self._pos = 0
 *         self._endpos = -1
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_groups);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_groups));
  ((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_groups = ((PyObject*)Py_None);

  /* "re2.pyx":147
 *         self._lastindex = -1
 *         self._groups = None
 *         self._pos = 0             # <<<<<<<<<<<<<<
 *         self._endpos = -1
 *         self.matches = _re2.new_StringPiece_array(num_groups + 1)
 */
  ((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_pos = 0;

  /* "re2.pyx":148
 *         self._groups = None
 *         self._pos = 0
 *         self._endpos = -1             # <<<<<<<<<<<<<<
 *         self.matches = _re2.new_StringPiece_array(num_groups + 1)
 *         self.nmatches = num_groups
 */
  ((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_endpos = -1;

  /* "re2.pyx":149
 *         self._pos = 0
 *         self._endpos = -1
 *         self.matches = _re2.new_StringPiece_array(num_groups + 1)             # <<<<<<<<<<<<<<
 *         self.nmatches = num_groups
 *         self._pattern_object = pattern_object
 */
  ((struct __pyx_obj_3re2_Match *)__pyx_v_self)->matches = new_StringPiece_array((__pyx_v_num_groups + 1));

  /* "re2.pyx":150
 *         self._endpos = -1
 *         self.matches = _re2.new_StringPiece_array(num_groups + 1)
 *         self.nmatches = num_groups             # <<<<<<<<<<<<<<
 *         self._pattern_object = pattern_object
 * 
 */
  ((struct __pyx_obj_3re2_Match *)__pyx_v_self)->nmatches = __pyx_v_num_groups;

  /* "re2.pyx":151
 *         self.matches = _re2.new_StringPiece_array(num_groups + 1)
 *         self.nmatches = num_groups
 *         self._pattern_object = pattern_object             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_INCREF(__pyx_v_pattern_object);
  __Pyx_GIVEREF(__pyx_v_pattern_object);
  __Pyx_GOTREF(((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_pattern_object);
  __Pyx_DECREF(((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_pattern_object);
  ((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_pattern_object = __pyx_v_pattern_object;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":153
 *         self._pattern_object = pattern_object
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         _re2.delete_StringPiece_array(self.matches)
 * 
 */

static void __pyx_pf_3re2_5Match_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_3re2_5Match_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "re2.pyx":154
 * 
 *     def __dealloc__(self):
 *         _re2.delete_StringPiece_array(self.matches)             # <<<<<<<<<<<<<<
 * 
 *     property re:
 */
  delete_StringPiece_array(((struct __pyx_obj_3re2_Match *)__pyx_v_self)->matches);

  __Pyx_RefNannyFinishContext();
}

/* "re2.pyx":157
 * 
 *     property re:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._pattern_object
 * 
 */

static PyObject *__pyx_pf_3re2_5Match_2re___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_3re2_5Match_2re___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__");

  /* "re2.pyx":158
 *     property re:
 *         def __get__(self):
 *             return self._pattern_object             # <<<<<<<<<<<<<<
 * 
 *     property pos:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_pattern_object);
  __pyx_r = ((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_pattern_object;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":161
 * 
 *     property pos:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._pos
 * 
 */

static PyObject *__pyx_pf_3re2_5Match_3pos___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_3re2_5Match_3pos___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__");

  /* "re2.pyx":162
 *     property pos:
 *         def __get__(self):
 *             return self._pos             # <<<<<<<<<<<<<<
 * 
 *     property endpos:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_pos); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("re2.Match.pos.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":165
 * 
 *     property endpos:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._endpos
 * 
 */

static PyObject *__pyx_pf_3re2_5Match_6endpos___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_3re2_5Match_6endpos___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__");

  /* "re2.pyx":166
 *     property endpos:
 *         def __get__(self):
 *             return self._endpos             # <<<<<<<<<<<<<<
 * 
 *     property string:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_endpos); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("re2.Match.endpos.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":169
 * 
 *     property string:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.match_string
 * 
 */

static PyObject *__pyx_pf_3re2_5Match_6string___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_3re2_5Match_6string___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__");

  /* "re2.pyx":170
 *     property string:
 *         def __get__(self):
 *             return self.match_string             # <<<<<<<<<<<<<<
 * 
 *     cdef init_groups(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((struct __pyx_obj_3re2_Match *)__pyx_v_self)->match_string);
  __pyx_r = ((struct __pyx_obj_3re2_Match *)__pyx_v_self)->match_string;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":172
 *             return self.match_string
 * 
 *     cdef init_groups(self):             # <<<<<<<<<<<<<<
 *         cdef list groups = []
 *         cdef int i
 */

static PyObject *__pyx_f_3re2_5Match_init_groups(struct __pyx_obj_3re2_Match *__pyx_v_self) {
  PyObject *__pyx_v_groups = 0;
  int __pyx_v_i;
  int __pyx_v_cur_encoded;
  const char* __pyx_v_last_end;
  const char* __pyx_v_cur_end;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_groups");

  /* "re2.pyx":173
 * 
 *     cdef init_groups(self):
 *         cdef list groups = []             # <<<<<<<<<<<<<<
 *         cdef int i
 *         cdef bint cur_encoded = self.encoded
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_groups = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "re2.pyx":175
 *         cdef list groups = []
 *         cdef int i
 *         cdef bint cur_encoded = self.encoded             # <<<<<<<<<<<<<<
 * 
 *         if self._groups is not None:
 */
  __pyx_v_cur_encoded = __pyx_v_self->encoded;

  /* "re2.pyx":177
 *         cdef bint cur_encoded = self.encoded
 * 
 *         if self._groups is not None:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_t_2 = (__pyx_v_self->_groups != ((PyObject*)Py_None));
  if (__pyx_t_2) {

    /* "re2.pyx":178
 * 
 *         if self._groups is not None:
 *             return             # <<<<<<<<<<<<<<
 * 
 *         cdef _re2.const_char_ptr last_end = NULL
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "re2.pyx":180
 *             return
 * 
 *         cdef _re2.const_char_ptr last_end = NULL             # <<<<<<<<<<<<<<
 *         cdef _re2.const_char_ptr cur_end = NULL
 * 
 */
  __pyx_v_last_end = NULL;

  /* "re2.pyx":181
 * 
 *         cdef _re2.const_char_ptr last_end = NULL
 *         cdef _re2.const_char_ptr cur_end = NULL             # <<<<<<<<<<<<<<
 * 
 *         for i in range(self.nmatches):
 */
  __pyx_v_cur_end = NULL;

  /* "re2.pyx":183
 *         cdef _re2.const_char_ptr cur_end = NULL
 * 
 *         for i in range(self.nmatches):             # <<<<<<<<<<<<<<
 *             if self.matches[i].data() == NULL:
 *                 groups.append(None)
 */
  __pyx_t_3 = __pyx_v_self->nmatches;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "re2.pyx":184
 * 
 *         for i in range(self.nmatches):
 *             if self.matches[i].data() == NULL:             # <<<<<<<<<<<<<<
 *                 groups.append(None)
 *             else:
 */
    __pyx_t_2 = ((__pyx_v_self->matches[__pyx_v_i]).data() == NULL);
    if (__pyx_t_2) {

      /* "re2.pyx":185
 *         for i in range(self.nmatches):
 *             if self.matches[i].data() == NULL:
 *                 groups.append(None)             # <<<<<<<<<<<<<<
 *             else:
 *                 if i > 0:
 */
      if (unlikely(__pyx_v_groups == Py_None)) {
        PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
      }
      __pyx_t_1 = Py_None;
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_5 = PyList_Append(__pyx_v_groups, __pyx_t_1); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L6;
    }
    /*else*/ {

      /* "re2.pyx":187
 *                 groups.append(None)
 *             else:
 *                 if i > 0:             # <<<<<<<<<<<<<<
 *                     cur_end = self.matches[i].data() + self.matches[i].length()
 * 
 */
      __pyx_t_2 = (__pyx_v_i > 0);
      if (__pyx_t_2) {

        /* "re2.pyx":188
 *             else:
 *                 if i > 0:
 *                     cur_end = self.matches[i].data() + self.matches[i].length()             # <<<<<<<<<<<<<<
 * 
 *                     if last_end == NULL:
 */
        __pyx_v_cur_end = ((__pyx_v_self->matches[__pyx_v_i]).data() + (__pyx_v_self->matches[__pyx_v_i]).length());

        /* "re2.pyx":190
 *                     cur_end = self.matches[i].data() + self.matches[i].length()
 * 
 *                     if last_end == NULL:             # <<<<<<<<<<<<<<
 *                         last_end = cur_end
 *                         self._lastindex = i
 */
        __pyx_t_2 = (__pyx_v_last_end == NULL);
        if (__pyx_t_2) {

          /* "re2.pyx":191
 * 
 *                     if last_end == NULL:
 *                         last_end = cur_end             # <<<<<<<<<<<<<<
 *                         self._lastindex = i
 *                     else:
 */
          __pyx_v_last_end = __pyx_v_cur_end;

          /* "re2.pyx":192
 *                     if last_end == NULL:
 *                         last_end = cur_end
 *                         self._lastindex = i             # <<<<<<<<<<<<<<
 *                     else:
 *                         # The rules for last group are a bit complicated:
 */
          __pyx_v_self->_lastindex = __pyx_v_i;
          goto __pyx_L8;
        }
        /*else*/ {

          /* "re2.pyx":197
 *                         # if two groups end at the same point, the earlier one is considered last
 *                         # so we don't switch our selection unless the end point has moved
 *                         if cur_end > last_end:             # <<<<<<<<<<<<<<
 *                             last_end = cur_end
 *                             self._lastindex = i
 */
          __pyx_t_2 = (__pyx_v_cur_end > __pyx_v_last_end);
          if (__pyx_t_2) {

            /* "re2.pyx":198
 *                         # so we don't switch our selection unless the end point has moved
 *                         if cur_end > last_end:
 *                             last_end = cur_end             # <<<<<<<<<<<<<<
 *                             self._lastindex = i
 * 
 */
            __pyx_v_last_end = __pyx_v_cur_end;

            /* "re2.pyx":199
 *                         if cur_end > last_end:
 *                             last_end = cur_end
 *                             self._lastindex = i             # <<<<<<<<<<<<<<
 * 
 *                 if cur_encoded:
 */
            __pyx_v_self->_lastindex = __pyx_v_i;
            goto __pyx_L9;
          }
          __pyx_L9:;
        }
        __pyx_L8:;
        goto __pyx_L7;
      }
      __pyx_L7:;

      /* "re2.pyx":201
 *                             self._lastindex = i
 * 
 *                 if cur_encoded:             # <<<<<<<<<<<<<<
 *                     groups.append(char_to_utf8(self.matches[i].data(), self.matches[i].length()))
 *                 else:
 */
      if (__pyx_v_cur_encoded) {

        /* "re2.pyx":202
 * 
 *                 if cur_encoded:
 *                     groups.append(char_to_utf8(self.matches[i].data(), self.matches[i].length()))             # <<<<<<<<<<<<<<
 *                 else:
 *                     groups.append(self.matches[i].data()[:self.matches[i].length()])
 */
        if (unlikely(__pyx_v_groups == Py_None)) {
          PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
        }
        __pyx_t_1 = __pyx_f_3re2_char_to_utf8((__pyx_v_self->matches[__pyx_v_i]).data(), (__pyx_v_self->matches[__pyx_v_i]).length()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_5 = PyList_Append(__pyx_v_groups, __pyx_t_1); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L10;
      }
      /*else*/ {

        /* "re2.pyx":204
 *                     groups.append(char_to_utf8(self.matches[i].data(), self.matches[i].length()))
 *                 else:
 *                     groups.append(self.matches[i].data()[:self.matches[i].length()])             # <<<<<<<<<<<<<<
 *         self._groups = tuple(groups)
 * 
 */
        if (unlikely(__pyx_v_groups == Py_None)) {
          PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
        }
        __pyx_t_1 = PyBytes_FromStringAndSize((__pyx_v_self->matches[__pyx_v_i]).data() + 0, (__pyx_v_self->matches[__pyx_v_i]).length() - 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_1));
        __pyx_t_5 = PyList_Append(__pyx_v_groups, ((PyObject *)__pyx_t_1)); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
      }
      __pyx_L10:;
    }
    __pyx_L6:;
  }

  /* "re2.pyx":205
 *                 else:
 *                     groups.append(self.matches[i].data()[:self.matches[i].length()])
 *         self._groups = tuple(groups)             # <<<<<<<<<<<<<<
 * 
 *     def groups(self, default=None):
 */
  if (unlikely(__pyx_v_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_1 = ((PyObject *)PyList_AsTuple(__pyx_v_groups)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __Pyx_GOTREF(__pyx_v_self->_groups);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_groups));
  __pyx_v_self->_groups = __pyx_t_1;
  __pyx_t_1 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("re2.Match.init_groups");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_groups);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":207
 *         self._groups = tuple(groups)
 * 
 *     def groups(self, default=None):             # <<<<<<<<<<<<<<
 *         self.init_groups()
 *         if default is not None:
 */

static PyObject *__pyx_pf_3re2_5Match_2groups(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_3re2_5Match_2groups(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_default = 0;
  PyObject *__pyx_v_g;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannyDeclarations
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__default,0};
  __Pyx_RefNannySetupContext("groups");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__default);
        if (value) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "groups") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_default = values[0];
  } else {
    __pyx_v_default = ((PyObject *)Py_None);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v_default = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("groups", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.Match.groups");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_g = Py_None; __Pyx_INCREF(Py_None);

  /* "re2.pyx":208
 * 
 *     def groups(self, default=None):
 *         self.init_groups()             # <<<<<<<<<<<<<<
 *         if default is not None:
 *             return tuple([g or default for g in self._groups[1:]])
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_3re2_Match *)((struct __pyx_obj_3re2_Match *)__pyx_v_self)->__pyx_vtab)->init_groups(((struct __pyx_obj_3re2_Match *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":209
 *     def groups(self, default=None):
 *         self.init_groups()
 *         if default is not None:             # <<<<<<<<<<<<<<
 *             return tuple([g or default for g in self._groups[1:]])
 *         return self._groups[1:]
 */
  __pyx_t_2 = (__pyx_v_default != Py_None);
  if (__pyx_t_2) {

    /* "re2.pyx":210
 *         self.init_groups()
 *         if default is not None:
 *             return tuple([g or default for g in self._groups[1:]])             # <<<<<<<<<<<<<<
 *         return self._groups[1:]
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __pyx_t_4 = __Pyx_PySequence_GetSlice(((PyObject *)((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_groups), 1, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    if (unlikely(__pyx_t_4 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_3 = 0; __pyx_t_5 = ((PyObject *)__pyx_t_4); __Pyx_INCREF(__pyx_t_5);
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    for (;;) {
      if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
      __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++;
      __Pyx_DECREF(__pyx_v_g);
      __pyx_v_g = __pyx_t_4;
      __pyx_t_4 = 0;
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_g); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      if (!__pyx_t_2) {
        __Pyx_INCREF(__pyx_v_default);
        __pyx_t_4 = __pyx_v_default;
      } else {
        __Pyx_INCREF(__pyx_v_g);
        __pyx_t_4 = __pyx_v_g;
      }
      if (unlikely(PyList_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = ((PyObject *)PyList_AsTuple(__pyx_t_1)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
    __pyx_r = ((PyObject *)__pyx_t_5);
    __pyx_t_5 = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "re2.pyx":211
 *         if default is not None:
 *             return tuple([g or default for g in self._groups[1:]])
 *         return self._groups[1:]             # <<<<<<<<<<<<<<
 * 
 *     def group(self, *args):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PySequence_GetSlice(((PyObject *)((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_groups), 1, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_5));
  __pyx_r = ((PyObject *)__pyx_t_5);
  __pyx_t_5 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("re2.Match.groups");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":213
 *         return self._groups[1:]
 * 
 *     def group(self, *args):             # <<<<<<<<<<<<<<
 *         if len(args) > 1:
 *             return tuple([self.group(i) for i in args])
 */

static PyObject *__pyx_pf_3re2_5Match_3group(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_3re2_5Match_3group(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_groupnum;
  int __pyx_v_idx;
  PyObject *__pyx_v_i;
  PyObject *__pyx_r = NULL;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("group");
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "group", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_v_groupnum = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_i = Py_None; __Pyx_INCREF(Py_None);

  /* "re2.pyx":214
 * 
 *     def group(self, *args):
 *         if len(args) > 1:             # <<<<<<<<<<<<<<
 *             return tuple([self.group(i) for i in args])
 *         elif len(args) > 0:
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_1 = PyTuple_GET_SIZE(((PyObject *)__pyx_v_args)); 
  __pyx_t_2 = (__pyx_t_1 > 1);
  if (__pyx_t_2) {

    /* "re2.pyx":215
 *     def group(self, *args):
 *         if len(args) > 1:
 *             return tuple([self.group(i) for i in args])             # <<<<<<<<<<<<<<
 *         elif len(args) > 0:
 *             groupnum = args[0]
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    if (unlikely(__pyx_v_args == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_1 = 0; __pyx_t_4 = ((PyObject *)__pyx_v_args); __Pyx_INCREF(__pyx_t_4);
    for (;;) {
      if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
      __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++;
      __Pyx_DECREF(__pyx_v_i);
      __pyx_v_i = __pyx_t_5;
      __pyx_t_5 = 0;
      __pyx_t_5 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__group); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_6));
      __Pyx_INCREF(__pyx_v_i);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_i);
      __Pyx_GIVEREF(__pyx_v_i);
      __pyx_t_7 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
      if (unlikely(PyList_Append(__pyx_t_3, (PyObject*)__pyx_t_7))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = ((PyObject *)PyList_AsTuple(__pyx_t_3)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __pyx_r = ((PyObject *)__pyx_t_4);
    __pyx_t_4 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }

  /* "re2.pyx":216
 *         if len(args) > 1:
 *             return tuple([self.group(i) for i in args])
 *         elif len(args) > 0:             # <<<<<<<<<<<<<<
 *             groupnum = args[0]
 *         else:
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_1 = PyTuple_GET_SIZE(((PyObject *)__pyx_v_args)); 
  __pyx_t_2 = (__pyx_t_1 > 0);
  if (__pyx_t_2) {

    /* "re2.pyx":217
 *             return tuple([self.group(i) for i in args])
 *         elif len(args) > 0:
 *             groupnum = args[0]             # <<<<<<<<<<<<<<
 *         else:
 *             groupnum = 0
 */
    __pyx_t_4 = __Pyx_GetItemInt_Tuple(((PyObject *)__pyx_v_args), 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_v_groupnum);
    __pyx_v_groupnum = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "re2.pyx":219
 *             groupnum = args[0]
 *         else:
 *             groupnum = 0             # <<<<<<<<<<<<<<
 * 
 *         cdef int idx
 */
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_DECREF(__pyx_v_groupnum);
    __pyx_v_groupnum = __pyx_int_0;
  }
  __pyx_L5:;

  /* "re2.pyx":223
 *         cdef int idx
 * 
 *         self.init_groups()             # <<<<<<<<<<<<<<
 * 
 *         if isinstance(groupnum, basestring):
 */
  __pyx_t_4 = ((struct __pyx_vtabstruct_3re2_Match *)((struct __pyx_obj_3re2_Match *)__pyx_v_self)->__pyx_vtab)->init_groups(((struct __pyx_obj_3re2_Match *)__pyx_v_self)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "re2.pyx":225
 *         self.init_groups()
 * 
 *         if isinstance(groupnum, basestring):             # <<<<<<<<<<<<<<
 *             return self.groupdict()[groupnum]
 * 
 */
  __pyx_t_4 = __pyx_builtin_basestring;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_groupnum, __pyx_t_4); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {

    /* "re2.pyx":226
 * 
 *         if isinstance(groupnum, basestring):
 *             return self.groupdict()[groupnum]             # <<<<<<<<<<<<<<
 * 
 *         idx = groupnum
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__groupdict); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_GetItem(__pyx_t_3, __pyx_v_groupnum); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
    goto __pyx_L8;
  }
  __pyx_L8:;

  /* "re2.pyx":228
 *             return self.groupdict()[groupnum]
 * 
 *         idx = groupnum             # <<<<<<<<<<<<<<
 * 
 *         if idx > self.nmatches - 1:
 */
  __pyx_t_8 = __Pyx_PyInt_AsInt(__pyx_v_groupnum); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_idx = __pyx_t_8;

  /* "re2.pyx":230
 *         idx = groupnum
 * 
 *         if idx > self.nmatches - 1:             # <<<<<<<<<<<<<<
 *             raise IndexError("no such group")
 *         return self._groups[idx]
 */
  __pyx_t_2 = (__pyx_v_idx > (((struct __pyx_obj_3re2_Match *)__pyx_v_self)->nmatches - 1));
  if (__pyx_t_2) {

    /* "re2.pyx":231
 * 
 *         if idx > self.nmatches - 1:
 *             raise IndexError("no such group")             # <<<<<<<<<<<<<<
 *         return self._groups[idx]
 * 
 */
    __pyx_t_4 = PyObject_Call(__pyx_builtin_IndexError, ((PyObject *)__pyx_k_tuple_4), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L9;
  }
  __pyx_L9:;

  /* "re2.pyx":232
 *         if idx > self.nmatches - 1:
 *             raise IndexError("no such group")
 *         return self._groups[idx]             # <<<<<<<<<<<<<<
 * 
 *     cdef object _convert_positions(self, positions):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_GetItemInt_Tuple(((PyObject *)((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_groups), __pyx_v_idx, sizeof(int), PyInt_FromLong); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("re2.Match.group");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_groupnum);
  __Pyx_DECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":234
 *         return self._groups[idx]
 * 
 *     cdef object _convert_positions(self, positions):             # <<<<<<<<<<<<<<
 *         cdef char * s = self.match_string
 *         cdef int cpos = 0
 */

static PyObject *__pyx_f_3re2_5Match__convert_positions(struct __pyx_obj_3re2_Match *__pyx_v_self, PyObject *__pyx_v_positions) {
  char *__pyx_v_s;
  int __pyx_v_cpos;
  int __pyx_v_upos;
  int __pyx_v_size;
  int __pyx_v_c;
  PyObject *__pyx_v_new_positions;
  long __pyx_v_i;
  Py_ssize_t __pyx_v_num_positions;
  PyObject *__pyx_r = NULL;
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_convert_positions");
  __pyx_v_new_positions = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);

  /* "re2.pyx":235
 * 
 *     cdef object _convert_positions(self, positions):
 *         cdef char * s = self.match_string             # <<<<<<<<<<<<<<
 *         cdef int cpos = 0
 *         cdef int upos = 0
 */
  __pyx_t_1 = PyBytes_AsString(__pyx_v_self->match_string); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_s = __pyx_t_1;

  /* "re2.pyx":236
 *     cdef object _convert_positions(self, positions):
 *         cdef char * s = self.match_string
 *         cdef int cpos = 0             # <<<<<<<<<<<<<<
 *         cdef int upos = 0
 *         cdef int size = len(self.match_string)
 */
  __pyx_v_cpos = 0;

  /* "re2.pyx":237
 *         cdef char * s = self.match_string
 *         cdef int cpos = 0
 *         cdef int upos = 0             # <<<<<<<<<<<<<<
 *         cdef int size = len(self.match_string)
 *         cdef int c
 */
  __pyx_v_upos = 0;

  /* "re2.pyx":238
 *         cdef int cpos = 0
 *         cdef int upos = 0
 *         cdef int size = len(self.match_string)             # <<<<<<<<<<<<<<
 *         cdef int c
 * 
 */
  __pyx_t_2 = __pyx_v_self->match_string;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_size = __pyx_t_3;

  /* "re2.pyx":241
 *         cdef int c
 * 
 *         new_positions = []             # <<<<<<<<<<<<<<
 *         i = 0
 *         num_positions = len(positions)
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_DECREF(((PyObject *)__pyx_v_new_positions));
  __pyx_v_new_positions = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "re2.pyx":242
 * 
 *         new_positions = []
 *         i = 0             # <<<<<<<<<<<<<<
 *         num_positions = len(positions)
 *         if positions[i] == -1:
 */
  __pyx_v_i = 0;

  /* "re2.pyx":243
 *         new_positions = []
 *         i = 0
 *         num_positions = len(positions)             # <<<<<<<<<<<<<<
 *         if positions[i] == -1:
 *             new_positions.append(-1)
 */
  __pyx_t_3 = PyObject_Length(__pyx_v_positions); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_num_positions = __pyx_t_3;

  /* "re2.pyx":244
 *         i = 0
 *         num_positions = len(positions)
 *         if positions[i] == -1:             # <<<<<<<<<<<<<<
 *             new_positions.append(-1)
 *             inc(i)
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_positions, __pyx_v_i, sizeof(long), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_int_neg_1, Py_EQ); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_5) {

    /* "re2.pyx":245
 *         num_positions = len(positions)
 *         if positions[i] == -1:
 *             new_positions.append(-1)             # <<<<<<<<<<<<<<
 *             inc(i)
 *             if i == num_positions:
 */
    if (unlikely(__pyx_v_new_positions == Py_None)) {
      PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_6 = PyList_Append(__pyx_v_new_positions, __pyx_int_neg_1); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "re2.pyx":246
 *         if positions[i] == -1:
 *             new_positions.append(-1)
 *             inc(i)             # <<<<<<<<<<<<<<
 *             if i == num_positions:
 *                 return new_positions
 */
    (++__pyx_v_i);

    /* "re2.pyx":247
 *             new_positions.append(-1)
 *             inc(i)
 *             if i == num_positions:             # <<<<<<<<<<<<<<
 *                 return new_positions
 *         if positions[i] == 0:
 */
    __pyx_t_5 = (__pyx_v_i == __pyx_v_num_positions);
    if (__pyx_t_5) {

      /* "re2.pyx":248
 *             inc(i)
 *             if i == num_positions:
 *                 return new_positions             # <<<<<<<<<<<<<<
 *         if positions[i] == 0:
 *             new_positions.append(0)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)__pyx_v_new_positions));
      __pyx_r = ((PyObject *)__pyx_v_new_positions);
      goto __pyx_L0;
      goto __pyx_L4;
    }
    __pyx_L4:;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "re2.pyx":249
 *             if i == num_positions:
 *                 return new_positions
 *         if positions[i] == 0:             # <<<<<<<<<<<<<<
 *             new_positions.append(0)
 *             inc(i)
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_positions, __pyx_v_i, sizeof(long), PyInt_FromLong); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_4, __pyx_int_0, Py_EQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_5) {

    /* "re2.pyx":250
 *                 return new_positions
 *         if positions[i] == 0:
 *             new_positions.append(0)             # <<<<<<<<<<<<<<
 *             inc(i)
 *             if i == num_positions:
 */
    if (unlikely(__pyx_v_new_positions == Py_None)) {
      PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_6 = PyList_Append(__pyx_v_new_positions, __pyx_int_0); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "re2.pyx":251
 *         if positions[i] == 0:
 *             new_positions.append(0)
 *             inc(i)             # <<<<<<<<<<<<<<
 *             if i == num_positions:
 *                 return new_positions
 */
    (++__pyx_v_i);

    /* "re2.pyx":252
 *             new_positions.append(0)
 *             inc(i)
 *             if i == num_positions:             # <<<<<<<<<<<<<<
 *                 return new_positions
 * 
 */
    __pyx_t_5 = (__pyx_v_i == __pyx_v_num_positions);
    if (__pyx_t_5) {

      /* "re2.pyx":253
 *             inc(i)
 *             if i == num_positions:
 *                 return new_positions             # <<<<<<<<<<<<<<
 * 
 *         while cpos < size:
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)__pyx_v_new_positions));
      __pyx_r = ((PyObject *)__pyx_v_new_positions);
      goto __pyx_L0;
      goto __pyx_L6;
    }
    __pyx_L6:;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "re2.pyx":255
 *                 return new_positions
 * 
 *         while cpos < size:             # <<<<<<<<<<<<<<
 *             c = <unsigned char>s[cpos]
 *             if c < 0x80:
 */
  while (1) {
    __pyx_t_5 = (__pyx_v_cpos < __pyx_v_size);
    if (!__pyx_t_5) break;

    /* "re2.pyx":256
 * 
 *         while cpos < size:
 *             c = <unsigned char>s[cpos]             # <<<<<<<<<<<<<<
 *             if c < 0x80:
 *                 inc(cpos)
 */
    __pyx_v_c = ((unsigned char)(__pyx_v_s[__pyx_v_cpos]));

    /* "re2.pyx":257
 *         while cpos < size:
 *             c = <unsigned char>s[cpos]
 *             if c < 0x80:             # <<<<<<<<<<<<<<
 *                 inc(cpos)
 *                 inc(upos)
 */
    __pyx_t_5 = (__pyx_v_c < 0x80);
    if (__pyx_t_5) {

      /* "re2.pyx":258
 *             c = <unsigned char>s[cpos]
 *             if c < 0x80:
 *                 inc(cpos)             # <<<<<<<<<<<<<<
 *                 inc(upos)
 *             elif c < 0xe0:
 */
      (++__pyx_v_cpos);

      /* "re2.pyx":259
 *             if c < 0x80:
 *                 inc(cpos)
 *                 inc(upos)             # <<<<<<<<<<<<<<
 *             elif c < 0xe0:
 *                 cpos += 2
 */
      (++__pyx_v_upos);
      goto __pyx_L9;
    }

    /* "re2.pyx":260
 *                 inc(cpos)
 *                 inc(upos)
 *             elif c < 0xe0:             # <<<<<<<<<<<<<<
 *                 cpos += 2
 *                 inc(upos)
 */
    __pyx_t_5 = (__pyx_v_c < 0xe0);
    if (__pyx_t_5) {

      /* "re2.pyx":261
 *                 inc(upos)
 *             elif c < 0xe0:
 *                 cpos += 2             # <<<<<<<<<<<<<<
 *                 inc(upos)
 *             elif c < 0xf0:
 */
      __pyx_v_cpos = (__pyx_v_cpos + 2);

      /* "re2.pyx":262
 *             elif c < 0xe0:
 *                 cpos += 2
 *                 inc(upos)             # <<<<<<<<<<<<<<
 *             elif c < 0xf0:
 *                 cpos += 3
 */
      (++__pyx_v_upos);
      goto __pyx_L9;
    }

    /* "re2.pyx":263
 *                 cpos += 2
 *                 inc(upos)
 *             elif c < 0xf0:             # <<<<<<<<<<<<<<
 *                 cpos += 3
 *                 inc(upos)
 */
    __pyx_t_5 = (__pyx_v_c < 0xf0);
    if (__pyx_t_5) {

      /* "re2.pyx":264
 *                 inc(upos)
 *             elif c < 0xf0:
 *                 cpos += 3             # <<<<<<<<<<<<<<
 *                 inc(upos)
 *             else:
 */
      __pyx_v_cpos = (__pyx_v_cpos + 3);

      /* "re2.pyx":265
 *             elif c < 0xf0:
 *                 cpos += 3
 *                 inc(upos)             # <<<<<<<<<<<<<<
 *             else:
 *                 cpos += 4
 */
      (++__pyx_v_upos);
      goto __pyx_L9;
    }
    /*else*/ {

      /* "re2.pyx":267
 *                 inc(upos)
 *             else:
 *                 cpos += 4             # <<<<<<<<<<<<<<
 *                 inc(upos)
 *                 # wide unicode chars get 2 unichars when python is compiled with --enable-unicode=ucs2
 */
      __pyx_v_cpos = (__pyx_v_cpos + 4);

      /* "re2.pyx":268
 *             else:
 *                 cpos += 4
 *                 inc(upos)             # <<<<<<<<<<<<<<
 *                 # wide unicode chars get 2 unichars when python is compiled with --enable-unicode=ucs2
 *                 # TODO: verify this
 */
      (++__pyx_v_upos);

      /* "re2.pyx":271
 *                 # wide unicode chars get 2 unichars when python is compiled with --enable-unicode=ucs2
 *                 # TODO: verify this
 *                 emit_ifndef_py_unicode_wide()             # <<<<<<<<<<<<<<
 *                 inc(upos)
 *                 emit_endif()
 */
      #if !defined(Py_UNICODE_WIDE) //();

      /* "re2.pyx":272
 *                 # TODO: verify this
 *                 emit_ifndef_py_unicode_wide()
 *                 inc(upos)             # <<<<<<<<<<<<<<
 *                 emit_endif()
 * 
 */
      (++__pyx_v_upos);

      /* "re2.pyx":273
 *                 emit_ifndef_py_unicode_wide()
 *                 inc(upos)
 *                 emit_endif()             # <<<<<<<<<<<<<<
 * 
 *             if positions[i] == cpos:
 */
      #endif //();
    }
    __pyx_L9:;

    /* "re2.pyx":275
 *                 emit_endif()
 * 
 *             if positions[i] == cpos:             # <<<<<<<<<<<<<<
 *                 new_positions.append(upos)
 *                 inc(i)
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_positions, __pyx_v_i, sizeof(long), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyInt_FromLong(__pyx_v_cpos); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = PyObject_RichCompare(__pyx_t_2, __pyx_t_4, Py_EQ); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_5) {

      /* "re2.pyx":276
 * 
 *             if positions[i] == cpos:
 *                 new_positions.append(upos)             # <<<<<<<<<<<<<<
 *                 inc(i)
 *                 if i == num_positions:
 */
      if (unlikely(__pyx_v_new_positions == Py_None)) {
        PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
      }
      __pyx_t_7 = PyInt_FromLong(__pyx_v_upos); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = PyList_Append(__pyx_v_new_positions, __pyx_t_7); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "re2.pyx":277
 *             if positions[i] == cpos:
 *                 new_positions.append(upos)
 *                 inc(i)             # <<<<<<<<<<<<<<
 *                 if i == num_positions:
 *                     return new_positions
 */
      (++__pyx_v_i);

      /* "re2.pyx":278
 *                 new_positions.append(upos)
 *                 inc(i)
 *                 if i == num_positions:             # <<<<<<<<<<<<<<
 *                     return new_positions
 * 
 */
      __pyx_t_5 = (__pyx_v_i == __pyx_v_num_positions);
      if (__pyx_t_5) {

        /* "re2.pyx":279
 *                 inc(i)
 *                 if i == num_positions:
 *                     return new_positions             # <<<<<<<<<<<<<<
 * 
 *     def _convert_spans(self, spans):
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(((PyObject *)__pyx_v_new_positions));
        __pyx_r = ((PyObject *)__pyx_v_new_positions);
        goto __pyx_L0;
        goto __pyx_L11;
      }
      __pyx_L11:;
      goto __pyx_L10;
    }
    __pyx_L10:;
  }

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("re2.Match._convert_positions");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_new_positions);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":281
 *                     return new_positions
 * 
 *     def _convert_spans(self, spans):             # <<<<<<<<<<<<<<
 *         positions = [x for x,y in spans] + [y for x,y in spans]
 *         positions = sorted(set(positions))
 */

static PyObject *__pyx_pf_3re2_5Match_4_convert_spans(PyObject *__pyx_v_self, PyObject *__pyx_v_spans); /*proto*/
static PyObject *__pyx_pf_3re2_5Match_4_convert_spans(PyObject *__pyx_v_self, PyObject *__pyx_v_spans) {
  PyObject *__pyx_v_positions;
  PyObject *__pyx_v_posdict;
  PyObject *__pyx_v_x;
  PyObject *__pyx_v_y;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_convert_spans");
  __pyx_v_positions = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_posdict = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_x = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_y = Py_None; __Pyx_INCREF(Py_None);

  /* "re2.pyx":282
 * 
 *     def _convert_spans(self, spans):
 *         positions = [x for x,y in spans] + [y for x,y in spans]             # <<<<<<<<<<<<<<
 *         positions = sorted(set(positions))
 *         posdict = dict(zip(positions, self._convert_positions(positions)))
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyList_CheckExact(__pyx_v_spans) || PyTuple_CheckExact(__pyx_v_spans)) {
    __pyx_t_2 = 0; __pyx_t_3 = __pyx_v_spans; __Pyx_INCREF(__pyx_t_3);
  } else {
    __pyx_t_2 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_spans); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
  }
  for (;;) {
    if (likely(PyList_CheckExact(__pyx_t_3))) {
      if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_3)) break;
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++;
    } else if (likely(PyTuple_CheckExact(__pyx_t_3))) {
      if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
      __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++;
    } else {
      __pyx_t_4 = PyIter_Next(__pyx_t_3);
      if (!__pyx_t_4) {
        if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    if (PyTuple_CheckExact(__pyx_t_4) && likely(PyTuple_GET_SIZE(__pyx_t_4) == 2)) {
      PyObject* tuple = __pyx_t_4;
      __pyx_t_5 = PyTuple_GET_ITEM(tuple, 0); __Pyx_INCREF(__pyx_t_5);
      __pyx_t_6 = PyTuple_GET_ITEM(tuple, 1); __Pyx_INCREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_v_x);
      __pyx_v_x = __pyx_t_5;
      __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_v_y);
      __pyx_v_y = __pyx_t_6;
      __pyx_t_6 = 0;
    } else {
      __pyx_t_7 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_5 = __Pyx_UnpackItem(__pyx_t_7, 0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_UnpackItem(__pyx_t_7, 1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_EndUnpack(__pyx_t_7, 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_v_x);
      __pyx_v_x = __pyx_t_5;
      __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_v_y);
      __pyx_v_y = __pyx_t_6;
      __pyx_t_6 = 0;
    }
    if (unlikely(PyList_Append(__pyx_t_1, (PyObject*)__pyx_v_x))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  if (PyList_CheckExact(__pyx_v_spans) || PyTuple_CheckExact(__pyx_v_spans)) {
    __pyx_t_2 = 0; __pyx_t_4 = __pyx_v_spans; __Pyx_INCREF(__pyx_t_4);
  } else {
    __pyx_t_2 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_spans); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
  }
  for (;;) {
    if (likely(PyList_CheckExact(__pyx_t_4))) {
      if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_4)) break;
      __pyx_t_6 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_2); __Pyx_INCREF(__pyx_t_6); __pyx_t_2++;
    } else if (likely(PyTuple_CheckExact(__pyx_t_4))) {
      if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
      __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_2); __Pyx_INCREF(__pyx_t_6); __pyx_t_2++;
    } else {
      __pyx_t_6 = PyIter_Next(__pyx_t_4);
      if (!__pyx_t_6) {
        if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    if (PyTuple_CheckExact(__pyx_t_6) && likely(PyTuple_GET_SIZE(__pyx_t_6) == 2)) {
      PyObject* tuple = __pyx_t_6;
      __pyx_t_5 = PyTuple_GET_ITEM(tuple, 0); __Pyx_INCREF(__pyx_t_5);
      __pyx_t_7 = PyTuple_GET_ITEM(tuple, 1); __Pyx_INCREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_v_x);
      __pyx_v_x = __pyx_t_5;
      __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_v_y);
      __pyx_v_y = __pyx_t_7;
      __pyx_t_7 = 0;
    } else {
      __pyx_t_8 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_5 = __Pyx_UnpackItem(__pyx_t_8, 0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = __Pyx_UnpackItem(__pyx_t_8, 1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_EndUnpack(__pyx_t_8, 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_v_x);
      __pyx_v_x = __pyx_t_5;
      __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_v_y);
      __pyx_v_y = __pyx_t_7;
      __pyx_t_7 = 0;
    }
    if (unlikely(PyList_Append(__pyx_t_3, (PyObject*)__pyx_v_y))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(((PyObject *)__pyx_t_1), ((PyObject *)__pyx_t_3)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_v_positions);
  __pyx_v_positions = ((PyObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "re2.pyx":283
 *     def _convert_spans(self, spans):
 *         positions = [x for x,y in spans] + [y for x,y in spans]
 *         positions = sorted(set(positions))             # <<<<<<<<<<<<<<
 *         posdict = dict(zip(positions, self._convert_positions(positions)))
 * 
 */
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  __Pyx_INCREF(__pyx_v_positions);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_positions);
  __Pyx_GIVEREF(__pyx_v_positions);
  __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)(&PySet_Type))), ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_builtin_sorted, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_v_positions);
  __pyx_v_positions = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "re2.pyx":284
 *         positions = [x for x,y in spans] + [y for x,y in spans]
 *         positions = sorted(set(positions))
 *         posdict = dict(zip(positions, self._convert_positions(positions)))             # <<<<<<<<<<<<<<
 * 
 *         return [(posdict[x], posdict[y]) for x,y in spans]
 */
  __pyx_t_3 = ((struct __pyx_vtabstruct_3re2_Match *)((struct __pyx_obj_3re2_Match *)__pyx_v_self)->__pyx_vtab)->_convert_positions(((struct __pyx_obj_3re2_Match *)__pyx_v_self), __pyx_v_positions); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  __Pyx_INCREF(__pyx_v_positions);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_positions);
  __Pyx_GIVEREF(__pyx_v_positions);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_builtin_zip, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)(&PyDict_Type))), ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_v_posdict));
  __pyx_v_posdict = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "re2.pyx":286
 *         posdict = dict(zip(positions, self._convert_positions(positions)))
 * 
 *         return [(posdict[x], posdict[y]) for x,y in spans]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  if (PyList_CheckExact(__pyx_v_spans) || PyTuple_CheckExact(__pyx_v_spans)) {
    __pyx_t_2 = 0; __pyx_t_4 = __pyx_v_spans; __Pyx_INCREF(__pyx_t_4);
  } else {
    __pyx_t_2 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_spans); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
  }
  for (;;) {
    if (likely(PyList_CheckExact(__pyx_t_4))) {
      if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_4)) break;
      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_2); __Pyx_INCREF(__pyx_t_1); __pyx_t_2++;
    } else if (likely(PyTuple_CheckExact(__pyx_t_4))) {
      if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
      __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_2); __Pyx_INCREF(__pyx_t_1); __pyx_t_2++;
    } else {
      __pyx_t_1 = PyIter_Next(__pyx_t_4);
      if (!__pyx_t_1) {
        if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if (PyTuple_CheckExact(__pyx_t_1) && likely(PyTuple_GET_SIZE(__pyx_t_1) == 2)) {
      PyObject* tuple = __pyx_t_1;
      __pyx_t_6 = PyTuple_GET_ITEM(tuple, 0); __Pyx_INCREF(__pyx_t_6);
      __pyx_t_7 = PyTuple_GET_ITEM(tuple, 1); __Pyx_INCREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_v_x);
      __pyx_v_x = __pyx_t_6;
      __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_v_y);
      __pyx_v_y = __pyx_t_7;
      __pyx_t_7 = 0;
    } else {
      __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_6 = __Pyx_UnpackItem(__pyx_t_5, 0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_UnpackItem(__pyx_t_5, 1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_EndUnpack(__pyx_t_5, 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_v_x);
      __pyx_v_x = __pyx_t_6;
      __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_v_y);
      __pyx_v_y = __pyx_t_7;
      __pyx_t_7 = 0;
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(((PyObject *)__pyx_v_posdict), __pyx_v_x); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyDict_GetItem(((PyObject *)__pyx_v_posdict), __pyx_v_y); if (!__pyx_t_7) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_6));
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_t_1 = 0;
    __pyx_t_7 = 0;
    if (unlikely(PyList_Append(__pyx_t_3, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_INCREF(((PyObject *)__pyx_t_3));
  __pyx_r = ((PyObject *)__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("re2.Match._convert_spans");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_positions);
  __Pyx_DECREF(__pyx_v_posdict);
  __Pyx_DECREF(__pyx_v_x);
  __Pyx_DECREF(__pyx_v_y);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":289
 * 
 * 
 *     cdef _make_spans(self):             # <<<<<<<<<<<<<<
 *         if self._spans is not None:
 *             return
 */

static PyObject *__pyx_f_3re2_5Match__make_spans(struct __pyx_obj_3re2_Match *__pyx_v_self) {
  int __pyx_v_start;
  int __pyx_v_end;
  char *__pyx_v_s;
  re2::StringPiece *__pyx_v_piece;
  PyObject *__pyx_v_spans;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  char *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_make_spans");
  __pyx_v_spans = Py_None; __Pyx_INCREF(Py_None);

  /* "re2.pyx":290
 * 
 *     cdef _make_spans(self):
 *         if self._spans is not None:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_spans != ((PyObject*)Py_None));
  if (__pyx_t_1) {

    /* "re2.pyx":291
 *     cdef _make_spans(self):
 *         if self._spans is not None:
 *             return             # <<<<<<<<<<<<<<
 * 
 *         cdef int start, end
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "re2.pyx":294
 * 
 *         cdef int start, end
 *         cdef char * s = self.match_string             # <<<<<<<<<<<<<<
 *         cdef _re2.StringPiece * piece
 * 
 */
  __pyx_t_2 = PyBytes_AsString(__pyx_v_self->match_string); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_s = __pyx_t_2;

  /* "re2.pyx":297
 *         cdef _re2.StringPiece * piece
 * 
 *         spans = []             # <<<<<<<<<<<<<<
 *         for i in range(self.nmatches):
 *             if self.matches[i].data() == NULL:
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_DECREF(__pyx_v_spans);
  __pyx_v_spans = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "re2.pyx":298
 * 
 *         spans = []
 *         for i in range(self.nmatches):             # <<<<<<<<<<<<<<
 *             if self.matches[i].data() == NULL:
 *                 spans.append((-1, -1))
 */
  __pyx_t_4 = __pyx_v_self->nmatches;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "re2.pyx":299
 *         spans = []
 *         for i in range(self.nmatches):
 *             if self.matches[i].data() == NULL:             # <<<<<<<<<<<<<<
 *                 spans.append((-1, -1))
 *             else:
 */
    __pyx_t_1 = ((__pyx_v_self->matches[__pyx_v_i]).data() == NULL);
    if (__pyx_t_1) {

      /* "re2.pyx":300
 *         for i in range(self.nmatches):
 *             if self.matches[i].data() == NULL:
 *                 spans.append((-1, -1))             # <<<<<<<<<<<<<<
 *             else:
 *                 piece = &self.matches[i]
 */
      __pyx_t_3 = __Pyx_PyObject_Append(__pyx_v_spans, ((PyObject *)__pyx_k_tuple_5)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L6;
    }
    /*else*/ {

      /* "re2.pyx":302
 *                 spans.append((-1, -1))
 *             else:
 *                 piece = &self.matches[i]             # <<<<<<<<<<<<<<
 *                 if piece.data() == NULL:
 *                     return (-1, -1)
 */
      __pyx_v_piece = (&(__pyx_v_self->matches[__pyx_v_i]));

      /* "re2.pyx":303
 *             else:
 *                 piece = &self.matches[i]
 *                 if piece.data() == NULL:             # <<<<<<<<<<<<<<
 *                     return (-1, -1)
 *                 start = piece.data() - s
 */
      __pyx_t_1 = (__pyx_v_piece->data() == NULL);
      if (__pyx_t_1) {

        /* "re2.pyx":304
 *                 piece = &self.matches[i]
 *                 if piece.data() == NULL:
 *                     return (-1, -1)             # <<<<<<<<<<<<<<
 *                 start = piece.data() - s
 *                 end = start + piece.length()
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(((PyObject *)__pyx_k_tuple_6));
        __pyx_r = ((PyObject *)__pyx_k_tuple_6);
        goto __pyx_L0;
        goto __pyx_L7;
      }
      __pyx_L7:;

      /* "re2.pyx":305
 *                 if piece.data() == NULL:
 *                     return (-1, -1)
 *                 start = piece.data() - s             # <<<<<<<<<<<<<<
 *                 end = start + piece.length()
 *                 spans.append((start, end))
 */
      __pyx_v_start = (__pyx_v_piece->data() - __pyx_v_s);

      /* "re2.pyx":306
 *                     return (-1, -1)
 *                 start = piece.data() - s
 *                 end = start + piece.length()             # <<<<<<<<<<<<<<
 *                 spans.append((start, end))
 * 
 */
      __pyx_v_end = (__pyx_v_start + __pyx_v_piece->length());

      /* "re2.pyx":307
 *                 start = piece.data() - s
 *                 end = start + piece.length()
 *                 spans.append((start, end))             # <<<<<<<<<<<<<<
 * 
 *         if self.encoded:
 */
      __pyx_t_3 = PyInt_FromLong(__pyx_v_start); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyInt_FromLong(__pyx_v_end); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_7));
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_3 = 0;
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_spans, ((PyObject *)__pyx_t_7)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __pyx_L6:;
  }

  /* "re2.pyx":309
 *                 spans.append((start, end))
 * 
 *         if self.encoded:             # <<<<<<<<<<<<<<
 *             spans = self._convert_spans(spans)
 * 
 */
  if (__pyx_v_self->encoded) {

    /* "re2.pyx":310
 * 
 *         if self.encoded:
 *             spans = self._convert_spans(spans)             # <<<<<<<<<<<<<<
 * 
 *         self._spans = tuple(spans)
 */
    __pyx_t_6 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s___convert_spans); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_7));
    __Pyx_INCREF(__pyx_v_spans);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_spans);
    __Pyx_GIVEREF(__pyx_v_spans);
    __pyx_t_3 = PyObject_Call(__pyx_t_6, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_v_spans);
    __pyx_v_spans = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L8;
  }
  __pyx_L8:;

  /* "re2.pyx":312
 *             spans = self._convert_spans(spans)
 * 
 *         self._spans = tuple(spans)             # <<<<<<<<<<<<<<
 * 
 *     property regs:
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_INCREF(__pyx_v_spans);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_spans);
  __Pyx_GIVEREF(__pyx_v_spans);
  __pyx_t_7 = PyObject_Call(((PyObject *)((PyObject*)(&PyTuple_Type))), ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_7);
  __Pyx_GOTREF(__pyx_v_self->_spans);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_spans));
  __pyx_v_self->_spans = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("re2.Match._make_spans");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_spans);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":315
 * 
 *     property regs:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self._spans is None:
 *                 self._make_spans()
 */

static PyObject *__pyx_pf_3re2_5Match_4regs___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_3re2_5Match_4regs___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__");

  /* "re2.pyx":316
 *     property regs:
 *         def __get__(self):
 *             if self._spans is None:             # <<<<<<<<<<<<<<
 *                 self._make_spans()
 *             return self._spans
 */
  __pyx_t_1 = (((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_spans == ((PyObject*)Py_None));
  if (__pyx_t_1) {

    /* "re2.pyx":317
 *         def __get__(self):
 *             if self._spans is None:
 *                 self._make_spans()             # <<<<<<<<<<<<<<
 *             return self._spans
 * 
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_3re2_Match *)((struct __pyx_obj_3re2_Match *)__pyx_v_self)->__pyx_vtab)->_make_spans(((struct __pyx_obj_3re2_Match *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "re2.pyx":318
 *             if self._spans is None:
 *                 self._make_spans()
 *             return self._spans             # <<<<<<<<<<<<<<
 * 
 *     def expand(self, object template):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_spans));
  __pyx_r = ((PyObject *)((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_spans);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("re2.Match.regs.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":320
 *             return self._spans
 * 
 *     def expand(self, object template):             # <<<<<<<<<<<<<<
 *         # TODO - This can be optimized to work a bit faster in C.
 *         # Expand a template with groups
 */

static PyObject *__pyx_pf_3re2_5Match_5expand(PyObject *__pyx_v_self, PyObject *__pyx_v_template); /*proto*/
static PyObject *__pyx_pf_3re2_5Match_5expand(PyObject *__pyx_v_self, PyObject *__pyx_v_template) {
  PyObject *__pyx_v_items;
  PyObject *__pyx_v_i;
  PyObject *__pyx_v_item;
  PyObject *__pyx_v_name;
  PyObject *__pyx_v_rest;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("expand");
  __pyx_v_items = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_i = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_item = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_name = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_rest = Py_None; __Pyx_INCREF(Py_None);

  /* "re2.pyx":323
 *         # TODO - This can be optimized to work a bit faster in C.
 *         # Expand a template with groups
 *         items = template.split('\\')             # <<<<<<<<<<<<<<
 *         for i, item in enumerate(items[1:]):
 *             if item[0].isdigit():
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_template, __pyx_n_s__split); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_8), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_v_items);
  __pyx_v_items = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "re2.pyx":324
 *         # Expand a template with groups
 *         items = template.split('\\')
 *         for i, item in enumerate(items[1:]):             # <<<<<<<<<<<<<<
 *             if item[0].isdigit():
 *                 # Number group
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_2 = __pyx_int_0;
  __pyx_t_1 = __Pyx_PySequence_GetSlice(__pyx_v_items, 1, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = 0; __pyx_t_4 = __pyx_t_1; __Pyx_INCREF(__pyx_t_4);
  } else {
    __pyx_t_3 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(PyList_CheckExact(__pyx_t_4))) {
      if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_4)) break;
      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++;
    } else if (likely(PyTuple_CheckExact(__pyx_t_4))) {
      if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
      __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++;
    } else {
      __pyx_t_1 = PyIter_Next(__pyx_t_4);
      if (!__pyx_t_1) {
        if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_DECREF(__pyx_v_item);
    __pyx_v_item = __pyx_t_1;
    __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_v_i);
    __pyx_v_i = __pyx_t_2;
    __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_int_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "re2.pyx":325
 *         items = template.split('\\')
 *         for i, item in enumerate(items[1:]):
 *             if item[0].isdigit():             # <<<<<<<<<<<<<<
 *                 # Number group
 *                 if item[0] == '0':
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_item, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__isdigit); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_6) {

      /* "re2.pyx":327
 *             if item[0].isdigit():
 *                 # Number group
 *                 if item[0] == '0':             # <<<<<<<<<<<<<<
 *                     items[i + 1] = '\x00' + item[1:]
 *                 else:
 */
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_item, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, ((PyObject *)__pyx_kp_s__0), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {

        /* "re2.pyx":328
 *                 # Number group
 *                 if item[0] == '0':
 *                     items[i + 1] = '\x00' + item[1:]             # <<<<<<<<<<<<<<
 *                 else:
 *                     items[i + 1] = self.group(int(item[0])) + item[1:]
 */
        __pyx_t_5 = __Pyx_PySequence_GetSlice(__pyx_v_item, 1, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_1 = PyNumber_Add(((PyObject *)__pyx_kp_s_9), __pyx_t_5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyNumber_Add(__pyx_v_i, __pyx_int_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        if (PyObject_SetItem(__pyx_v_items, __pyx_t_5, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L8;
      }
      /*else*/ {

        /* "re2.pyx":330
 *                     items[i + 1] = '\x00' + item[1:]
 *                 else:
 *                     items[i + 1] = self.group(int(item[0])) + item[1:]             # <<<<<<<<<<<<<<
 *             elif item[:2] == 'g<' and '>' in item:
 *                 # This is a named group
 */
        __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__group); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_5) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_7));
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_5 = PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
        __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_7));
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_5 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PySequence_GetSlice(__pyx_v_item, 1, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_1 = PyNumber_Add(__pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyNumber_Add(__pyx_v_i, __pyx_int_1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        if (PyObject_SetItem(__pyx_v_items, __pyx_t_7, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __pyx_L8:;
      goto __pyx_L7;
    }

    /* "re2.pyx":331
 *                 else:
 *                     items[i + 1] = self.group(int(item[0])) + item[1:]
 *             elif item[:2] == 'g<' and '>' in item:             # <<<<<<<<<<<<<<
 *                 # This is a named group
 *                 name, rest = item[2:].split('>', 1)
 */
    __pyx_t_1 = __Pyx_PySequence_GetSlice(__pyx_v_item, 0, 2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = PyObject_RichCompare(__pyx_t_1, ((PyObject *)__pyx_kp_s_10), Py_EQ); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_6) {
      __pyx_t_8 = ((PySequence_Contains(__pyx_v_item, ((PyObject *)__pyx_kp_s_11)))); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_9 = __pyx_t_8;
    } else {
      __pyx_t_9 = __pyx_t_6;
    }
    if (__pyx_t_9) {

      /* "re2.pyx":333
 *             elif item[:2] == 'g<' and '>' in item:
 *                 # This is a named group
 *                 name, rest = item[2:].split('>', 1)             # <<<<<<<<<<<<<<
 *                 items[i + 1] = self.group(name) + rest
 *             else:
 */
      __pyx_t_7 = __Pyx_PySequence_GetSlice(__pyx_v_item, 2, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_1 = PyObject_GetAttr(__pyx_t_7, __pyx_n_s__split); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_12), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (PyTuple_CheckExact(__pyx_t_7) && likely(PyTuple_GET_SIZE(__pyx_t_7) == 2)) {
        PyObject* tuple = __pyx_t_7;
        __pyx_t_1 = PyTuple_GET_ITEM(tuple, 0); __Pyx_INCREF(__pyx_t_1);
        __pyx_t_5 = PyTuple_GET_ITEM(tuple, 1); __Pyx_INCREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_v_name);
        __pyx_v_name = __pyx_t_1;
        __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_v_rest);
        __pyx_v_rest = __pyx_t_5;
        __pyx_t_5 = 0;
      } else {
        __pyx_t_10 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_1 = __Pyx_UnpackItem(__pyx_t_10, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_5 = __Pyx_UnpackItem(__pyx_t_10, 1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        if (__Pyx_EndUnpack(__pyx_t_10, 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_v_name);
        __pyx_v_name = __pyx_t_1;
        __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_v_rest);
        __pyx_v_rest = __pyx_t_5;
        __pyx_t_5 = 0;
      }

      /* "re2.pyx":334
 *                 # This is a named group
 *                 name, rest = item[2:].split('>', 1)
 *                 items[i + 1] = self.group(name) + rest             # <<<<<<<<<<<<<<
 *             else:
 *                 # This isn't a template at all
 */
      __pyx_t_7 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__group); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_5));
      __Pyx_INCREF(__pyx_v_name);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_name);
      __Pyx_GIVEREF(__pyx_v_name);
      __pyx_t_1 = PyObject_Call(__pyx_t_7, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
      __pyx_t_5 = PyNumber_Add(__pyx_t_1, __pyx_v_rest); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyNumber_Add(__pyx_v_i, __pyx_int_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      if (PyObject_SetItem(__pyx_v_items, __pyx_t_1, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L7;
    }
    /*else*/ {

      /* "re2.pyx":337
 *             else:
 *                 # This isn't a template at all
 *                 items[i + 1] = '\\' + item             # <<<<<<<<<<<<<<
 *         return ''.join(items)
 * 
 */
      __pyx_t_5 = PyNumber_Add(((PyObject *)__pyx_kp_s_7), __pyx_v_item); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = PyNumber_Add(__pyx_v_i, __pyx_int_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      if (PyObject_SetItem(__pyx_v_items, __pyx_t_1, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_L7:;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "re2.pyx":338
 *                 # This isn't a template at all
 *                 items[i + 1] = '\\' + item
 *         return ''.join(items)             # <<<<<<<<<<<<<<
 * 
 *     def groupdict(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_kp_s_13), __pyx_n_s__join); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  __Pyx_INCREF(__pyx_v_items);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_items);
  __Pyx_GIVEREF(__pyx_v_items);
  __pyx_t_5 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("re2.Match.expand");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_items);
  __Pyx_DECREF(__pyx_v_i);
  __Pyx_DECREF(__pyx_v_item);
  __Pyx_DECREF(__pyx_v_name);
  __Pyx_DECREF(__pyx_v_rest);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":340
 *         return ''.join(items)
 * 
 *     def groupdict(self):             # <<<<<<<<<<<<<<
 *         cdef _re2.stringintmapiterator it
 *         cdef dict result = {}
 */

static PyObject *__pyx_pf_3re2_5Match_6groupdict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_3re2_5Match_6groupdict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  std::map<std::string, int>::const_iterator __pyx_v_it;
  PyObject *__pyx_v_result = 0;
  PyObject *__pyx_v_indexes = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("groupdict");

  /* "re2.pyx":342
 *     def groupdict(self):
 *         cdef _re2.stringintmapiterator it
 *         cdef dict result = {}             # <<<<<<<<<<<<<<
 *         cdef dict indexes = {}
 * 
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "re2.pyx":343
 *         cdef _re2.stringintmapiterator it
 *         cdef dict result = {}
 *         cdef dict indexes = {}             # <<<<<<<<<<<<<<
 * 
 *         self.init_groups()
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_indexes = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "re2.pyx":345
 *         cdef dict indexes = {}
 * 
 *         self.init_groups()             # <<<<<<<<<<<<<<
 * 
 *         if self._named_groups:
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_3re2_Match *)((struct __pyx_obj_3re2_Match *)__pyx_v_self)->__pyx_vtab)->init_groups(((struct __pyx_obj_3re2_Match *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":347
 *         self.init_groups()
 * 
 *         if self._named_groups:             # <<<<<<<<<<<<<<
 *             return self._named_groups
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(((PyObject *)((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_named_groups)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_2) {

    /* "re2.pyx":348
 * 
 *         if self._named_groups:
 *             return self._named_groups             # <<<<<<<<<<<<<<
 * 
 *         self._named_groups = result
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_named_groups));
    __pyx_r = ((PyObject *)((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_named_groups);
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "re2.pyx":350
 *             return self._named_groups
 * 
 *         self._named_groups = result             # <<<<<<<<<<<<<<
 *         it = self.named_groups.begin()
 *         while it != self.named_groups.end():
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_result));
  __Pyx_GOTREF(((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_named_groups);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_named_groups));
  ((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_named_groups = __pyx_v_result;

  /* "re2.pyx":351
 * 
 *         self._named_groups = result
 *         it = self.named_groups.begin()             # <<<<<<<<<<<<<<
 *         while it != self.named_groups.end():
 *             indexes[cpp_to_pystring(deref(it).first)] = deref(it).second
 */
  __pyx_v_it = ((struct __pyx_obj_3re2_Match *)__pyx_v_self)->named_groups->begin();

  /* "re2.pyx":352
 *         self._named_groups = result
 *         it = self.named_groups.begin()
 *         while it != self.named_groups.end():             # <<<<<<<<<<<<<<
 *             indexes[cpp_to_pystring(deref(it).first)] = deref(it).second
 *             result[cpp_to_pystring(deref(it).first)] = self._groups[deref(it).second]
 */
  while (1) {
    __pyx_t_2 = (__pyx_v_it != ((struct __pyx_obj_3re2_Match *)__pyx_v_self)->named_groups->end());
    if (!__pyx_t_2) break;

    /* "re2.pyx":353
 *         it = self.named_groups.begin()
 *         while it != self.named_groups.end():
 *             indexes[cpp_to_pystring(deref(it).first)] = deref(it).second             # <<<<<<<<<<<<<<
 *             result[cpp_to_pystring(deref(it).first)] = self._groups[deref(it).second]
 *             inc(it)
 */
    __pyx_t_1 = PyInt_FromLong((*__pyx_v_it).second); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_f_3re2_cpp_to_pystring((*__pyx_v_it).first); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(((PyObject *)__pyx_v_indexes), __pyx_t_3, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "re2.pyx":354
 *         while it != self.named_groups.end():
 *             indexes[cpp_to_pystring(deref(it).first)] = deref(it).second
 *             result[cpp_to_pystring(deref(it).first)] = self._groups[deref(it).second]             # <<<<<<<<<<<<<<
 *             inc(it)
 * 
 */
    __pyx_t_4 = (*__pyx_v_it).second;
    __pyx_t_1 = __Pyx_GetItemInt_Tuple(((PyObject *)((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_groups), __pyx_t_4, sizeof(int), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_f_3re2_cpp_to_pystring((*__pyx_v_it).first); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(((PyObject *)__pyx_v_result), __pyx_t_3, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "re2.pyx":355
 *             indexes[cpp_to_pystring(deref(it).first)] = deref(it).second
 *             result[cpp_to_pystring(deref(it).first)] = self._groups[deref(it).second]
 *             inc(it)             # <<<<<<<<<<<<<<
 * 
 *         self._named_groups = result
 */
    (++__pyx_v_it);
  }

  /* "re2.pyx":357
 *             inc(it)
 * 
 *         self._named_groups = result             # <<<<<<<<<<<<<<
 *         self._named_indexes = indexes
 *         return result
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_result));
  __Pyx_GOTREF(((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_named_groups);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_named_groups));
  ((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_named_groups = __pyx_v_result;

  /* "re2.pyx":358
 * 
 *         self._named_groups = result
 *         self._named_indexes = indexes             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_indexes));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_indexes));
  __Pyx_GOTREF(((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_named_indexes);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_named_indexes));
  ((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_named_indexes = __pyx_v_indexes;

  /* "re2.pyx":359
 *         self._named_groups = result
 *         self._named_indexes = indexes
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def end(self, group=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("re2.Match.groupdict");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_indexes);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":361
 *         return result
 * 
 *     def end(self, group=0):             # <<<<<<<<<<<<<<
 *         return self.span(group)[1]
 * 
 */

static PyObject *__pyx_pf_3re2_5Match_7end(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_3re2_5Match_7end(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_group = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannyDeclarations
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__group,0};
  __Pyx_RefNannySetupContext("end");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_int_0);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__group);
        if (value) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "end") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_group = values[0];
  } else {
    __pyx_v_group = ((PyObject *)__pyx_int_0);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v_group = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("end", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.Match.end");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "re2.pyx":362
 * 
 *     def end(self, group=0):
 *         return self.span(group)[1]             # <<<<<<<<<<<<<<
 * 
 *     def start(self, group=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__span); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_v_group);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_group);
  __Pyx_GIVEREF(__pyx_v_group);
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, 1, sizeof(long), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("re2.Match.end");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":364
 *         return self.span(group)[1]
 * 
 *     def start(self, group=0):             # <<<<<<<<<<<<<<
 *         return self.span(group)[0]
 * 
 */

static PyObject *__pyx_pf_3re2_5Match_8start(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_3re2_5Match_8start(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_group = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannyDeclarations
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__group,0};
  __Pyx_RefNannySetupContext("start");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_int_0);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__group);
        if (value) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "start") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 364; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_group = values[0];
  } else {
    __pyx_v_group = ((PyObject *)__pyx_int_0);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v_group = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("start", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 364; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.Match.start");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "re2.pyx":365
 * 
 *     def start(self, group=0):
 *         return self.span(group)[0]             # <<<<<<<<<<<<<<
 * 
 *     def span(self, group=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__span); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_v_group);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_group);
  __Pyx_GIVEREF(__pyx_v_group);
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("re2.Match.start");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":367
 *         return self.span(group)[0]
 * 
 *     def span(self, group=0):             # <<<<<<<<<<<<<<
 *         self._make_spans()
 *         if type(group) is int:
 */

static PyObject *__pyx_pf_3re2_5Match_9span(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_3re2_5Match_9span(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_group = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannyDeclarations
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__group,0};
  __Pyx_RefNannySetupContext("span");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_int_0);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__group);
        if (value) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "span") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 367; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_group = values[0];
  } else {
    __pyx_v_group = ((PyObject *)__pyx_int_0);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v_group = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("span", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 367; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.Match.span");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "re2.pyx":368
 * 
 *     def span(self, group=0):
 *         self._make_spans()             # <<<<<<<<<<<<<<
 *         if type(group) is int:
 *             if group > len(self._spans):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_3re2_Match *)((struct __pyx_obj_3re2_Match *)__pyx_v_self)->__pyx_vtab)->_make_spans(((struct __pyx_obj_3re2_Match *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":369
 *     def span(self, group=0):
 *         self._make_spans()
 *         if type(group) is int:             # <<<<<<<<<<<<<<
 *             if group > len(self._spans):
 *                 raise IndexError("no such group")
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(__pyx_v_group)) == ((PyObject *)((PyObject*)(&PyInt_Type))));
  if (__pyx_t_2) {

    /* "re2.pyx":370
 *         self._make_spans()
 *         if type(group) is int:
 *             if group > len(self._spans):             # <<<<<<<<<<<<<<
 *                 raise IndexError("no such group")
 *             return self._spans[group]
 */
    __pyx_t_1 = ((PyObject *)((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_spans);
    __Pyx_INCREF(__pyx_t_1);
    if (unlikely(__pyx_t_1 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_3 = PyTuple_GET_SIZE(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_group, __pyx_t_1, Py_GT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_2) {

      /* "re2.pyx":371
 *         if type(group) is int:
 *             if group > len(self._spans):
 *                 raise IndexError("no such group")             # <<<<<<<<<<<<<<
 *             return self._spans[group]
 *         else:
 */
      __pyx_t_4 = PyObject_Call(__pyx_builtin_IndexError, ((PyObject *)__pyx_k_tuple_14), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L7;
    }
    __pyx_L7:;

    /* "re2.pyx":372
 *             if group > len(self._spans):
 *                 raise IndexError("no such group")
 *             return self._spans[group]             # <<<<<<<<<<<<<<
 *         else:
 *             self.groupdict()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = PyObject_GetItem(((PyObject *)((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_spans), __pyx_v_group); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "re2.pyx":374
 *             return self._spans[group]
 *         else:
 *             self.groupdict()             # <<<<<<<<<<<<<<
 *             if group not in self._named_indexes:
 *                 raise IndexError("no such group")
 */
    __pyx_t_4 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__groupdict); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "re2.pyx":375
 *         else:
 *             self.groupdict()
 *             if group not in self._named_indexes:             # <<<<<<<<<<<<<<
 *                 raise IndexError("no such group")
 *             return self._spans[self._named_indexes[group]]
 */
    if (unlikely(((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_named_indexes == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_2 = (__Pyx_NegateNonNeg(PyDict_Contains(((PyObject *)((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_named_indexes), __pyx_v_group))); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "re2.pyx":376
 *             self.groupdict()
 *             if group not in self._named_indexes:
 *                 raise IndexError("no such group")             # <<<<<<<<<<<<<<
 *             return self._spans[self._named_indexes[group]]
 * 
 */
      __pyx_t_1 = PyObject_Call(__pyx_builtin_IndexError, ((PyObject *)__pyx_k_tuple_15), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_Raise(__pyx_t_1, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L8;
    }
    __pyx_L8:;

    /* "re2.pyx":377
 *             if group not in self._named_indexes:
 *                 raise IndexError("no such group")
 *             return self._spans[self._named_indexes[group]]             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyDict_GetItem(((PyObject *)((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_named_indexes), __pyx_v_group); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyObject_GetItem(((PyObject *)((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_spans), __pyx_t_1); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("re2.Match.span");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":381
 * 
 *     property lastindex:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.init_groups()
 *             if self._lastindex < 1:
 */

static PyObject *__pyx_pf_3re2_5Match_9lastindex___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_3re2_5Match_9lastindex___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__");

  /* "re2.pyx":382
 *     property lastindex:
 *         def __get__(self):
 *             self.init_groups()             # <<<<<<<<<<<<<<
 *             if self._lastindex < 1:
 *                 return None
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_3re2_Match *)((struct __pyx_obj_3re2_Match *)__pyx_v_self)->__pyx_vtab)->init_groups(((struct __pyx_obj_3re2_Match *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":383
 *         def __get__(self):
 *             self.init_groups()
 *             if self._lastindex < 1:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
 */
  __pyx_t_2 = (((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_lastindex < 1);
  if (__pyx_t_2) {

    /* "re2.pyx":384
 *             self.init_groups()
 *             if self._lastindex < 1:
 *                 return None             # <<<<<<<<<<<<<<
 *             else:
 *                 return self._lastindex
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "re2.pyx":386
 *                 return None
 *             else:
 *                 return self._lastindex             # <<<<<<<<<<<<<<
 * 
 *     property lastgroup:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_lastindex); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("re2.Match.lastindex.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":389
 * 
 *     property lastgroup:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.init_groups()
 *             cdef _re2.stringintmapiterator it
 */

static PyObject *__pyx_pf_3re2_5Match_9lastgroup___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_3re2_5Match_9lastgroup___get__(PyObject *__pyx_v_self) {
  std::map<std::string, int>::const_iterator __pyx_v_it;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__");

  /* "re2.pyx":390
 *     property lastgroup:
 *         def __get__(self):
 *             self.init_groups()             # <<<<<<<<<<<<<<
 *             cdef _re2.stringintmapiterator it
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_3re2_Match *)((struct __pyx_obj_3re2_Match *)__pyx_v_self)->__pyx_vtab)->init_groups(((struct __pyx_obj_3re2_Match *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":393
 *             cdef _re2.stringintmapiterator it
 * 
 *             if self._lastindex < 1:             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
  __pyx_t_2 = (((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_lastindex < 1);
  if (__pyx_t_2) {

    /* "re2.pyx":394
 * 
 *             if self._lastindex < 1:
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *             it = self.named_groups.begin()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "re2.pyx":396
 *                 return None
 * 
 *             it = self.named_groups.begin()             # <<<<<<<<<<<<<<
 *             while it != self.named_groups.end():
 *                 if deref(it).second == self._lastindex:
 */
  __pyx_v_it = ((struct __pyx_obj_3re2_Match *)__pyx_v_self)->named_groups->begin();

  /* "re2.pyx":397
 * 
 *             it = self.named_groups.begin()
 *             while it != self.named_groups.end():             # <<<<<<<<<<<<<<
 *                 if deref(it).second == self._lastindex:
 *                     return cpp_to_pystring(deref(it).first)
 */
  while (1) {
    __pyx_t_2 = (__pyx_v_it != ((struct __pyx_obj_3re2_Match *)__pyx_v_self)->named_groups->end());
    if (!__pyx_t_2) break;

    /* "re2.pyx":398
 *             it = self.named_groups.begin()
 *             while it != self.named_groups.end():
 *                 if deref(it).second == self._lastindex:             # <<<<<<<<<<<<<<
 *                     return cpp_to_pystring(deref(it).first)
 *                 inc(it)
 */
    __pyx_t_2 = ((*__pyx_v_it).second == ((struct __pyx_obj_3re2_Match *)__pyx_v_self)->_lastindex);
    if (__pyx_t_2) {

      /* "re2.pyx":399
 *             while it != self.named_groups.end():
 *                 if deref(it).second == self._lastindex:
 *                     return cpp_to_pystring(deref(it).first)             # <<<<<<<<<<<<<<
 *                 inc(it)
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = __pyx_f_3re2_cpp_to_pystring((*__pyx_v_it).first); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L0;
      goto __pyx_L8;
    }
    __pyx_L8:;

    /* "re2.pyx":400
 *                 if deref(it).second == self._lastindex:
 *                     return cpp_to_pystring(deref(it).first)
 *                 inc(it)             # <<<<<<<<<<<<<<
 * 
 *             return None
 */
    (++__pyx_v_it);
  }

  /* "re2.pyx":402
 *                 inc(it)
 * 
 *             return None             # <<<<<<<<<<<<<<
 * 
 * cdef class Pattern:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_None);
  __pyx_r = Py_None;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("re2.Match.lastgroup.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":413
 * 
 *     property flags:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._flags
 * 
 */

static PyObject *__pyx_pf_3re2_7Pattern_5flags___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_3re2_7Pattern_5flags___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__");

  /* "re2.pyx":414
 *     property flags:
 *         def __get__(self):
 *             return self._flags             # <<<<<<<<<<<<<<
 * 
 *     property groups:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self)->_flags); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("re2.Pattern.flags.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":417
 * 
 *     property groups:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ngroups
 * 
 */

static PyObject *__pyx_pf_3re2_7Pattern_6groups___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_3re2_7Pattern_6groups___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__");

  /* "re2.pyx":418
 *     property groups:
 *         def __get__(self):
 *             return self.ngroups             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self)->ngroups); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("re2.Pattern.groups.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":420
 *             return self.ngroups
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.re_pattern
 * 
 */

static void __pyx_pf_3re2_7Pattern___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_3re2_7Pattern___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "re2.pyx":421
 * 
 *     def __dealloc__(self):
 *         del self.re_pattern             # <<<<<<<<<<<<<<
 * 
 *     cdef _search(self, string, int pos, int endpos, _re2.re2_Anchor anchoring):
 */
  delete ((struct __pyx_obj_3re2_Pattern *)__pyx_v_self)->re_pattern;

  __Pyx_RefNannyFinishContext();
}

/* "re2.pyx":423
 *         del self.re_pattern
 * 
 *     cdef _search(self, string, int pos, int endpos, _re2.re2_Anchor anchoring):             # <<<<<<<<<<<<<<
 *         """
 *         Scan through string looking for a match, and return a corresponding
 */

static PyObject *__pyx_f_3re2_7Pattern__search(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_string, int __pyx_v_pos, int __pyx_v_endpos, RE2::Anchor __pyx_v_anchoring) {
  Py_ssize_t __pyx_v_size;
  int __pyx_v_result;
  char *__pyx_v_cstring;
  int __pyx_v_encoded;
  re2::StringPiece *__pyx_v_sp;
  struct __pyx_obj_3re2_Match *__pyx_v_m = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_search");
  __Pyx_INCREF(__pyx_v_string);

  /* "re2.pyx":431
 *         cdef int result
 *         cdef char * cstring
 *         cdef int encoded = 0             # <<<<<<<<<<<<<<
 *         cdef _re2.StringPiece * sp
 *         cdef Match m = Match(self, self.ngroups + 1)
 */
  __pyx_v_encoded = 0;

  /* "re2.pyx":433
 *         cdef int encoded = 0
 *         cdef _re2.StringPiece * sp
 *         cdef Match m = Match(self, self.ngroups + 1)             # <<<<<<<<<<<<<<
 * 
 *         if hasattr(string, 'tostring'):
 */
  __pyx_t_1 = PyInt_FromLong((__pyx_v_self->ngroups + 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_3re2_Match)), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_v_m = ((struct __pyx_obj_3re2_Match *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "re2.pyx":435
 *         cdef Match m = Match(self, self.ngroups + 1)
 * 
 *         if hasattr(string, 'tostring'):             # <<<<<<<<<<<<<<
 *             string = string.tostring()
 *         string = unicode_to_bytestring(string, &encoded)
 */
  __pyx_t_1 = ((PyObject *)__pyx_n_s__tostring);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_HasAttr(__pyx_v_string, __pyx_t_1); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "re2.pyx":436
 * 
 *         if hasattr(string, 'tostring'):
 *             string = string.tostring()             # <<<<<<<<<<<<<<
 *         string = unicode_to_bytestring(string, &encoded)
 *         if pystring_to_bytestring(string, &cstring, &size) == -1:
 */
    __pyx_t_1 = PyObject_GetAttr(__pyx_v_string, __pyx_n_s__tostring); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_v_string);
    __pyx_v_string = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "re2.pyx":437
 *         if hasattr(string, 'tostring'):
 *             string = string.tostring()
 *         string = unicode_to_bytestring(string, &encoded)             # <<<<<<<<<<<<<<
 *         if pystring_to_bytestring(string, &cstring, &size) == -1:
 *             raise TypeError("expected string or buffer")
 */
  __pyx_t_2 = __pyx_f_3re2_unicode_to_bytestring(__pyx_v_string, (&__pyx_v_encoded)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_v_string);
  __pyx_v_string = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "re2.pyx":438
 *             string = string.tostring()
 *         string = unicode_to_bytestring(string, &encoded)
 *         if pystring_to_bytestring(string, &cstring, &size) == -1:             # <<<<<<<<<<<<<<
 *             raise TypeError("expected string or buffer")
 * 
 */
  __pyx_t_3 = (__pyx_f_3re2_pystring_to_bytestring(__pyx_v_string, (&__pyx_v_cstring), (&__pyx_v_size)) == -1);
  if (__pyx_t_3) {

    /* "re2.pyx":439
 *         string = unicode_to_bytestring(string, &encoded)
 *         if pystring_to_bytestring(string, &cstring, &size) == -1:
 *             raise TypeError("expected string or buffer")             # <<<<<<<<<<<<<<
 * 
 *         if endpos != -1 and endpos < size:
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_TypeError, ((PyObject *)__pyx_k_tuple_17), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "re2.pyx":441
 *             raise TypeError("expected string or buffer")
 * 
 *         if endpos != -1 and endpos < size:             # <<<<<<<<<<<<<<
 *             size = endpos
 * 
 */
  __pyx_t_3 = (__pyx_v_endpos != -1);
  if (__pyx_t_3) {
    __pyx_t_4 = (__pyx_v_endpos < __pyx_v_size);
    __pyx_t_5 = __pyx_t_4;
  } else {
    __pyx_t_5 = __pyx_t_3;
  }
  if (__pyx_t_5) {

    /* "re2.pyx":442
 * 
 *         if endpos != -1 and endpos < size:
 *             size = endpos             # <<<<<<<<<<<<<<
 * 
 *         sp = new _re2.StringPiece(cstring, size)
 */
    __pyx_v_size = __pyx_v_endpos;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "re2.pyx":444
 *             size = endpos
 * 
 *         sp = new _re2.StringPiece(cstring, size)             # <<<<<<<<<<<<<<
 *         with nogil:
 *             result = self.re_pattern.Match(sp[0], <int>pos, <int>size, anchoring, m.matches, self.ngroups + 1)
 */
  __pyx_v_sp = new re2::StringPiece(__pyx_v_cstring, __pyx_v_size);

  /* "re2.pyx":445
 * 
 *         sp = new _re2.StringPiece(cstring, size)
 *         with nogil:             # <<<<<<<<<<<<<<
 *             result = self.re_pattern.Match(sp[0], <int>pos, <int>size, anchoring, m.matches, self.ngroups + 1)
 * 
 */
  {
    #ifdef WITH_THREAD
    PyThreadState *_save = NULL;
    #endif
    Py_UNBLOCK_THREADS
    /*try:*/ {

      /* "re2.pyx":446
 *         sp = new _re2.StringPiece(cstring, size)
 *         with nogil:
 *             result = self.re_pattern.Match(sp[0], <int>pos, <int>size, anchoring, m.matches, self.ngroups + 1)             # <<<<<<<<<<<<<<
 * 
 *         del sp
 */
      __pyx_v_result = __pyx_v_self->re_pattern->Match((__pyx_v_sp[0]), __pyx_v_pos, ((int)__pyx_v_size), __pyx_v_anchoring, __pyx_v_m->matches, (__pyx_v_self->ngroups + 1));
    }

    /* "re2.pyx":445
 * 
 *         sp = new _re2.StringPiece(cstring, size)
 *         with nogil:             # <<<<<<<<<<<<<<
 *             result = self.re_pattern.Match(sp[0], <int>pos, <int>size, anchoring, m.matches, self.ngroups + 1)
 * 
 */
    /*finally:*/ {
      Py_BLOCK_THREADS
    }
  }

  /* "re2.pyx":448
 *             result = self.re_pattern.Match(sp[0], <int>pos, <int>size, anchoring, m.matches, self.ngroups + 1)
 * 
 *         del sp             # <<<<<<<<<<<<<<
 *         if result == 0:
 *             return None
 */
  delete __pyx_v_sp;

  /* "re2.pyx":449
 * 
 *         del sp
 *         if result == 0:             # <<<<<<<<<<<<<<
 *             return None
 *         m.encoded = <bint>(encoded)
 */
  __pyx_t_5 = (__pyx_v_result == 0);
  if (__pyx_t_5) {

    /* "re2.pyx":450
 *         del sp
 *         if result == 0:
 *             return None             # <<<<<<<<<<<<<<
 *         m.encoded = <bint>(encoded)
 *         m.named_groups = _re2.addressof(self.re_pattern.NamedCapturingGroups())
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
    goto __pyx_L9;
  }
  __pyx_L9:;

  /* "re2.pyx":451
 *         if result == 0:
 *             return None
 *         m.encoded = <bint>(encoded)             # <<<<<<<<<<<<<<
 *         m.named_groups = _re2.addressof(self.re_pattern.NamedCapturingGroups())
 *         m.nmatches = self.ngroups + 1
 */
  __pyx_v_m->encoded = ((int)__pyx_v_encoded);

  /* "re2.pyx":452
 *             return None
 *         m.encoded = <bint>(encoded)
 *         m.named_groups = _re2.addressof(self.re_pattern.NamedCapturingGroups())             # <<<<<<<<<<<<<<
 *         m.nmatches = self.ngroups + 1
 *         m.match_string = string
 */
  __pyx_v_m->named_groups = addressof(__pyx_v_self->re_pattern->NamedCapturingGroups());

  /* "re2.pyx":453
 *         m.encoded = <bint>(encoded)
 *         m.named_groups = _re2.addressof(self.re_pattern.NamedCapturingGroups())
 *         m.nmatches = self.ngroups + 1             # <<<<<<<<<<<<<<
 *         m.match_string = string
 *         m._pos = pos
 */
  __pyx_v_m->nmatches = (__pyx_v_self->ngroups + 1);

  /* "re2.pyx":454
 *         m.named_groups = _re2.addressof(self.re_pattern.NamedCapturingGroups())
 *         m.nmatches = self.ngroups + 1
 *         m.match_string = string             # <<<<<<<<<<<<<<
 *         m._pos = pos
 *         if endpos == -1:
 */
  __Pyx_INCREF(__pyx_v_string);
  __Pyx_GIVEREF(__pyx_v_string);
  __Pyx_GOTREF(__pyx_v_m->match_string);
  __Pyx_DECREF(__pyx_v_m->match_string);
  __pyx_v_m->match_string = __pyx_v_string;

  /* "re2.pyx":455
 *         m.nmatches = self.ngroups + 1
 *         m.match_string = string
 *         m._pos = pos             # <<<<<<<<<<<<<<
 *         if endpos == -1:
 *             m._endpos = len(string)
 */
  __pyx_v_m->_pos = __pyx_v_pos;

  /* "re2.pyx":456
 *         m.match_string = string
 *         m._pos = pos
 *         if endpos == -1:             # <<<<<<<<<<<<<<
 *             m._endpos = len(string)
 *         else:
 */
  __pyx_t_5 = (__pyx_v_endpos == -1);
  if (__pyx_t_5) {

    /* "re2.pyx":457
 *         m._pos = pos
 *         if endpos == -1:
 *             m._endpos = len(string)             # <<<<<<<<<<<<<<
 *         else:
 *             m._endpos = endpos
 */
    __pyx_t_6 = PyObject_Length(__pyx_v_string); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_m->_endpos = __pyx_t_6;
    goto __pyx_L10;
  }
  /*else*/ {

    /* "re2.pyx":459
 *             m._endpos = len(string)
 *         else:
 *             m._endpos = endpos             # <<<<<<<<<<<<<<
 *         return m
 * 
 */
    __pyx_v_m->_endpos = __pyx_v_endpos;
  }
  __pyx_L10:;

  /* "re2.pyx":460
 *         else:
 *             m._endpos = endpos
 *         return m             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_m));
  __pyx_r = ((PyObject *)__pyx_v_m);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("re2.Pattern._search");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_m);
  __Pyx_DECREF(__pyx_v_string);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":463
 * 
 * 
 *     def search(self, string, int pos=0, int endpos=-1):             # <<<<<<<<<<<<<<
 *         """
 *         Scan through string looking for a match, and return a corresponding
 */

static PyObject *__pyx_pf_3re2_7Pattern_1search(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_7Pattern_1search[] = "\n        Scan through string looking for a match, and return a corresponding\n        Match instance. Return None if no position in the string matches.\n        ";
static PyObject *__pyx_pf_3re2_7Pattern_1search(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_string = 0;
  int __pyx_v_pos;
  int __pyx_v_endpos;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__string,&__pyx_n_s__pos,&__pyx_n_s__endpos,0};
  __Pyx_RefNannySetupContext("search");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__string);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pos);
        if (value) { values[1] = value; kw_args--; }
      }
      case  2:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__endpos);
        if (value) { values[2] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "search") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_string = values[0];
    if (values[1]) {
      __pyx_v_pos = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_pos == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_pos = ((int)0);
    }
    if (values[2]) {
      __pyx_v_endpos = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_endpos == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_endpos = ((int)-1);
    }
  } else {
    __pyx_v_pos = ((int)0);
    __pyx_v_endpos = ((int)-1);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: __pyx_v_endpos = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_endpos == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  2: __pyx_v_pos = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_pos == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  1: __pyx_v_string = PyTuple_GET_ITEM(__pyx_args, 0);
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("search", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.Pattern.search");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "re2.pyx":468
 *         Match instance. Return None if no position in the string matches.
 *         """
 *         return self._search(string, pos, endpos, _re2.UNANCHORED)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_3re2_Pattern *)((struct __pyx_obj_3re2_Pattern *)__pyx_v_self)->__pyx_vtab)->_search(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self), __pyx_v_string, __pyx_v_pos, __pyx_v_endpos, RE2::UNANCHORED); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("re2.Pattern.search");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":471
 * 
 * 
 *     def match(self, string, int pos=0, int endpos=-1):             # <<<<<<<<<<<<<<
 *         """
 *         Matches zero or more characters at the beginning of the string.
 */

static PyObject *__pyx_pf_3re2_7Pattern_2match(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_7Pattern_2match[] = "\n        Matches zero or more characters at the beginning of the string.\n        ";
static PyObject *__pyx_pf_3re2_7Pattern_2match(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_string = 0;
  int __pyx_v_pos;
  int __pyx_v_endpos;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__string,&__pyx_n_s__pos,&__pyx_n_s__endpos,0};
  __Pyx_RefNannySetupContext("match");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__string);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pos);
        if (value) { values[1] = value; kw_args--; }
      }
      case  2:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__endpos);
        if (value) { values[2] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "match") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_string = values[0];
    if (values[1]) {
      __pyx_v_pos = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_pos == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_pos = ((int)0);
    }
    if (values[2]) {
      __pyx_v_endpos = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_endpos == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_endpos = ((int)-1);
    }
  } else {
    __pyx_v_pos = ((int)0);
    __pyx_v_endpos = ((int)-1);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: __pyx_v_endpos = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_endpos == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  2: __pyx_v_pos = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_pos == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  1: __pyx_v_string = PyTuple_GET_ITEM(__pyx_args, 0);
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("match", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.Pattern.match");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "re2.pyx":475
 *         Matches zero or more characters at the beginning of the string.
 *         """
 *         return self._search(string, pos, endpos, _re2.ANCHOR_START)             # <<<<<<<<<<<<<<
 * 
 *     cdef _print_pattern(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_3re2_Pattern *)((struct __pyx_obj_3re2_Pattern *)__pyx_v_self)->__pyx_vtab)->_search(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self), __pyx_v_string, __pyx_v_pos, __pyx_v_endpos, RE2::ANCHOR_START); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("re2.Pattern.match");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":477
 *         return self._search(string, pos, endpos, _re2.ANCHOR_START)
 * 
 *     cdef _print_pattern(self):             # <<<<<<<<<<<<<<
 *         cdef _re2.cpp_string * s
 *         s = <_re2.cpp_string *>_re2.addressofs(self.re_pattern.pattern())
 */

static PyObject *__pyx_f_3re2_7Pattern__print_pattern(struct __pyx_obj_3re2_Pattern *__pyx_v_self) {
  std::string *__pyx_v_s;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_print_pattern");

  /* "re2.pyx":479
 *     cdef _print_pattern(self):
 *         cdef _re2.cpp_string * s
 *         s = <_re2.cpp_string *>_re2.addressofs(self.re_pattern.pattern())             # <<<<<<<<<<<<<<
 *         print cpp_to_pystring(s[0]) + "\n"
 *         sys.stdout.flush()
 */
  __pyx_v_s = ((std::string *)addressofs(__pyx_v_self->re_pattern->pattern()));

  /* "re2.pyx":480
 *         cdef _re2.cpp_string * s
 *         s = <_re2.cpp_string *>_re2.addressofs(self.re_pattern.pattern())
 *         print cpp_to_pystring(s[0]) + "\n"             # <<<<<<<<<<<<<<
 *         sys.stdout.flush()
 * 
 */
  __pyx_t_1 = __pyx_f_3re2_cpp_to_pystring((__pyx_v_s[0])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, ((PyObject *)__pyx_kp_s_19)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "re2.pyx":481
 *         s = <_re2.cpp_string *>_re2.addressofs(self.re_pattern.pattern())
 *         print cpp_to_pystring(s[0]) + "\n"
 *         sys.stdout.flush()             # <<<<<<<<<<<<<<
 * 
 *     def finditer(self, object string, int pos=0, int endpos=-1):
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__sys); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__stdout); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__flush); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("re2.Pattern._print_pattern");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":483
 *         sys.stdout.flush()
 * 
 *     def finditer(self, object string, int pos=0, int endpos=-1):             # <<<<<<<<<<<<<<
 *         """
 *         Return all non-overlapping matches of pattern in string as a list
 */

static PyObject *__pyx_pf_3re2_7Pattern_3finditer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_7Pattern_3finditer[] = "\n        Return all non-overlapping matches of pattern in string as a list\n        of match objects.\n        ";
static PyObject *__pyx_pf_3re2_7Pattern_3finditer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_string = 0;
  int __pyx_v_pos;
  int __pyx_v_endpos;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannyDeclarations
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__string,&__pyx_n_s__pos,&__pyx_n_s__endpos,0};
  __Pyx_RefNannySetupContext("finditer");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__string);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pos);
        if (value) { values[1] = value; kw_args--; }
      }
      case  2:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__endpos);
        if (value) { values[2] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "finditer") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_string = values[0];
    if (values[1]) {
      __pyx_v_pos = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_pos == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_pos = ((int)0);
    }
    if (values[2]) {
      __pyx_v_endpos = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_endpos == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_endpos = ((int)-1);
    }
  } else {
    __pyx_v_pos = ((int)0);
    __pyx_v_endpos = ((int)-1);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: __pyx_v_endpos = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_endpos == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  2: __pyx_v_pos = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_pos == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  1: __pyx_v_string = PyTuple_GET_ITEM(__pyx_args, 0);
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("finditer", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.Pattern.finditer");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "re2.pyx":488
 *         of match objects.
 *         """
 *         return MatchIterator(self, string, pos, endpos, 0)             # <<<<<<<<<<<<<<
 * 
 *     def findall(self, object string, int pos=0, int endpos=-1):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_pos); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_endpos); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_INCREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  __Pyx_INCREF(__pyx_v_string);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_string);
  __Pyx_GIVEREF(__pyx_v_string);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_3re2_MatchIterator)), ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("re2.Pattern.finditer");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":490
 *         return MatchIterator(self, string, pos, endpos, 0)
 * 
 *     def findall(self, object string, int pos=0, int endpos=-1):             # <<<<<<<<<<<<<<
 *         """
 *         Return all non-overlapping matches of pattern in string as a list
 */

static PyObject *__pyx_pf_3re2_7Pattern_4findall(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_7Pattern_4findall[] = "\n        Return all non-overlapping matches of pattern in string as a list\n        of strings.\n        ";
static PyObject *__pyx_pf_3re2_7Pattern_4findall(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_string = 0;
  int __pyx_v_pos;
  int __pyx_v_endpos;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannyDeclarations
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__string,&__pyx_n_s__pos,&__pyx_n_s__endpos,0};
  __Pyx_RefNannySetupContext("findall");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__string);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pos);
        if (value) { values[1] = value; kw_args--; }
      }
      case  2:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__endpos);
        if (value) { values[2] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "findall") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_string = values[0];
    if (values[1]) {
      __pyx_v_pos = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_pos == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_pos = ((int)0);
    }
    if (values[2]) {
      __pyx_v_endpos = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_endpos == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_endpos = ((int)-1);
    }
  } else {
    __pyx_v_pos = ((int)0);
    __pyx_v_endpos = ((int)-1);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: __pyx_v_endpos = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_endpos == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  2: __pyx_v_pos = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_pos == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  1: __pyx_v_string = PyTuple_GET_ITEM(__pyx_args, 0);
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("findall", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.Pattern.findall");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "re2.pyx":495
 *         of strings.
 *         """
 *         return list(MatchIterator(self, string, pos, endpos, 1))             # <<<<<<<<<<<<<<
 * 
 *     def split(self, string, int maxsplit=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_pos); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_endpos); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_INCREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  __Pyx_INCREF(__pyx_v_string);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_string);
  __Pyx_GIVEREF(__pyx_v_string);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_3re2_MatchIterator)), ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)(&PyList_Type))), ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("re2.Pattern.findall");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":497
 *         return list(MatchIterator(self, string, pos, endpos, 1))
 * 
 *     def split(self, string, int maxsplit=0):             # <<<<<<<<<<<<<<
 *         """
 *         split(string[, maxsplit = 0]) --> list
 */

static PyObject *__pyx_pf_3re2_7Pattern_5split(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_7Pattern_5split[] = "\n        split(string[, maxsplit = 0]) --> list\n        Split a string by the occurances of the pattern.\n        ";
static PyObject *__pyx_pf_3re2_7Pattern_5split(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_string = 0;
  int __pyx_v_maxsplit;
  Py_ssize_t __pyx_v_size;
  int __pyx_v_num_groups;
  int __pyx_v_result;
  int __pyx_v_pos;
  int __pyx_v_lookahead;
  int __pyx_v_num_split;
  char *__pyx_v_cstring;
  re2::StringPiece *__pyx_v_sp;
  re2::StringPiece *__pyx_v_matches;
  PyObject *__pyx_v_resultlist = 0;
  int __pyx_v_encoded;
  PyObject *__pyx_v_match_start;
  PyObject *__pyx_v_match_end;
  PyObject *__pyx_v_group;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  __Pyx_RefNannyDeclarations
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__string,&__pyx_n_s__maxsplit,0};
  __Pyx_RefNannySetupContext("split");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__string);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__maxsplit);
        if (value) { values[1] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "split") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_string = values[0];
    if (values[1]) {
      __pyx_v_maxsplit = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_maxsplit == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_maxsplit = ((int)0);
    }
  } else {
    __pyx_v_maxsplit = ((int)0);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: __pyx_v_maxsplit = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_maxsplit == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  1: __pyx_v_string = PyTuple_GET_ITEM(__pyx_args, 0);
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("split", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.Pattern.split");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_INCREF(__pyx_v_string);
  __pyx_v_match_start = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_match_end = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_group = Py_None; __Pyx_INCREF(Py_None);

  /* "re2.pyx":503
 *         """
 *         cdef Py_ssize_t size
 *         cdef int num_groups = 1             # <<<<<<<<<<<<<<
 *         cdef int result
 *         cdef int endpos
 */
  __pyx_v_num_groups = 1;

  /* "re2.pyx":506
 *         cdef int result
 *         cdef int endpos
 *         cdef int pos = 0             # <<<<<<<<<<<<<<
 *         cdef int lookahead = 0
 *         cdef int num_split = 0
 */
  __pyx_v_pos = 0;

  /* "re2.pyx":507
 *         cdef int endpos
 *         cdef int pos = 0
 *         cdef int lookahead = 0             # <<<<<<<<<<<<<<
 *         cdef int num_split = 0
 *         cdef char * cstring
 */
  __pyx_v_lookahead = 0;

  /* "re2.pyx":508
 *         cdef int pos = 0
 *         cdef int lookahead = 0
 *         cdef int num_split = 0             # <<<<<<<<<<<<<<
 *         cdef char * cstring
 *         cdef _re2.StringPiece * sp
 */
  __pyx_v_num_split = 0;

  /* "re2.pyx":513
 *         cdef _re2.StringPiece * matches
 *         cdef Match m
 *         cdef list resultlist = []             # <<<<<<<<<<<<<<
 *         cdef int encoded = 0
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_resultlist = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "re2.pyx":514
 *         cdef Match m
 *         cdef list resultlist = []
 *         cdef int encoded = 0             # <<<<<<<<<<<<<<
 * 
 *         if maxsplit < 0:
 */
  __pyx_v_encoded = 0;

  /* "re2.pyx":516
 *         cdef int encoded = 0
 * 
 *         if maxsplit < 0:             # <<<<<<<<<<<<<<
 *             maxsplit = 0
 * 
 */
  __pyx_t_2 = (__pyx_v_maxsplit < 0);
  if (__pyx_t_2) {

    /* "re2.pyx":517
 * 
 *         if maxsplit < 0:
 *             maxsplit = 0             # <<<<<<<<<<<<<<
 * 
 *         string = unicode_to_bytestring(string, &encoded)
 */
    __pyx_v_maxsplit = 0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "re2.pyx":519
 *             maxsplit = 0
 * 
 *         string = unicode_to_bytestring(string, &encoded)             # <<<<<<<<<<<<<<
 *         if pystring_to_bytestring(string, &cstring, &size) == -1:
 *             raise TypeError("expected string or buffer")
 */
  __pyx_t_1 = __pyx_f_3re2_unicode_to_bytestring(__pyx_v_string, (&__pyx_v_encoded)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_v_string);
  __pyx_v_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "re2.pyx":520
 * 
 *         string = unicode_to_bytestring(string, &encoded)
 *         if pystring_to_bytestring(string, &cstring, &size) == -1:             # <<<<<<<<<<<<<<
 *             raise TypeError("expected string or buffer")
 * 
 */
  __pyx_t_2 = (__pyx_f_3re2_pystring_to_bytestring(__pyx_v_string, (&__pyx_v_cstring), (&__pyx_v_size)) == -1);
  if (__pyx_t_2) {

    /* "re2.pyx":521
 *         string = unicode_to_bytestring(string, &encoded)
 *         if pystring_to_bytestring(string, &cstring, &size) == -1:
 *             raise TypeError("expected string or buffer")             # <<<<<<<<<<<<<<
 * 
 *         encoded = <bint>encoded
 */
    __pyx_t_1 = PyObject_Call(__pyx_builtin_TypeError, ((PyObject *)__pyx_k_tuple_20), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "re2.pyx":523
 *             raise TypeError("expected string or buffer")
 * 
 *         encoded = <bint>encoded             # <<<<<<<<<<<<<<
 * 
 *         matches = _re2.new_StringPiece_array(self.ngroups + 1)
 */
  __pyx_v_encoded = ((int)__pyx_v_encoded);

  /* "re2.pyx":525
 *         encoded = <bint>encoded
 * 
 *         matches = _re2.new_StringPiece_array(self.ngroups + 1)             # <<<<<<<<<<<<<<
 *         sp = new _re2.StringPiece(cstring, size)
 * 
 */
  __pyx_v_matches = new_StringPiece_array((((struct __pyx_obj_3re2_Pattern *)__pyx_v_self)->ngroups + 1));

  /* "re2.pyx":526
 * 
 *         matches = _re2.new_StringPiece_array(self.ngroups + 1)
 *         sp = new _re2.StringPiece(cstring, size)             # <<<<<<<<<<<<<<
 * 
 *         while True:
 */
  __pyx_v_sp = new re2::StringPiece(__pyx_v_cstring, __pyx_v_size);

  /* "re2.pyx":528
 *         sp = new _re2.StringPiece(cstring, size)
 * 
 *         while True:             # <<<<<<<<<<<<<<
 *             with nogil:
 *                 result = self.re_pattern.Match(sp[0], <int>(pos + lookahead), <int>size, _re2.UNANCHORED, matches, self.ngroups + 1)
 */
  while (1) {
    if (!1) break;

    /* "re2.pyx":529
 * 
 *         while True:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 result = self.re_pattern.Match(sp[0], <int>(pos + lookahead), <int>size, _re2.UNANCHORED, matches, self.ngroups + 1)
 *             if result == 0:
 */
    {
      #ifdef WITH_THREAD
      PyThreadState *_save = NULL;
      #endif
      Py_UNBLOCK_THREADS
      /*try:*/ {

        /* "re2.pyx":530
 *         while True:
 *             with nogil:
 *                 result = self.re_pattern.Match(sp[0], <int>(pos + lookahead), <int>size, _re2.UNANCHORED, matches, self.ngroups + 1)             # <<<<<<<<<<<<<<
 *             if result == 0:
 *                 break
 */
        __pyx_v_result = ((struct __pyx_obj_3re2_Pattern *)__pyx_v_self)->re_pattern->Match((__pyx_v_sp[0]), (__pyx_v_pos + __pyx_v_lookahead), ((int)__pyx_v_size), RE2::UNANCHORED, __pyx_v_matches, (((struct __pyx_obj_3re2_Pattern *)__pyx_v_self)->ngroups + 1));
      }

      /* "re2.pyx":529
 * 
 *         while True:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 result = self.re_pattern.Match(sp[0], <int>(pos + lookahead), <int>size, _re2.UNANCHORED, matches, self.ngroups + 1)
 *             if result == 0:
 */
      /*finally:*/ {
        Py_BLOCK_THREADS
      }
    }

    /* "re2.pyx":531
 *             with nogil:
 *                 result = self.re_pattern.Match(sp[0], <int>(pos + lookahead), <int>size, _re2.UNANCHORED, matches, self.ngroups + 1)
 *             if result == 0:             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
    __pyx_t_2 = (__pyx_v_result == 0);
    if (__pyx_t_2) {

      /* "re2.pyx":532
 *                 result = self.re_pattern.Match(sp[0], <int>(pos + lookahead), <int>size, _re2.UNANCHORED, matches, self.ngroups + 1)
 *             if result == 0:
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             match_start = matches[0].data() - cstring
 */
      goto __pyx_L9_break;
      goto __pyx_L15;
    }
    __pyx_L15:;

    /* "re2.pyx":534
 *                 break
 * 
 *             match_start = matches[0].data() - cstring             # <<<<<<<<<<<<<<
 *             match_end = match_start + matches[0].length()
 * 
 */
    __pyx_t_1 = PyInt_FromLong(((__pyx_v_matches[0]).data() - __pyx_v_cstring)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_v_match_start);
    __pyx_v_match_start = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "re2.pyx":535
 * 
 *             match_start = matches[0].data() - cstring
 *             match_end = match_start + matches[0].length()             # <<<<<<<<<<<<<<
 * 
 *             # If an empty match, just look ahead until you find something
 */
    __pyx_t_1 = PyInt_FromLong((__pyx_v_matches[0]).length()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 535; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyNumber_Add(__pyx_v_match_start, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 535; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_v_match_end);
    __pyx_v_match_end = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "re2.pyx":538
 * 
 *             # If an empty match, just look ahead until you find something
 *             if match_start == match_end:             # <<<<<<<<<<<<<<
 *                 if pos + lookahead == size:
 *                     break
 */
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_match_start, __pyx_v_match_end, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "re2.pyx":539
 *             # If an empty match, just look ahead until you find something
 *             if match_start == match_end:
 *                 if pos + lookahead == size:             # <<<<<<<<<<<<<<
 *                     break
 *                 lookahead += 1
 */
      __pyx_t_2 = ((__pyx_v_pos + __pyx_v_lookahead) == __pyx_v_size);
      if (__pyx_t_2) {

        /* "re2.pyx":540
 *             if match_start == match_end:
 *                 if pos + lookahead == size:
 *                     break             # <<<<<<<<<<<<<<
 *                 lookahead += 1
 *                 continue
 */
        goto __pyx_L9_break;
        goto __pyx_L17;
      }
      __pyx_L17:;

      /* "re2.pyx":541
 *                 if pos + lookahead == size:
 *                     break
 *                 lookahead += 1             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
      __pyx_v_lookahead = (__pyx_v_lookahead + 1);

      /* "re2.pyx":542
 *                     break
 *                 lookahead += 1
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             if encoded:
 */
      goto __pyx_L8_continue;
      goto __pyx_L16;
    }
    __pyx_L16:;

    /* "re2.pyx":544
 *                 continue
 * 
 *             if encoded:             # <<<<<<<<<<<<<<
 *                 resultlist.append(char_to_utf8(<_re2.const_char_ptr>&sp.data()[pos], match_start - pos))
 *             else:
 */
    if (__pyx_v_encoded) {

      /* "re2.pyx":545
 * 
 *             if encoded:
 *                 resultlist.append(char_to_utf8(<_re2.const_char_ptr>&sp.data()[pos], match_start - pos))             # <<<<<<<<<<<<<<
 *             else:
 *                 resultlist.append(sp.data()[pos:match_start])
 */
      if (unlikely(__pyx_v_resultlist == Py_None)) {
        PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
      }
      __pyx_t_3 = PyInt_FromLong(__pyx_v_pos); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = PyNumber_Subtract(__pyx_v_match_start, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_4 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __pyx_f_3re2_char_to_utf8(((const char*)(&(__pyx_v_sp->data()[__pyx_v_pos]))), __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = PyList_Append(__pyx_v_resultlist, __pyx_t_1); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L18;
    }
    /*else*/ {

      /* "re2.pyx":547
 *                 resultlist.append(char_to_utf8(<_re2.const_char_ptr>&sp.data()[pos], match_start - pos))
 *             else:
 *                 resultlist.append(sp.data()[pos:match_start])             # <<<<<<<<<<<<<<
 *             if self.ngroups > 0:
 *                 for group in range(self.ngroups):
 */
      if (unlikely(__pyx_v_resultlist == Py_None)) {
        PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 547; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
      }
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_match_start); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 547; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_1 = PyBytes_FromStringAndSize(__pyx_v_sp->data() + __pyx_v_pos, __pyx_t_6 - __pyx_v_pos); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 547; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_1));
      __pyx_t_5 = PyList_Append(__pyx_v_resultlist, ((PyObject *)__pyx_t_1)); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 547; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
    }
    __pyx_L18:;

    /* "re2.pyx":548
 *             else:
 *                 resultlist.append(sp.data()[pos:match_start])
 *             if self.ngroups > 0:             # <<<<<<<<<<<<<<
 *                 for group in range(self.ngroups):
 *                     if matches[group + 1].data() == NULL:
 */
    __pyx_t_2 = (((struct __pyx_obj_3re2_Pattern *)__pyx_v_self)->ngroups > 0);
    if (__pyx_t_2) {

      /* "re2.pyx":549
 *                 resultlist.append(sp.data()[pos:match_start])
 *             if self.ngroups > 0:
 *                 for group in range(self.ngroups):             # <<<<<<<<<<<<<<
 *                     if matches[group + 1].data() == NULL:
 *                         resultlist.append(None)
 */
      __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self)->ngroups); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = PyObject_Call(__pyx_builtin_range, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
        __pyx_t_6 = 0; __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3);
      } else {
        __pyx_t_6 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      for (;;) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_3)) break;
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++;
        } else if (likely(PyTuple_CheckExact(__pyx_t_3))) {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++;
        } else {
          __pyx_t_1 = PyIter_Next(__pyx_t_3);
          if (!__pyx_t_1) {
            if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            break;
          }
          __Pyx_GOTREF(__pyx_t_1);
        }
        __Pyx_DECREF(__pyx_v_group);
        __pyx_v_group = __pyx_t_1;
        __pyx_t_1 = 0;

        /* "re2.pyx":550
 *             if self.ngroups > 0:
 *                 for group in range(self.ngroups):
 *                     if matches[group + 1].data() == NULL:             # <<<<<<<<<<<<<<
 *                         resultlist.append(None)
 *                     else:
 */
        __pyx_t_1 = PyNumber_Add(__pyx_v_group, __pyx_int_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 550; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 550; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_2 = ((__pyx_v_matches[__pyx_t_7]).data() == NULL);
        if (__pyx_t_2) {

          /* "re2.pyx":551
 *                 for group in range(self.ngroups):
 *                     if matches[group + 1].data() == NULL:
 *                         resultlist.append(None)             # <<<<<<<<<<<<<<
 *                     else:
 *                         if encoded:
 */
          if (unlikely(__pyx_v_resultlist == Py_None)) {
            PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 551; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
          }
          __pyx_t_1 = Py_None;
          __Pyx_INCREF(__pyx_t_1);
          __pyx_t_5 = PyList_Append(__pyx_v_resultlist, __pyx_t_1); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 551; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          goto __pyx_L22;
        }
        /*else*/ {

          /* "re2.pyx":553
 *                         resultlist.append(None)
 *                     else:
 *                         if encoded:             # <<<<<<<<<<<<<<
 *                             resultlist.append(char_to_utf8(matches[group + 1].data(), matches[group + 1].length()))
 *                         else:
 */
          if (__pyx_v_encoded) {

            /* "re2.pyx":554
 *                     else:
 *                         if encoded:
 *                             resultlist.append(char_to_utf8(matches[group + 1].data(), matches[group + 1].length()))             # <<<<<<<<<<<<<<
 *                         else:
 *                             resultlist.append(matches[group + 1].data()[:matches[group + 1].length()])
 */
            if (unlikely(__pyx_v_resultlist == Py_None)) {
              PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
            }
            __pyx_t_1 = PyNumber_Add(__pyx_v_group, __pyx_int_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = PyNumber_Add(__pyx_v_group, __pyx_int_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = __pyx_f_3re2_char_to_utf8((__pyx_v_matches[__pyx_t_7]).data(), (__pyx_v_matches[__pyx_t_8]).length()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_5 = PyList_Append(__pyx_v_resultlist, __pyx_t_1); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            goto __pyx_L23;
          }
          /*else*/ {

            /* "re2.pyx":556
 *                             resultlist.append(char_to_utf8(matches[group + 1].data(), matches[group + 1].length()))
 *                         else:
 *                             resultlist.append(matches[group + 1].data()[:matches[group + 1].length()])             # <<<<<<<<<<<<<<
 * 
 *             # offset the pos to move to the next point
 */
            if (unlikely(__pyx_v_resultlist == Py_None)) {
              PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 556; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
            }
            __pyx_t_1 = PyNumber_Add(__pyx_v_group, __pyx_int_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 556; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 556; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = PyNumber_Add(__pyx_v_group, __pyx_int_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 556; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 556; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = PyBytes_FromStringAndSize((__pyx_v_matches[__pyx_t_8]).data() + 0, (__pyx_v_matches[__pyx_t_7]).length() - 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 556; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(((PyObject *)__pyx_t_1));
            __pyx_t_5 = PyList_Append(__pyx_v_resultlist, ((PyObject *)__pyx_t_1)); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 556; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
          }
          __pyx_L23:;
        }
        __pyx_L22:;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L19;
    }
    __pyx_L19:;

    /* "re2.pyx":559
 * 
 *             # offset the pos to move to the next point
 *             pos = match_end             # <<<<<<<<<<<<<<
 *             lookahead = 0
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_AsInt(__pyx_v_match_end); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 559; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_pos = __pyx_t_4;

    /* "re2.pyx":560
 *             # offset the pos to move to the next point
 *             pos = match_end
 *             lookahead = 0             # <<<<<<<<<<<<<<
 * 
 *             num_split += 1
 */
    __pyx_v_lookahead = 0;

    /* "re2.pyx":562
 *             lookahead = 0
 * 
 *             num_split += 1             # <<<<<<<<<<<<<<
 *             if maxsplit and num_split >= maxsplit:
 *                 break
 */
    __pyx_v_num_split = (__pyx_v_num_split + 1);

    /* "re2.pyx":563
 * 
 *             num_split += 1
 *             if maxsplit and num_split >= maxsplit:             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
    if (__pyx_v_maxsplit) {
      __pyx_t_2 = (__pyx_v_num_split >= __pyx_v_maxsplit);
      __pyx_t_9 = __pyx_t_2;
    } else {
      __pyx_t_9 = __pyx_v_maxsplit;
    }
    if (__pyx_t_9) {

      /* "re2.pyx":564
 *             num_split += 1
 *             if maxsplit and num_split >= maxsplit:
 *                 break             # <<<<<<<<<<<<<<
 * 
 *         if encoded:
 */
      goto __pyx_L9_break;
      goto __pyx_L24;
    }
    __pyx_L24:;
    __pyx_L8_continue:;
  }
  __pyx_L9_break:;

  /* "re2.pyx":566
 *                 break
 * 
 *         if encoded:             # <<<<<<<<<<<<<<
 *             resultlist.append(char_to_utf8(<_re2.const_char_ptr>&sp.data()[pos], sp.length() - pos))
 *         else:
 */
  if (__pyx_v_encoded) {

    /* "re2.pyx":567
 * 
 *         if encoded:
 *             resultlist.append(char_to_utf8(<_re2.const_char_ptr>&sp.data()[pos], sp.length() - pos))             # <<<<<<<<<<<<<<
 *         else:
 *             resultlist.append(sp.data()[pos:])
 */
    if (unlikely(__pyx_v_resultlist == Py_None)) {
      PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_3 = __pyx_f_3re2_char_to_utf8(((const char*)(&(__pyx_v_sp->data()[__pyx_v_pos]))), (__pyx_v_sp->length() - __pyx_v_pos)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyList_Append(__pyx_v_resultlist, __pyx_t_3); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L25;
  }
  /*else*/ {

    /* "re2.pyx":569
 *             resultlist.append(char_to_utf8(<_re2.const_char_ptr>&sp.data()[pos], sp.length() - pos))
 *         else:
 *             resultlist.append(sp.data()[pos:])             # <<<<<<<<<<<<<<
 *         _re2.delete_StringPiece_array(matches)
 *         del sp
 */
    if (unlikely(__pyx_v_resultlist == Py_None)) {
      PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 569; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_3 = PyBytes_FromString(__pyx_v_sp->data() + __pyx_v_pos); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __pyx_t_5 = PyList_Append(__pyx_v_resultlist, ((PyObject *)__pyx_t_3)); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  }
  __pyx_L25:;

  /* "re2.pyx":570
 *         else:
 *             resultlist.append(sp.data()[pos:])
 *         _re2.delete_StringPiece_array(matches)             # <<<<<<<<<<<<<<
 *         del sp
 *         return resultlist
 */
  delete_StringPiece_array(__pyx_v_matches);

  /* "re2.pyx":571
 *             resultlist.append(sp.data()[pos:])
 *         _re2.delete_StringPiece_array(matches)
 *         del sp             # <<<<<<<<<<<<<<
 *         return resultlist
 * 
 */
  delete __pyx_v_sp;

  /* "re2.pyx":572
 *         _re2.delete_StringPiece_array(matches)
 *         del sp
 *         return resultlist             # <<<<<<<<<<<<<<
 * 
 *     def sub(self, repl, string, int count=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_resultlist));
  __pyx_r = ((PyObject *)__pyx_v_resultlist);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("re2.Pattern.split");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_resultlist);
  __Pyx_DECREF(__pyx_v_match_start);
  __Pyx_DECREF(__pyx_v_match_end);
  __Pyx_DECREF(__pyx_v_group);
  __Pyx_DECREF(__pyx_v_string);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":574
 *         return resultlist
 * 
 *     def sub(self, repl, string, int count=0):             # <<<<<<<<<<<<<<
 *         """
 *         sub(repl, string[, count = 0]) --> newstring
 */

static PyObject *__pyx_pf_3re2_7Pattern_6sub(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_7Pattern_6sub[] = "\n        sub(repl, string[, count = 0]) --> newstring\n        Return the string obtained by replacing the leftmost non-overlapping\n        occurrences of pattern in string by the replacement repl.\n        ";
static PyObject *__pyx_pf_3re2_7Pattern_6sub(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_repl = 0;
  PyObject *__pyx_v_string = 0;
  int __pyx_v_count;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannyDeclarations
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__repl,&__pyx_n_s__string,&__pyx_n_s__count,0};
  __Pyx_RefNannySetupContext("sub");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__repl);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__string);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("sub", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 574; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__count);
        if (value) { values[2] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "sub") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 574; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_repl = values[0];
    __pyx_v_string = values[1];
    if (values[2]) {
      __pyx_v_count = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_count == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 574; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_count = ((int)0);
    }
  } else {
    __pyx_v_count = ((int)0);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3:
      __pyx_v_count = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_count == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 574; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  2:
      __pyx_v_string = PyTuple_GET_ITEM(__pyx_args, 1);
      __pyx_v_repl = PyTuple_GET_ITEM(__pyx_args, 0);
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sub", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 574; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.Pattern.sub");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "re2.pyx":580
 *         occurrences of pattern in string by the replacement repl.
 *         """
 *         return self.subn(repl, string, count)[0]             # <<<<<<<<<<<<<<
 * 
 *     def subn(self, repl, string, int count=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__subn); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 580; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_count); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 580; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 580; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_INCREF(__pyx_v_repl);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_repl);
  __Pyx_GIVEREF(__pyx_v_repl);
  __Pyx_INCREF(__pyx_v_string);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_string);
  __Pyx_GIVEREF(__pyx_v_string);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 580; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 580; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("re2.Pattern.sub");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":582
 *         return self.subn(repl, string, count)[0]
 * 
 *     def subn(self, repl, string, int count=0):             # <<<<<<<<<<<<<<
 *         """
 *         subn(repl, string[, count = 0]) --> (newstring, number of subs)
 */

static PyObject *__pyx_pf_3re2_7Pattern_7subn(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_7Pattern_7subn[] = "\n        subn(repl, string[, count = 0]) --> (newstring, number of subs)\n        Return the tuple (new_string, number_of_subs_made) found by replacing\n        the leftmost non-overlapping occurrences of pattern with the\n        replacement repl.\n        ";
static PyObject *__pyx_pf_3re2_7Pattern_7subn(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_repl = 0;
  PyObject *__pyx_v_string = 0;
  int __pyx_v_count;
  Py_ssize_t __pyx_v_size;
  char *__pyx_v_cstring;
  std::string *__pyx_v_fixed_repl;
  re2::StringPiece *__pyx_v_sp;
  std::string *__pyx_v_input_str;
  PyObject *__pyx_v_total_replacements = 0;
  int __pyx_v_string_encoded;
  int __pyx_v_repl_encoded;
  int __pyx_v_encoded;
  const char* __pyx_v_s;
  const char* __pyx_v_end;
  int __pyx_v_c;
  PyObject *__pyx_v_result;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  char *__pyx_t_8;
  __Pyx_RefNannyDeclarations
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__repl,&__pyx_n_s__string,&__pyx_n_s__count,0};
  __Pyx_RefNannySetupContext("subn");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__repl);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__string);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("subn", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 582; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__count);
        if (value) { values[2] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "subn") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 582; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_repl = values[0];
    __pyx_v_string = values[1];
    if (values[2]) {
      __pyx_v_count = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_count == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 582; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_count = ((int)0);
    }
  } else {
    __pyx_v_count = ((int)0);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3:
      __pyx_v_count = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_count == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 582; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  2:
      __pyx_v_string = PyTuple_GET_ITEM(__pyx_args, 1);
      __pyx_v_repl = PyTuple_GET_ITEM(__pyx_args, 0);
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("subn", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 582; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.Pattern.subn");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_INCREF(__pyx_v_repl);
  __Pyx_INCREF(__pyx_v_string);
  __pyx_v_result = Py_None; __Pyx_INCREF(Py_None);

  /* "re2.pyx":594
 *         cdef _re2.StringPiece * sp
 *         cdef _re2.cpp_string * input_str
 *         cdef total_replacements = 0             # <<<<<<<<<<<<<<
 *         cdef int string_encoded = 0
 *         cdef int repl_encoded = 0
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_total_replacements = __pyx_int_0;

  /* "re2.pyx":595
 *         cdef _re2.cpp_string * input_str
 *         cdef total_replacements = 0
 *         cdef int string_encoded = 0             # <<<<<<<<<<<<<<
 *         cdef int repl_encoded = 0
 *         cdef int encoded = 0
 */
  __pyx_v_string_encoded = 0;

  /* "re2.pyx":596
 *         cdef total_replacements = 0
 *         cdef int string_encoded = 0
 *         cdef int repl_encoded = 0             # <<<<<<<<<<<<<<
 *         cdef int encoded = 0
 * 
 */
  __pyx_v_repl_encoded = 0;

  /* "re2.pyx":597
 *         cdef int string_encoded = 0
 *         cdef int repl_encoded = 0
 *         cdef int encoded = 0             # <<<<<<<<<<<<<<
 * 
 *         if callable(repl):
 */
  __pyx_v_encoded = 0;

  /* "re2.pyx":599
 *         cdef int encoded = 0
 * 
 *         if callable(repl):             # <<<<<<<<<<<<<<
 *             # This is a callback, so let's use the custom function
 *             return self._subn_callback(repl, string, count)
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_repl);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_repl);
  __Pyx_GIVEREF(__pyx_v_repl);
  __pyx_t_2 = PyObject_Call(__pyx_builtin_callable, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "re2.pyx":601
 *         if callable(repl):
 *             # This is a callback, so let's use the custom function
 *             return self._subn_callback(repl, string, count)             # <<<<<<<<<<<<<<
 * 
 *         string = unicode_to_bytestring(string, &string_encoded)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___subn_callback); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyInt_FromLong(__pyx_v_count); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    __Pyx_INCREF(__pyx_v_repl);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_repl);
    __Pyx_GIVEREF(__pyx_v_repl);
    __Pyx_INCREF(__pyx_v_string);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_string);
    __Pyx_GIVEREF(__pyx_v_string);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "re2.pyx":603
 *             return self._subn_callback(repl, string, count)
 * 
 *         string = unicode_to_bytestring(string, &string_encoded)             # <<<<<<<<<<<<<<
 *         repl = unicode_to_bytestring(repl, &repl_encoded)
 *         if pystring_to_bytestring(repl, &cstring, &size) == -1:
 */
  __pyx_t_1 = __pyx_f_3re2_unicode_to_bytestring(__pyx_v_string, (&__pyx_v_string_encoded)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 603; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_v_string);
  __pyx_v_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "re2.pyx":604
 * 
 *         string = unicode_to_bytestring(string, &string_encoded)
 *         repl = unicode_to_bytestring(repl, &repl_encoded)             # <<<<<<<<<<<<<<
 *         if pystring_to_bytestring(repl, &cstring, &size) == -1:
 *             raise TypeError("expected string or buffer")
 */
  __pyx_t_1 = __pyx_f_3re2_unicode_to_bytestring(__pyx_v_repl, (&__pyx_v_repl_encoded)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 604; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_v_repl);
  __pyx_v_repl = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "re2.pyx":605
 *         string = unicode_to_bytestring(string, &string_encoded)
 *         repl = unicode_to_bytestring(repl, &repl_encoded)
 *         if pystring_to_bytestring(repl, &cstring, &size) == -1:             # <<<<<<<<<<<<<<
 *             raise TypeError("expected string or buffer")
 * 
 */
  __pyx_t_3 = (__pyx_f_3re2_pystring_to_bytestring(__pyx_v_repl, (&__pyx_v_cstring), (&__pyx_v_size)) == -1);
  if (__pyx_t_3) {

    /* "re2.pyx":606
 *         repl = unicode_to_bytestring(repl, &repl_encoded)
 *         if pystring_to_bytestring(repl, &cstring, &size) == -1:
 *             raise TypeError("expected string or buffer")             # <<<<<<<<<<<<<<
 * 
 *         fixed_repl = NULL
 */
    __pyx_t_1 = PyObject_Call(__pyx_builtin_TypeError, ((PyObject *)__pyx_k_tuple_21), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 606; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 606; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "re2.pyx":608
 *             raise TypeError("expected string or buffer")
 * 
 *         fixed_repl = NULL             # <<<<<<<<<<<<<<
 *         cdef _re2.const_char_ptr s = cstring
 *         cdef _re2.const_char_ptr end = s + size
 */
  __pyx_v_fixed_repl = NULL;

  /* "re2.pyx":609
 * 
 *         fixed_repl = NULL
 *         cdef _re2.const_char_ptr s = cstring             # <<<<<<<<<<<<<<
 *         cdef _re2.const_char_ptr end = s + size
 *         cdef int c = 0
 */
  __pyx_v_s = __pyx_v_cstring;

  /* "re2.pyx":610
 *         fixed_repl = NULL
 *         cdef _re2.const_char_ptr s = cstring
 *         cdef _re2.const_char_ptr end = s + size             # <<<<<<<<<<<<<<
 *         cdef int c = 0
 *         while s < end:
 */
  __pyx_v_end = (__pyx_v_s + __pyx_v_size);

  /* "re2.pyx":611
 *         cdef _re2.const_char_ptr s = cstring
 *         cdef _re2.const_char_ptr end = s + size
 *         cdef int c = 0             # <<<<<<<<<<<<<<
 *         while s < end:
 *             c = s[0]
 */
  __pyx_v_c = 0;

  /* "re2.pyx":612
 *         cdef _re2.const_char_ptr end = s + size
 *         cdef int c = 0
 *         while s < end:             # <<<<<<<<<<<<<<
 *             c = s[0]
 *             if (c == '\\'):
 */
  while (1) {
    __pyx_t_3 = (__pyx_v_s < __pyx_v_end);
    if (!__pyx_t_3) break;

    /* "re2.pyx":613
 *         cdef int c = 0
 *         while s < end:
 *             c = s[0]             # <<<<<<<<<<<<<<
 *             if (c == '\\'):
 *                 s += 1
 */
    __pyx_v_c = (__pyx_v_s[0]);

    /* "re2.pyx":614
 *         while s < end:
 *             c = s[0]
 *             if (c == '\\'):             # <<<<<<<<<<<<<<
 *                 s += 1
 *                 if s == end:
 */
    __pyx_t_3 = (__pyx_v_c == '\\');
    if (__pyx_t_3) {

      /* "re2.pyx":615
 *             c = s[0]
 *             if (c == '\\'):
 *                 s += 1             # <<<<<<<<<<<<<<
 *                 if s == end:
 *                     raise RegexError("Invalid rewrite pattern")
 */
      __pyx_v_s = (__pyx_v_s + 1);

      /* "re2.pyx":616
 *             if (c == '\\'):
 *                 s += 1
 *                 if s == end:             # <<<<<<<<<<<<<<
 *                     raise RegexError("Invalid rewrite pattern")
 *                 c = s[0]
 */
      __pyx_t_3 = (__pyx_v_s == __pyx_v_end);
      if (__pyx_t_3) {

        /* "re2.pyx":617
 *                 s += 1
 *                 if s == end:
 *                     raise RegexError("Invalid rewrite pattern")             # <<<<<<<<<<<<<<
 *                 c = s[0]
 *                 if c == '\\' or (c >= '0' and c <= '9'):
 */
        __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__RegexError); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_23), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_Raise(__pyx_t_4, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        goto __pyx_L11;
      }
      __pyx_L11:;

      /* "re2.pyx":618
 *                 if s == end:
 *                     raise RegexError("Invalid rewrite pattern")
 *                 c = s[0]             # <<<<<<<<<<<<<<
 *                 if c == '\\' or (c >= '0' and c <= '9'):
 *                     if fixed_repl != NULL:
 */
      __pyx_v_c = (__pyx_v_s[0]);

      /* "re2.pyx":619
 *                     raise RegexError("Invalid rewrite pattern")
 *                 c = s[0]
 *                 if c == '\\' or (c >= '0' and c <= '9'):             # <<<<<<<<<<<<<<
 *                     if fixed_repl != NULL:
 *                         fixed_repl.push_back('\\')
 */
      __pyx_t_3 = (__pyx_v_c == '\\');
      if (!__pyx_t_3) {
        __pyx_t_5 = (__pyx_v_c >= '0');
        if (__pyx_t_5) {
          __pyx_t_6 = (__pyx_v_c <= '9');
          __pyx_t_7 = __pyx_t_6;
        } else {
          __pyx_t_7 = __pyx_t_5;
        }
        __pyx_t_5 = __pyx_t_7;
      } else {
        __pyx_t_5 = __pyx_t_3;
      }
      if (__pyx_t_5) {

        /* "re2.pyx":620
 *                 c = s[0]
 *                 if c == '\\' or (c >= '0' and c <= '9'):
 *                     if fixed_repl != NULL:             # <<<<<<<<<<<<<<
 *                         fixed_repl.push_back('\\')
 *                         fixed_repl.push_back(c)
 */
        __pyx_t_5 = (__pyx_v_fixed_repl != NULL);
        if (__pyx_t_5) {

          /* "re2.pyx":621
 *                 if c == '\\' or (c >= '0' and c <= '9'):
 *                     if fixed_repl != NULL:
 *                         fixed_repl.push_back('\\')             # <<<<<<<<<<<<<<
 *                         fixed_repl.push_back(c)
 *                 else:
 */
          __pyx_v_fixed_repl->push_back('\\');

          /* "re2.pyx":622
 *                     if fixed_repl != NULL:
 *                         fixed_repl.push_back('\\')
 *                         fixed_repl.push_back(c)             # <<<<<<<<<<<<<<
 *                 else:
 *                     if fixed_repl == NULL:
 */
          __pyx_v_fixed_repl->push_back(__pyx_v_c);
          goto __pyx_L13;
        }
        __pyx_L13:;
        goto __pyx_L12;
      }
      /*else*/ {

        /* "re2.pyx":624
 *                         fixed_repl.push_back(c)
 *                 else:
 *                     if fixed_repl == NULL:             # <<<<<<<<<<<<<<
 *                         fixed_repl = new _re2.cpp_string(cstring, s - cstring - 1)
 *                     if c == 'n':
 */
        __pyx_t_5 = (__pyx_v_fixed_repl == NULL);
        if (__pyx_t_5) {

          /* "re2.pyx":625
 *                 else:
 *                     if fixed_repl == NULL:
 *                         fixed_repl = new _re2.cpp_string(cstring, s - cstring - 1)             # <<<<<<<<<<<<<<
 *                     if c == 'n':
 *                         fixed_repl.push_back('\n')
 */
          __pyx_v_fixed_repl = new std::string(__pyx_v_cstring, ((__pyx_v_s - __pyx_v_cstring) - 1));
          goto __pyx_L14;
        }
        __pyx_L14:;

        /* "re2.pyx":626
 *                     if fixed_repl == NULL:
 *                         fixed_repl = new _re2.cpp_string(cstring, s - cstring - 1)
 *                     if c == 'n':             # <<<<<<<<<<<<<<
 *                         fixed_repl.push_back('\n')
 *                     else:
 */
        __pyx_t_5 = (__pyx_v_c == 'n');
        if (__pyx_t_5) {

          /* "re2.pyx":627
 *                         fixed_repl = new _re2.cpp_string(cstring, s - cstring - 1)
 *                     if c == 'n':
 *                         fixed_repl.push_back('\n')             # <<<<<<<<<<<<<<
 *                     else:
 *                         fixed_repl.push_back('\\')
 */
          __pyx_v_fixed_repl->push_back('\n');
          goto __pyx_L15;
        }
        /*else*/ {

          /* "re2.pyx":629
 *                         fixed_repl.push_back('\n')
 *                     else:
 *                         fixed_repl.push_back('\\')             # <<<<<<<<<<<<<<
 *                         fixed_repl.push_back('\\')
 *                         fixed_repl.push_back(c)
 */
          __pyx_v_fixed_repl->push_back('\\');

          /* "re2.pyx":630
 *                     else:
 *                         fixed_repl.push_back('\\')
 *                         fixed_repl.push_back('\\')             # <<<<<<<<<<<<<<
 *                         fixed_repl.push_back(c)
 *             else:
 */
          __pyx_v_fixed_repl->push_back('\\');

          /* "re2.pyx":631
 *                         fixed_repl.push_back('\\')
 *                         fixed_repl.push_back('\\')
 *                         fixed_repl.push_back(c)             # <<<<<<<<<<<<<<
 *             else:
 *                 if fixed_repl != NULL:
 */
          __pyx_v_fixed_repl->push_back(__pyx_v_c);
        }
        __pyx_L15:;
      }
      __pyx_L12:;
      goto __pyx_L10;
    }
    /*else*/ {

      /* "re2.pyx":633
 *                         fixed_repl.push_back(c)
 *             else:
 *                 if fixed_repl != NULL:             # <<<<<<<<<<<<<<
 *                     fixed_repl.push_back(c)
 * 
 */
      __pyx_t_5 = (__pyx_v_fixed_repl != NULL);
      if (__pyx_t_5) {

        /* "re2.pyx":634
 *             else:
 *                 if fixed_repl != NULL:
 *                     fixed_repl.push_back(c)             # <<<<<<<<<<<<<<
 * 
 *             s += 1
 */
        __pyx_v_fixed_repl->push_back(__pyx_v_c);
        goto __pyx_L16;
      }
      __pyx_L16:;
    }
    __pyx_L10:;

    /* "re2.pyx":636
 *                     fixed_repl.push_back(c)
 * 
 *             s += 1             # <<<<<<<<<<<<<<
 *         if fixed_repl != NULL:
 *             sp = new _re2.StringPiece(fixed_repl.c_str())
 */
    __pyx_v_s = (__pyx_v_s + 1);
  }

  /* "re2.pyx":637
 * 
 *             s += 1
 *         if fixed_repl != NULL:             # <<<<<<<<<<<<<<
 *             sp = new _re2.StringPiece(fixed_repl.c_str())
 *         else:
 */
  __pyx_t_5 = (__pyx_v_fixed_repl != NULL);
  if (__pyx_t_5) {

    /* "re2.pyx":638
 *             s += 1
 *         if fixed_repl != NULL:
 *             sp = new _re2.StringPiece(fixed_repl.c_str())             # <<<<<<<<<<<<<<
 *         else:
 *             sp = new _re2.StringPiece(cstring, size)
 */
    __pyx_v_sp = new re2::StringPiece(__pyx_v_fixed_repl->c_str());
    goto __pyx_L17;
  }
  /*else*/ {

    /* "re2.pyx":640
 *             sp = new _re2.StringPiece(fixed_repl.c_str())
 *         else:
 *             sp = new _re2.StringPiece(cstring, size)             # <<<<<<<<<<<<<<
 * 
 *         input_str = new _re2.cpp_string(string)
 */
    __pyx_v_sp = new re2::StringPiece(__pyx_v_cstring, __pyx_v_size);
  }
  __pyx_L17:;

  /* "re2.pyx":642
 *             sp = new _re2.StringPiece(cstring, size)
 * 
 *         input_str = new _re2.cpp_string(string)             # <<<<<<<<<<<<<<
 *         if not count:
 *             total_replacements = _re2.pattern_GlobalReplace(input_str,
 */
  __pyx_t_8 = PyBytes_AsString(__pyx_v_string); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_input_str = new std::string(__pyx_t_8);

  /* "re2.pyx":643
 * 
 *         input_str = new _re2.cpp_string(string)
 *         if not count:             # <<<<<<<<<<<<<<
 *             total_replacements = _re2.pattern_GlobalReplace(input_str,
 *                                                             self.re_pattern[0],
 */
  __pyx_t_5 = (!__pyx_v_count);
  if (__pyx_t_5) {

    /* "re2.pyx":646
 *             total_replacements = _re2.pattern_GlobalReplace(input_str,
 *                                                             self.re_pattern[0],
 *                                                             sp[0])             # <<<<<<<<<<<<<<
 *         elif count == 1:
 *             total_replacements = _re2.pattern_Replace(input_str,
 */
    __pyx_t_4 = PyInt_FromLong(pattern_GlobalReplace(__pyx_v_input_str, (((struct __pyx_obj_3re2_Pattern *)__pyx_v_self)->re_pattern[0]), (__pyx_v_sp[0]))); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 644; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_v_total_replacements);
    __pyx_v_total_replacements = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L18;
  }

  /* "re2.pyx":647
 *                                                             self.re_pattern[0],
 *                                                             sp[0])
 *         elif count == 1:             # <<<<<<<<<<<<<<
 *             total_replacements = _re2.pattern_Replace(input_str,
 *                                                       self.re_pattern[0],
 */
  __pyx_t_5 = (__pyx_v_count == 1);
  if (__pyx_t_5) {

    /* "re2.pyx":650
 *             total_replacements = _re2.pattern_Replace(input_str,
 *                                                       self.re_pattern[0],
 *                                                       sp[0])             # <<<<<<<<<<<<<<
 *         else:
 *             del fixed_repl
 */
    __pyx_t_4 = PyInt_FromLong(pattern_Replace(__pyx_v_input_str, (((struct __pyx_obj_3re2_Pattern *)__pyx_v_self)->re_pattern[0]), (__pyx_v_sp[0]))); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 648; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_v_total_replacements);
    __pyx_v_total_replacements = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L18;
  }
  /*else*/ {

    /* "re2.pyx":652
 *                                                       sp[0])
 *         else:
 *             del fixed_repl             # <<<<<<<<<<<<<<
 *             del input_str
 *             del sp
 */
    delete __pyx_v_fixed_repl;

    /* "re2.pyx":653
 *         else:
 *             del fixed_repl
 *             del input_str             # <<<<<<<<<<<<<<
 *             del sp
 *             raise NotImplementedError("So far pyre2 does not support custom replacement counts")
 */
    delete __pyx_v_input_str;

    /* "re2.pyx":654
 *             del fixed_repl
 *             del input_str
 *             del sp             # <<<<<<<<<<<<<<
 *             raise NotImplementedError("So far pyre2 does not support custom replacement counts")
 * 
 */
    delete __pyx_v_sp;

    /* "re2.pyx":655
 *             del input_str
 *             del sp
 *             raise NotImplementedError("So far pyre2 does not support custom replacement counts")             # <<<<<<<<<<<<<<
 * 
 *         if string_encoded or (repl_encoded and total_replacements > 0):
 */
    __pyx_t_4 = PyObject_Call(__pyx_builtin_NotImplementedError, ((PyObject *)__pyx_k_tuple_25), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L18:;

  /* "re2.pyx":657
 *             raise NotImplementedError("So far pyre2 does not support custom replacement counts")
 * 
 *         if string_encoded or (repl_encoded and total_replacements > 0):             # <<<<<<<<<<<<<<
 *             result = cpp_to_utf8(input_str[0])
 *         else:
 */
  if (!__pyx_v_string_encoded) {
    if (__pyx_v_repl_encoded) {
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_total_replacements, __pyx_int_0, Py_GT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_3 = __pyx_t_5;
    } else {
      __pyx_t_3 = __pyx_v_repl_encoded;
    }
    __pyx_t_5 = __pyx_t_3;
  } else {
    __pyx_t_5 = __pyx_v_string_encoded;
  }
  if (__pyx_t_5) {

    /* "re2.pyx":658
 * 
 *         if string_encoded or (repl_encoded and total_replacements > 0):
 *             result = cpp_to_utf8(input_str[0])             # <<<<<<<<<<<<<<
 *         else:
 *             result = cpp_to_pystring(input_str[0])
 */
    __pyx_t_4 = __pyx_f_3re2_cpp_to_utf8((__pyx_v_input_str[0])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 658; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_v_result);
    __pyx_v_result = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L19;
  }
  /*else*/ {

    /* "re2.pyx":660
 *             result = cpp_to_utf8(input_str[0])
 *         else:
 *             result = cpp_to_pystring(input_str[0])             # <<<<<<<<<<<<<<
 *         del fixed_repl
 *         del input_str
 */
    __pyx_t_4 = __pyx_f_3re2_cpp_to_pystring((__pyx_v_input_str[0])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 660; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_v_result);
    __pyx_v_result = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_L19:;

  /* "re2.pyx":661
 *         else:
 *             result = cpp_to_pystring(input_str[0])
 *         del fixed_repl             # <<<<<<<<<<<<<<
 *         del input_str
 *         del sp
 */
  delete __pyx_v_fixed_repl;

  /* "re2.pyx":662
 *             result = cpp_to_pystring(input_str[0])
 *         del fixed_repl
 *         del input_str             # <<<<<<<<<<<<<<
 *         del sp
 *         return (result, total_replacements)
 */
  delete __pyx_v_input_str;

  /* "re2.pyx":663
 *         del fixed_repl
 *         del input_str
 *         del sp             # <<<<<<<<<<<<<<
 *         return (result, total_replacements)
 * 
 */
  delete __pyx_v_sp;

  /* "re2.pyx":664
 *         del input_str
 *         del sp
 *         return (result, total_replacements)             # <<<<<<<<<<<<<<
 * 
 *     def _subn_callback(self, callback, string, int count=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  __Pyx_INCREF(__pyx_v_result);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_result);
  __Pyx_GIVEREF(__pyx_v_result);
  __Pyx_INCREF(__pyx_v_total_replacements);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_total_replacements);
  __Pyx_GIVEREF(__pyx_v_total_replacements);
  __pyx_r = ((PyObject *)__pyx_t_4);
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("re2.Pattern.subn");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_total_replacements);
  __Pyx_DECREF(__pyx_v_result);
  __Pyx_DECREF(__pyx_v_repl);
  __Pyx_DECREF(__pyx_v_string);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":666
 *         return (result, total_replacements)
 * 
 *     def _subn_callback(self, callback, string, int count=0):             # <<<<<<<<<<<<<<
 *         """
 *         This function is probably the hardest to implement correctly.
 */

static PyObject *__pyx_pf_3re2_7Pattern_8_subn_callback(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_7Pattern_8_subn_callback[] = "\n        This function is probably the hardest to implement correctly.\n        This is my first attempt, but if anybody has a better solution, please help out.\n        ";
static PyObject *__pyx_pf_3re2_7Pattern_8_subn_callback(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_callback = 0;
  PyObject *__pyx_v_string = 0;
  int __pyx_v_count;
  Py_ssize_t __pyx_v_size;
  int __pyx_v_result;
  int __pyx_v_endpos;
  int __pyx_v_pos;
  int __pyx_v_encoded;
  int __pyx_v_num_repl;
  char *__pyx_v_cstring;
  re2::StringPiece *__pyx_v_sp;
  struct __pyx_obj_3re2_Match *__pyx_v_m;
  PyObject *__pyx_v_resultlist = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannyDeclarations
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__callback,&__pyx_n_s__string,&__pyx_n_s__count,0};
  __Pyx_RefNannySetupContext("_subn_callback");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__callback);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__string);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("_subn_callback", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__count);
        if (value) { values[2] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "_subn_callback") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_callback = values[0];
    __pyx_v_string = values[1];
    if (values[2]) {
      __pyx_v_count = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_count == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_count = ((int)0);
    }
  } else {
    __pyx_v_count = ((int)0);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3:
      __pyx_v_count = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_count == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  2:
      __pyx_v_string = PyTuple_GET_ITEM(__pyx_args, 1);
      __pyx_v_callback = PyTuple_GET_ITEM(__pyx_args, 0);
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_subn_callback", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.Pattern._subn_callback");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_INCREF(__pyx_v_string);
  __pyx_v_m = ((struct __pyx_obj_3re2_Match *)Py_None); __Pyx_INCREF(Py_None);

  /* "re2.pyx":674
 *         cdef int result
 *         cdef int endpos
 *         cdef int pos = 0             # <<<<<<<<<<<<<<
 *         cdef int encoded = 0
 *         cdef int num_repl = 0
 */
  __pyx_v_pos = 0;

  /* "re2.pyx":675
 *         cdef int endpos
 *         cdef int pos = 0
 *         cdef int encoded = 0             # <<<<<<<<<<<<<<
 *         cdef int num_repl = 0
 *         cdef char * cstring
 */
  __pyx_v_encoded = 0;

  /* "re2.pyx":676
 *         cdef int pos = 0
 *         cdef int encoded = 0
 *         cdef int num_repl = 0             # <<<<<<<<<<<<<<
 *         cdef char * cstring
 *         cdef _re2.StringPiece * sp
 */
  __pyx_v_num_repl = 0;

  /* "re2.pyx":680
 *         cdef _re2.StringPiece * sp
 *         cdef Match m
 *         cdef list resultlist = []             # <<<<<<<<<<<<<<
 * 
 *         if count < 0:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 680; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_resultlist = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "re2.pyx":682
 *         cdef list resultlist = []
 * 
 *         if count < 0:             # <<<<<<<<<<<<<<
 *             count = 0
 * 
 */
  __pyx_t_2 = (__pyx_v_count < 0);
  if (__pyx_t_2) {

    /* "re2.pyx":683
 * 
 *         if count < 0:
 *             count = 0             # <<<<<<<<<<<<<<
 * 
 *         string = unicode_to_bytestring(string, &encoded)
 */
    __pyx_v_count = 0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "re2.pyx":685
 *             count = 0
 * 
 *         string = unicode_to_bytestring(string, &encoded)             # <<<<<<<<<<<<<<
 *         if pystring_to_bytestring(string, &cstring, &size) == -1:
 *             raise TypeError("expected string or buffer")
 */
  __pyx_t_1 = __pyx_f_3re2_unicode_to_bytestring(__pyx_v_string, (&__pyx_v_encoded)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 685; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_v_string);
  __pyx_v_string = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "re2.pyx":686
 * 
 *         string = unicode_to_bytestring(string, &encoded)
 *         if pystring_to_bytestring(string, &cstring, &size) == -1:             # <<<<<<<<<<<<<<
 *             raise TypeError("expected string or buffer")
 *         encoded = <bint>encoded
 */
  __pyx_t_2 = (__pyx_f_3re2_pystring_to_bytestring(__pyx_v_string, (&__pyx_v_cstring), (&__pyx_v_size)) == -1);
  if (__pyx_t_2) {

    /* "re2.pyx":687
 *         string = unicode_to_bytestring(string, &encoded)
 *         if pystring_to_bytestring(string, &cstring, &size) == -1:
 *             raise TypeError("expected string or buffer")             # <<<<<<<<<<<<<<
 *         encoded = <bint>encoded
 * 
 */
    __pyx_t_1 = PyObject_Call(__pyx_builtin_TypeError, ((PyObject *)__pyx_k_tuple_26), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 687; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 687; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "re2.pyx":688
 *         if pystring_to_bytestring(string, &cstring, &size) == -1:
 *             raise TypeError("expected string or buffer")
 *         encoded = <bint>encoded             # <<<<<<<<<<<<<<
 * 
 *         sp = new _re2.StringPiece(cstring, size)
 */
  __pyx_v_encoded = ((int)__pyx_v_encoded);

  /* "re2.pyx":690
 *         encoded = <bint>encoded
 * 
 *         sp = new _re2.StringPiece(cstring, size)             # <<<<<<<<<<<<<<
 * 
 *         try:
 */
  __pyx_v_sp = new re2::StringPiece(__pyx_v_cstring, __pyx_v_size);

  /* "re2.pyx":692
 *         sp = new _re2.StringPiece(cstring, size)
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             while True:
 *                 m = Match(self, self.ngroups + 1)
 */
  /*try:*/ {

    /* "re2.pyx":693
 * 
 *         try:
 *             while True:             # <<<<<<<<<<<<<<
 *                 m = Match(self, self.ngroups + 1)
 *                 with nogil:
 */
    while (1) {
      if (!1) break;

      /* "re2.pyx":694
 *         try:
 *             while True:
 *                 m = Match(self, self.ngroups + 1)             # <<<<<<<<<<<<<<
 *                 with nogil:
 *                     result = self.re_pattern.Match(sp[0], <int>pos, <int>size, _re2.UNANCHORED, m.matches, self.ngroups + 1)
 */
      __pyx_t_1 = PyInt_FromLong((((struct __pyx_obj_3re2_Pattern *)__pyx_v_self)->ngroups + 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 694; __pyx_clineno = __LINE__; goto __pyx_L9;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 694; __pyx_clineno = __LINE__; goto __pyx_L9;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      __Pyx_INCREF(__pyx_v_self);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_self);
      __Pyx_GIVEREF(__pyx_v_self);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_3re2_Match)), ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 694; __pyx_clineno = __LINE__; goto __pyx_L9;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_v_m));
      __pyx_v_m = ((struct __pyx_obj_3re2_Match *)__pyx_t_1);
      __pyx_t_1 = 0;

      /* "re2.pyx":695
 *             while True:
 *                 m = Match(self, self.ngroups + 1)
 *                 with nogil:             # <<<<<<<<<<<<<<
 *                     result = self.re_pattern.Match(sp[0], <int>pos, <int>size, _re2.UNANCHORED, m.matches, self.ngroups + 1)
 *                 if result == 0:
 */
      {
        #ifdef WITH_THREAD
        PyThreadState *_save = NULL;
        #endif
        Py_UNBLOCK_THREADS
        /*try:*/ {

          /* "re2.pyx":696
 *                 m = Match(self, self.ngroups + 1)
 *                 with nogil:
 *                     result = self.re_pattern.Match(sp[0], <int>pos, <int>size, _re2.UNANCHORED, m.matches, self.ngroups + 1)             # <<<<<<<<<<<<<<
 *                 if result == 0:
 *                     break
 */
          __pyx_v_result = ((struct __pyx_obj_3re2_Pattern *)__pyx_v_self)->re_pattern->Match((__pyx_v_sp[0]), __pyx_v_pos, ((int)__pyx_v_size), RE2::UNANCHORED, __pyx_v_m->matches, (((struct __pyx_obj_3re2_Pattern *)__pyx_v_self)->ngroups + 1));
        }

        /* "re2.pyx":695
 *             while True:
 *                 m = Match(self, self.ngroups + 1)
 *                 with nogil:             # <<<<<<<<<<<<<<
 *                     result = self.re_pattern.Match(sp[0], <int>pos, <int>size, _re2.UNANCHORED, m.matches, self.ngroups + 1)
 *                 if result == 0:
 */
        /*finally:*/ {
          Py_BLOCK_THREADS
        }
      }

      /* "re2.pyx":697
 *                 with nogil:
 *                     result = self.re_pattern.Match(sp[0], <int>pos, <int>size, _re2.UNANCHORED, m.matches, self.ngroups + 1)
 *                 if result == 0:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
      __pyx_t_2 = (__pyx_v_result == 0);
      if (__pyx_t_2) {

        /* "re2.pyx":698
 *                     result = self.re_pattern.Match(sp[0], <int>pos, <int>size, _re2.UNANCHORED, m.matches, self.ngroups + 1)
 *                 if result == 0:
 *                     break             # <<<<<<<<<<<<<<
 * 
 *                 endpos = m.matches[0].data() - cstring
 */
        goto __pyx_L12_break;
        goto __pyx_L18;
      }
      __pyx_L18:;

      /* "re2.pyx":700
 *                     break
 * 
 *                 endpos = m.matches[0].data() - cstring             # <<<<<<<<<<<<<<
 *                 if encoded:
 *                     resultlist.append(char_to_utf8(&sp.data()[pos], endpos - pos))
 */
      __pyx_v_endpos = ((__pyx_v_m->matches[0]).data() - __pyx_v_cstring);

      /* "re2.pyx":701
 * 
 *                 endpos = m.matches[0].data() - cstring
 *                 if encoded:             # <<<<<<<<<<<<<<
 *                     resultlist.append(char_to_utf8(&sp.data()[pos], endpos - pos))
 *                 else:
 */
      if (__pyx_v_encoded) {

        /* "re2.pyx":702
 *                 endpos = m.matches[0].data() - cstring
 *                 if encoded:
 *                     resultlist.append(char_to_utf8(&sp.data()[pos], endpos - pos))             # <<<<<<<<<<<<<<
 *                 else:
 *                     resultlist.append(sp.data()[pos:endpos])
 */
        if (unlikely(__pyx_v_resultlist == Py_None)) {
          PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L9;} 
        }
        __pyx_t_1 = __pyx_f_3re2_char_to_utf8((&(__pyx_v_sp->data()[__pyx_v_pos])), (__pyx_v_endpos - __pyx_v_pos)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L9;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_4 = PyList_Append(__pyx_v_resultlist, __pyx_t_1); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L9;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L19;
      }
      /*else*/ {

        /* "re2.pyx":704
 *                     resultlist.append(char_to_utf8(&sp.data()[pos], endpos - pos))
 *                 else:
 *                     resultlist.append(sp.data()[pos:endpos])             # <<<<<<<<<<<<<<
 *                 pos = endpos + m.matches[0].length()
 * 
 */
        if (unlikely(__pyx_v_resultlist == Py_None)) {
          PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 704; __pyx_clineno = __LINE__; goto __pyx_L9;} 
        }
        __pyx_t_1 = PyBytes_FromStringAndSize(__pyx_v_sp->data() + __pyx_v_pos, __pyx_v_endpos - __pyx_v_pos); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 704; __pyx_clineno = __LINE__; goto __pyx_L9;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_1));
        __pyx_t_4 = PyList_Append(__pyx_v_resultlist, ((PyObject *)__pyx_t_1)); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 704; __pyx_clineno = __LINE__; goto __pyx_L9;}
        __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
      }
      __pyx_L19:;

      /* "re2.pyx":705
 *                 else:
 *                     resultlist.append(sp.data()[pos:endpos])
 *                 pos = endpos + m.matches[0].length()             # <<<<<<<<<<<<<<
 * 
 *                 m.encoded = encoded
 */
      __pyx_v_pos = (__pyx_v_endpos + (__pyx_v_m->matches[0]).length());

      /* "re2.pyx":707
 *                 pos = endpos + m.matches[0].length()
 * 
 *                 m.encoded = encoded             # <<<<<<<<<<<<<<
 *                 m.named_groups = _re2.addressof(self.re_pattern.NamedCapturingGroups())
 *                 m.nmatches = self.ngroups + 1
 */
      __pyx_v_m->encoded = __pyx_v_encoded;

      /* "re2.pyx":708
 * 
 *                 m.encoded = encoded
 *                 m.named_groups = _re2.addressof(self.re_pattern.NamedCapturingGroups())             # <<<<<<<<<<<<<<
 *                 m.nmatches = self.ngroups + 1
 *                 m.match_string = string
 */
      __pyx_v_m->named_groups = addressof(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self)->re_pattern->NamedCapturingGroups());

      /* "re2.pyx":709
 *                 m.encoded = encoded
 *                 m.named_groups = _re2.addressof(self.re_pattern.NamedCapturingGroups())
 *                 m.nmatches = self.ngroups + 1             # <<<<<<<<<<<<<<
 *                 m.match_string = string
 *                 resultlist.append(callback(m) or '')
 */
      __pyx_v_m->nmatches = (((struct __pyx_obj_3re2_Pattern *)__pyx_v_self)->ngroups + 1);

      /* "re2.pyx":710
 *                 m.named_groups = _re2.addressof(self.re_pattern.NamedCapturingGroups())
 *                 m.nmatches = self.ngroups + 1
 *                 m.match_string = string             # <<<<<<<<<<<<<<
 *                 resultlist.append(callback(m) or '')
 * 
 */
      __Pyx_INCREF(__pyx_v_string);
      __Pyx_GIVEREF(__pyx_v_string);
      __Pyx_GOTREF(__pyx_v_m->match_string);
      __Pyx_DECREF(__pyx_v_m->match_string);
      __pyx_v_m->match_string = __pyx_v_string;

      /* "re2.pyx":711
 *                 m.nmatches = self.ngroups + 1
 *                 m.match_string = string
 *                 resultlist.append(callback(m) or '')             # <<<<<<<<<<<<<<
 * 
 *                 num_repl += 1
 */
      if (unlikely(__pyx_v_resultlist == Py_None)) {
        PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 711; __pyx_clineno = __LINE__; goto __pyx_L9;} 
      }
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 711; __pyx_clineno = __LINE__; goto __pyx_L9;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_1));
      __Pyx_INCREF(((PyObject *)__pyx_v_m));
      PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_m));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_m));
      __pyx_t_3 = PyObject_Call(__pyx_v_callback, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 711; __pyx_clineno = __LINE__; goto __pyx_L9;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 711; __pyx_clineno = __LINE__; goto __pyx_L9;}
      if (!__pyx_t_2) {
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_INCREF(((PyObject *)__pyx_kp_s_13));
        __pyx_t_1 = __pyx_kp_s_13;
      } else {
        __pyx_t_1 = __pyx_t_3;
        __pyx_t_3 = 0;
      }
      __pyx_t_4 = PyList_Append(__pyx_v_resultlist, __pyx_t_1); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 711; __pyx_clineno = __LINE__; goto __pyx_L9;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "re2.pyx":713
 *                 resultlist.append(callback(m) or '')
 * 
 *                 num_repl += 1             # <<<<<<<<<<<<<<
 *                 if count and num_repl >= count:
 *                     break
 */
      __pyx_v_num_repl = (__pyx_v_num_repl + 1);

      /* "re2.pyx":714
 * 
 *                 num_repl += 1
 *                 if count and num_repl >= count:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
      if (__pyx_v_count) {
        __pyx_t_2 = (__pyx_v_num_repl >= __pyx_v_count);
        __pyx_t_5 = __pyx_t_2;
      } else {
        __pyx_t_5 = __pyx_v_count;
      }
      if (__pyx_t_5) {

        /* "re2.pyx":715
 *                 num_repl += 1
 *                 if count and num_repl >= count:
 *                     break             # <<<<<<<<<<<<<<
 * 
 *             if encoded:
 */
        goto __pyx_L12_break;
        goto __pyx_L20;
      }
      __pyx_L20:;
    }
    __pyx_L12_break:;

    /* "re2.pyx":717
 *                     break
 * 
 *             if encoded:             # <<<<<<<<<<<<<<
 *                 resultlist.append(char_to_utf8(&sp.data()[pos], sp.length() - pos))
 *                 return (u''.join(resultlist), num_repl)
 */
    if (__pyx_v_encoded) {

      /* "re2.pyx":718
 * 
 *             if encoded:
 *                 resultlist.append(char_to_utf8(&sp.data()[pos], sp.length() - pos))             # <<<<<<<<<<<<<<
 *                 return (u''.join(resultlist), num_repl)
 *             else:
 */
      if (unlikely(__pyx_v_resultlist == Py_None)) {
        PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 718; __pyx_clineno = __LINE__; goto __pyx_L9;} 
      }
      __pyx_t_1 = __pyx_f_3re2_char_to_utf8((&(__pyx_v_sp->data()[__pyx_v_pos])), (__pyx_v_sp->length() - __pyx_v_pos)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 718; __pyx_clineno = __LINE__; goto __pyx_L9;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = PyList_Append(__pyx_v_resultlist, __pyx_t_1); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 718; __pyx_clineno = __LINE__; goto __pyx_L9;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "re2.pyx":719
 *             if encoded:
 *                 resultlist.append(char_to_utf8(&sp.data()[pos], sp.length() - pos))
 *                 return (u''.join(resultlist), num_repl)             # <<<<<<<<<<<<<<
 *             else:
 *                 resultlist.append(sp.data()[pos:])
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = ((PyObject *)PyUnicode_Join(__pyx_kp_u_13, ((PyObject *)__pyx_v_resultlist))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 719; __pyx_clineno = __LINE__; goto __pyx_L9;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyInt_FromLong(__pyx_v_num_repl); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 719; __pyx_clineno = __LINE__; goto __pyx_L9;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 719; __pyx_clineno = __LINE__; goto __pyx_L9;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_6));
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_1 = 0;
      __pyx_t_3 = 0;
      __pyx_r = ((PyObject *)__pyx_t_6);
      __pyx_t_6 = 0;
      goto __pyx_L8;
      goto __pyx_L21;
    }
    /*else*/ {

      /* "re2.pyx":721
 *                 return (u''.join(resultlist), num_repl)
 *             else:
 *                 resultlist.append(sp.data()[pos:])             # <<<<<<<<<<<<<<
 *                 return (''.join(resultlist), num_repl)
 *         finally:
 */
      if (unlikely(__pyx_v_resultlist == Py_None)) {
        PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L9;} 
      }
      __pyx_t_6 = PyBytes_FromString(__pyx_v_sp->data() + __pyx_v_pos); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L9;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_6));
      __pyx_t_4 = PyList_Append(__pyx_v_resultlist, ((PyObject *)__pyx_t_6)); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L9;}
      __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;

      /* "re2.pyx":722
 *             else:
 *                 resultlist.append(sp.data()[pos:])
 *                 return (''.join(resultlist), num_repl)             # <<<<<<<<<<<<<<
 *         finally:
 *             del sp
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_6 = PyObject_GetAttr(((PyObject *)__pyx_kp_s_13), __pyx_n_s__join); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 722; __pyx_clineno = __LINE__; goto __pyx_L9;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 722; __pyx_clineno = __LINE__; goto __pyx_L9;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      __Pyx_INCREF(((PyObject *)__pyx_v_resultlist));
      PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_resultlist));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_resultlist));
      __pyx_t_1 = PyObject_Call(__pyx_t_6, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 722; __pyx_clineno = __LINE__; goto __pyx_L9;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __pyx_t_3 = PyInt_FromLong(__pyx_v_num_repl); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 722; __pyx_clineno = __LINE__; goto __pyx_L9;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 722; __pyx_clineno = __LINE__; goto __pyx_L9;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_6));
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_1 = 0;
      __pyx_t_3 = 0;
      __pyx_r = ((PyObject *)__pyx_t_6);
      __pyx_t_6 = 0;
      goto __pyx_L8;
    }
    __pyx_L21:;
  }

  /* "re2.pyx":724
 *                 return (''.join(resultlist), num_repl)
 *         finally:
 *             del sp             # <<<<<<<<<<<<<<
 * 
 * cdef class MatchIterator:
 */
  /*finally:*/ {
    int __pyx_why;
    PyObject *__pyx_exc_type, *__pyx_exc_value, *__pyx_exc_tb;
    int __pyx_exc_lineno;
    __pyx_exc_type = 0; __pyx_exc_value = 0; __pyx_exc_tb = 0; __pyx_exc_lineno = 0;
    __pyx_why = 0; goto __pyx_L10;
    __pyx_L8: __pyx_exc_type = 0; __pyx_exc_value = 0; __pyx_exc_tb = 0; __pyx_exc_lineno = 0;
    __pyx_why = 3; goto __pyx_L10;
    __pyx_L9: {
      __pyx_why = 4;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_ErrFetch(&__pyx_exc_type, &__pyx_exc_value, &__pyx_exc_tb);
      __pyx_exc_lineno = __pyx_lineno;
      goto __pyx_L10;
    }
    __pyx_L10:;
    delete __pyx_v_sp;
    switch (__pyx_why) {
      case 3: goto __pyx_L0;
      case 4: {
        __Pyx_ErrRestore(__pyx_exc_type, __pyx_exc_value, __pyx_exc_tb);
        __pyx_lineno = __pyx_exc_lineno;
        __pyx_exc_type = 0;
        __pyx_exc_value = 0;
        __pyx_exc_tb = 0;
        goto __pyx_L1_error;
      }
    }
  }

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("re2.Pattern._subn_callback");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_m);
  __Pyx_XDECREF(__pyx_v_resultlist);
  __Pyx_DECREF(__pyx_v_string);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":409
 *     cdef bint encoded
 *     cdef int _flags
 *     cdef public object pattern             # <<<<<<<<<<<<<<
 *     cdef object __weakref__
 * 
 */

static PyObject *__pyx_pf_3re2_7Pattern_7pattern___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_3re2_7Pattern_7pattern___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self)->pattern);
  __pyx_r = ((struct __pyx_obj_3re2_Pattern *)__pyx_v_self)->pattern;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3re2_7Pattern_7pattern_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_3re2_7Pattern_7pattern_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__");
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self)->pattern);
  __Pyx_DECREF(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self)->pattern);
  ((struct __pyx_obj_3re2_Pattern *)__pyx_v_self)->pattern = __pyx_v_value;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3re2_7Pattern_7pattern_2__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pf_3re2_7Pattern_7pattern_2__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__");
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self)->pattern);
  __Pyx_DECREF(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self)->pattern);
  ((struct __pyx_obj_3re2_Pattern *)__pyx_v_self)->pattern = Py_None;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":737
 *     cdef bint encoded
 * 
 *     def __init__(self, Pattern pattern,  object string, int pos=0, int endpos=-1, int as_match=0):             # <<<<<<<<<<<<<<
 *         self.pattern = pattern
 *         self.as_match = as_match
 */

static int __pyx_pf_3re2_13MatchIterator___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_3re2_13MatchIterator___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_3re2_Pattern *__pyx_v_pattern = 0;
  PyObject *__pyx_v_string = 0;
  int __pyx_v_pos;
  int __pyx_v_endpos;
  int __pyx_v_as_match;
  int __pyx_r;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannyDeclarations
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__pattern,&__pyx_n_s__string,&__pyx_n_s__pos,&__pyx_n_s__endpos,&__pyx_n_s__as_match,0};
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[5] = {0,0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pattern);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__string);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 737; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pos);
        if (value) { values[2] = value; kw_args--; }
      }
      case  3:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__endpos);
        if (value) { values[3] = value; kw_args--; }
      }
      case  4:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__as_match);
        if (value) { values[4] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 737; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_pattern = ((struct __pyx_obj_3re2_Pattern *)values[0]);
    __pyx_v_string = values[1];
    if (values[2]) {
      __pyx_v_pos = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_pos == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 737; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_pos = ((int)0);
    }
    if (values[3]) {
      __pyx_v_endpos = __Pyx_PyInt_AsInt(values[3]); if (unlikely((__pyx_v_endpos == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 737; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_endpos = ((int)-1);
    }
    if (values[4]) {
      __pyx_v_as_match = __Pyx_PyInt_AsInt(values[4]); if (unlikely((__pyx_v_as_match == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 737; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_as_match = ((int)0);
    }
  } else {
    __pyx_v_pos = ((int)0);
    __pyx_v_endpos = ((int)-1);
    __pyx_v_as_match = ((int)0);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  5:
      __pyx_v_as_match = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 4)); if (unlikely((__pyx_v_as_match == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 737; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  4:
      __pyx_v_endpos = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely((__pyx_v_endpos == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 737; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  3:
      __pyx_v_pos = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_pos == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 737; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  2:
      __pyx_v_string = PyTuple_GET_ITEM(__pyx_args, 1);
      __pyx_v_pattern = ((struct __pyx_obj_3re2_Pattern *)PyTuple_GET_ITEM(__pyx_args, 0));
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 737; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.MatchIterator.__init__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pattern), __pyx_ptype_3re2_Pattern, 1, "pattern", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 737; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "re2.pyx":738
 * 
 *     def __init__(self, Pattern pattern,  object string, int pos=0, int endpos=-1, int as_match=0):
 *         self.pattern = pattern             # <<<<<<<<<<<<<<
 *         self.as_match = as_match
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_pattern));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_pattern));
  __Pyx_GOTREF(((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->pattern);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->pattern));
  ((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->pattern = __pyx_v_pattern;

  /* "re2.pyx":739
 *     def __init__(self, Pattern pattern,  object string, int pos=0, int endpos=-1, int as_match=0):
 *         self.pattern = pattern
 *         self.as_match = as_match             # <<<<<<<<<<<<<<
 * 
 *         self.bytestring = unicode_to_bytestring(string, &self.encoded)
 */
  ((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->as_match = __pyx_v_as_match;

  /* "re2.pyx":741
 *         self.as_match = as_match
 * 
 *         self.bytestring = unicode_to_bytestring(string, &self.encoded)             # <<<<<<<<<<<<<<
 *         if pystring_to_bytestring(self.bytestring, &self.cstring, &self.size) == -1:
 *             raise TypeError("expected string or buffer")
 */
  __pyx_t_1 = __pyx_f_3re2_unicode_to_bytestring(__pyx_v_string, ((int *)(&((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->encoded))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->bytestring);
  __Pyx_DECREF(((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->bytestring);
  ((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->bytestring = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "re2.pyx":742
 * 
 *         self.bytestring = unicode_to_bytestring(string, &self.encoded)
 *         if pystring_to_bytestring(self.bytestring, &self.cstring, &self.size) == -1:             # <<<<<<<<<<<<<<
 *             raise TypeError("expected string or buffer")
 * 
 */
  __pyx_t_1 = ((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->bytestring;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_f_3re2_pystring_to_bytestring(__pyx_t_1, (&((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->cstring), (&((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->size)) == -1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "re2.pyx":743
 *         self.bytestring = unicode_to_bytestring(string, &self.encoded)
 *         if pystring_to_bytestring(self.bytestring, &self.cstring, &self.size) == -1:
 *             raise TypeError("expected string or buffer")             # <<<<<<<<<<<<<<
 * 
 *         if self.encoded:
 */
    __pyx_t_1 = PyObject_Call(__pyx_builtin_TypeError, ((PyObject *)__pyx_k_tuple_27), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "re2.pyx":745
 *             raise TypeError("expected string or buffer")
 * 
 *         if self.encoded:             # <<<<<<<<<<<<<<
 *             self.pos = convert_position(self.cstring, pos)
 *             self.endpos = convert_position(self.cstring, endpos)
 */
  if (((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->encoded) {

    /* "re2.pyx":746
 * 
 *         if self.encoded:
 *             self.pos = convert_position(self.cstring, pos)             # <<<<<<<<<<<<<<
 *             self.endpos = convert_position(self.cstring, endpos)
 *         else:
 */
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__convert_position); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 746; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyBytes_FromString(((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->cstring); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 746; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __pyx_t_4 = PyInt_FromLong(__pyx_v_pos); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 746; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 746; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_t_3));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_3));
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 746; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_t_4); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 746; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    ((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->pos = __pyx_t_6;

    /* "re2.pyx":747
 *         if self.encoded:
 *             self.pos = convert_position(self.cstring, pos)
 *             self.endpos = convert_position(self.cstring, endpos)             # <<<<<<<<<<<<<<
 *         else:
 *             self.pos = pos
 */
    __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__convert_position); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 747; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyBytes_FromString(((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->cstring); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 747; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    __pyx_t_1 = PyInt_FromLong(__pyx_v_endpos); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 747; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 747; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_t_5));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_5));
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 747; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 747; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    ((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->endpos = __pyx_t_6;
    goto __pyx_L7;
  }
  /*else*/ {

    /* "re2.pyx":749
 *             self.endpos = convert_position(self.cstring, endpos)
 *         else:
 *             self.pos = pos             # <<<<<<<<<<<<<<
 *             self.endpos = endpos
 * 
 */
    ((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->pos = __pyx_v_pos;

    /* "re2.pyx":750
 *         else:
 *             self.pos = pos
 *             self.endpos = endpos             # <<<<<<<<<<<<<<
 * 
 *         if self.endpos != -1 and self.endpos < self.size:
 */
    ((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->endpos = __pyx_v_endpos;
  }
  __pyx_L7:;

  /* "re2.pyx":752
 *             self.endpos = endpos
 * 
 *         if self.endpos != -1 and self.endpos < self.size:             # <<<<<<<<<<<<<<
 *             self.size = self.endpos
 * 
 */
  __pyx_t_2 = (((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->endpos != -1);
  if (__pyx_t_2) {
    __pyx_t_7 = (((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->endpos < ((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->size);
    __pyx_t_8 = __pyx_t_7;
  } else {
    __pyx_t_8 = __pyx_t_2;
  }
  if (__pyx_t_8) {

    /* "re2.pyx":753
 * 
 *         if self.endpos != -1 and self.endpos < self.size:
 *             self.size = self.endpos             # <<<<<<<<<<<<<<
 * 
 *         self.sp = new _re2.StringPiece(self.cstring, self.size)
 */
    ((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->size = ((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->endpos;
    goto __pyx_L8;
  }
  __pyx_L8:;

  /* "re2.pyx":755
 *             self.size = self.endpos
 * 
 *         self.sp = new _re2.StringPiece(self.cstring, self.size)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->sp = new re2::StringPiece(((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->cstring, ((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->size);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("re2.MatchIterator.__init__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":758
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.sp
 * 
 */

static void __pyx_pf_3re2_13MatchIterator_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_3re2_13MatchIterator_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "re2.pyx":759
 * 
 *     def __dealloc__(self):
 *         del self.sp             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  delete ((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->sp;

  __Pyx_RefNannyFinishContext();
}

/* "re2.pyx":761
 *         del self.sp
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

static PyObject *__pyx_pf_3re2_13MatchIterator_2__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_3re2_13MatchIterator_2__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__");

  /* "re2.pyx":762
 * 
 *     def __iter__(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __next__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":764
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         cdef Match m
 *         cdef int result
 */

static PyObject *__pyx_pf_3re2_13MatchIterator_3__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_3re2_13MatchIterator_3__next__(PyObject *__pyx_v_self) {
  struct __pyx_obj_3re2_Match *__pyx_v_m;
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__");
  __pyx_v_m = ((struct __pyx_obj_3re2_Match *)Py_None); __Pyx_INCREF(Py_None);

  /* "re2.pyx":768
 *         cdef int result
 * 
 *         if self.pos > self.size:             # <<<<<<<<<<<<<<
 *             raise StopIteration()
 * 
 */
  __pyx_t_1 = (((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->pos > ((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->size);
  if (__pyx_t_1) {

    /* "re2.pyx":769
 * 
 *         if self.pos > self.size:
 *             raise StopIteration()             # <<<<<<<<<<<<<<
 * 
 *         m = Match(self.pattern, self.pattern.ngroups + 1)
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_StopIteration, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "re2.pyx":771
 *             raise StopIteration()
 * 
 *         m = Match(self.pattern, self.pattern.ngroups + 1)             # <<<<<<<<<<<<<<
 *         with nogil:
 *             result = self.pattern.re_pattern.Match(self.sp[0], self.pos, self.size, _re2.UNANCHORED, m.matches, self.pattern.ngroups + 1)
 */
  __pyx_t_2 = PyInt_FromLong((((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->pattern->ngroups + 1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 771; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 771; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_INCREF(((PyObject *)((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->pattern));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->pattern));
  __Pyx_GIVEREF(((PyObject *)((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->pattern));
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_3re2_Match)), ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 771; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_v_m));
  __pyx_v_m = ((struct __pyx_obj_3re2_Match *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "re2.pyx":772
 * 
 *         m = Match(self.pattern, self.pattern.ngroups + 1)
 *         with nogil:             # <<<<<<<<<<<<<<
 *             result = self.pattern.re_pattern.Match(self.sp[0], self.pos, self.size, _re2.UNANCHORED, m.matches, self.pattern.ngroups + 1)
 *         if result == 0:
 */
  {
    #ifdef WITH_THREAD
    PyThreadState *_save = NULL;
    #endif
    Py_UNBLOCK_THREADS
    /*try:*/ {

      /* "re2.pyx":773
 *         m = Match(self.pattern, self.pattern.ngroups + 1)
 *         with nogil:
 *             result = self.pattern.re_pattern.Match(self.sp[0], self.pos, self.size, _re2.UNANCHORED, m.matches, self.pattern.ngroups + 1)             # <<<<<<<<<<<<<<
 *         if result == 0:
 *             raise StopIteration()
 */
      __pyx_v_result = ((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->pattern->re_pattern->Match((((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->sp[0]), ((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->pos, ((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->size, RE2::UNANCHORED, __pyx_v_m->matches, (((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->pattern->ngroups + 1));
    }

    /* "re2.pyx":772
 * 
 *         m = Match(self.pattern, self.pattern.ngroups + 1)
 *         with nogil:             # <<<<<<<<<<<<<<
 *             result = self.pattern.re_pattern.Match(self.sp[0], self.pos, self.size, _re2.UNANCHORED, m.matches, self.pattern.ngroups + 1)
 *         if result == 0:
 */
    /*finally:*/ {
      Py_BLOCK_THREADS
    }
  }

  /* "re2.pyx":774
 *         with nogil:
 *             result = self.pattern.re_pattern.Match(self.sp[0], self.pos, self.size, _re2.UNANCHORED, m.matches, self.pattern.ngroups + 1)
 *         if result == 0:             # <<<<<<<<<<<<<<
 *             raise StopIteration()
 * 
 */
  __pyx_t_1 = (__pyx_v_result == 0);
  if (__pyx_t_1) {

    /* "re2.pyx":775
 *             result = self.pattern.re_pattern.Match(self.sp[0], self.pos, self.size, _re2.UNANCHORED, m.matches, self.pattern.ngroups + 1)
 *         if result == 0:
 *             raise StopIteration()             # <<<<<<<<<<<<<<
 * 
 *         m.encoded = self.encoded
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_StopIteration, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L9;
  }
  __pyx_L9:;

  /* "re2.pyx":777
 *             raise StopIteration()
 * 
 *         m.encoded = self.encoded             # <<<<<<<<<<<<<<
 *         m.named_groups = _re2.addressof(self.pattern.re_pattern.NamedCapturingGroups())
 *         m.nmatches = self.pattern.ngroups + 1
 */
  __pyx_v_m->encoded = ((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->encoded;

  /* "re2.pyx":778
 * 
 *         m.encoded = self.encoded
 *         m.named_groups = _re2.addressof(self.pattern.re_pattern.NamedCapturingGroups())             # <<<<<<<<<<<<<<
 *         m.nmatches = self.pattern.ngroups + 1
 *         m.match_string = self.bytestring
 */
  __pyx_v_m->named_groups = addressof(((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->pattern->re_pattern->NamedCapturingGroups());

  /* "re2.pyx":779
 *         m.encoded = self.encoded
 *         m.named_groups = _re2.addressof(self.pattern.re_pattern.NamedCapturingGroups())
 *         m.nmatches = self.pattern.ngroups + 1             # <<<<<<<<<<<<<<
 *         m.match_string = self.bytestring
 *         m._pos = self.pos
 */
  __pyx_v_m->nmatches = (((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->pattern->ngroups + 1);

  /* "re2.pyx":780
 *         m.named_groups = _re2.addressof(self.pattern.re_pattern.NamedCapturingGroups())
 *         m.nmatches = self.pattern.ngroups + 1
 *         m.match_string = self.bytestring             # <<<<<<<<<<<<<<
 *         m._pos = self.pos
 * 
 */
  __Pyx_INCREF(((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->bytestring);
  __Pyx_GIVEREF(((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->bytestring);
  __Pyx_GOTREF(__pyx_v_m->match_string);
  __Pyx_DECREF(__pyx_v_m->match_string);
  __pyx_v_m->match_string = ((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->bytestring;

  /* "re2.pyx":781
 *         m.nmatches = self.pattern.ngroups + 1
 *         m.match_string = self.bytestring
 *         m._pos = self.pos             # <<<<<<<<<<<<<<
 * 
 *         if self.endpos == -1:
 */
  __pyx_v_m->_pos = ((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->pos;

  /* "re2.pyx":783
 *         m._pos = self.pos
 * 
 *         if self.endpos == -1:             # <<<<<<<<<<<<<<
 *             m._endpos = self.size
 *         else:
 */
  __pyx_t_1 = (((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->endpos == -1);
  if (__pyx_t_1) {

    /* "re2.pyx":784
 * 
 *         if self.endpos == -1:
 *             m._endpos = self.size             # <<<<<<<<<<<<<<
 *         else:
 *             m._endpos = self.endpos
 */
    __pyx_v_m->_endpos = ((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->size;
    goto __pyx_L10;
  }
  /*else*/ {

    /* "re2.pyx":786
 *             m._endpos = self.size
 *         else:
 *             m._endpos = self.endpos             # <<<<<<<<<<<<<<
 * 
 *         # offset the pos to move to the next point
 */
    __pyx_v_m->_endpos = ((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->endpos;
  }
  __pyx_L10:;

  /* "re2.pyx":789
 * 
 *         # offset the pos to move to the next point
 *         if m.matches[0].length() == 0:             # <<<<<<<<<<<<<<
 *             self.pos += 1
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_m->matches[0]).length() == 0);
  if (__pyx_t_1) {

    /* "re2.pyx":790
 *         # offset the pos to move to the next point
 *         if m.matches[0].length() == 0:
 *             self.pos += 1             # <<<<<<<<<<<<<<
 *         else:
 *             self.pos = m.matches[0].data() - self.cstring + m.matches[0].length()
 */
    ((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->pos = (((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->pos + 1);
    goto __pyx_L11;
  }
  /*else*/ {

    /* "re2.pyx":792
 *             self.pos += 1
 *         else:
 *             self.pos = m.matches[0].data() - self.cstring + m.matches[0].length()             # <<<<<<<<<<<<<<
 * 
 *         if self.as_match:
 */
    ((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->pos = (((__pyx_v_m->matches[0]).data() - ((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->cstring) + (__pyx_v_m->matches[0]).length());
  }
  __pyx_L11:;

  /* "re2.pyx":794
 *             self.pos = m.matches[0].data() - self.cstring + m.matches[0].length()
 * 
 *         if self.as_match:             # <<<<<<<<<<<<<<
 *             if self.pattern.ngroups > 1:
 *                 return m.groups("")
 */
  if (((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->as_match) {

    /* "re2.pyx":795
 * 
 *         if self.as_match:
 *             if self.pattern.ngroups > 1:             # <<<<<<<<<<<<<<
 *                 return m.groups("")
 *             else:
 */
    __pyx_t_1 = (((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->pattern->ngroups > 1);
    if (__pyx_t_1) {

      /* "re2.pyx":796
 *         if self.as_match:
 *             if self.pattern.ngroups > 1:
 *                 return m.groups("")             # <<<<<<<<<<<<<<
 *             else:
 *                 return m.group(self.pattern.ngroups)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_v_m), __pyx_n_s__groups); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_k_tuple_28), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;
      goto __pyx_L13;
    }
    /*else*/ {

      /* "re2.pyx":798
 *                 return m.groups("")
 *             else:
 *                 return m.group(self.pattern.ngroups)             # <<<<<<<<<<<<<<
 *         else:
 *             return m
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = PyObject_GetAttr(((PyObject *)__pyx_v_m), __pyx_n_s__group); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_3re2_MatchIterator *)__pyx_v_self)->pattern->ngroups); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;
    }
    __pyx_L13:;
    goto __pyx_L12;
  }
  /*else*/ {

    /* "re2.pyx":800
 *                 return m.group(self.pattern.ngroups)
 *         else:
 *             return m             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_m));
    __pyx_r = ((PyObject *)__pyx_v_m);
    goto __pyx_L0;
  }
  __pyx_L12:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("re2.MatchIterator.__next__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_m);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":808
 * _MAXCACHE = 100
 * 
 * def compile(pattern, int flags=0, int max_mem=8388608):             # <<<<<<<<<<<<<<
 *     cachekey = (type(pattern),) + (pattern, flags)
 *     p = _cache.get(cachekey)
 */

static PyObject *__pyx_pf_3re2_2compile(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3re2_2compile = {__Pyx_NAMESTR("compile"), (PyCFunction)__pyx_pf_3re2_2compile, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pf_3re2_2compile(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pattern = 0;
  int __pyx_v_flags;
  int __pyx_v_max_mem;
  PyObject *__pyx_v_cachekey;
  PyObject *__pyx_v_p;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  __Pyx_RefNannyDeclarations
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__pattern,&__pyx_n_s__flags,&__pyx_n_s__max_mem,0};
  __Pyx_RefNannySetupContext("compile");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pattern);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__flags);
        if (value) { values[1] = value; kw_args--; }
      }
      case  2:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__max_mem);
        if (value) { values[2] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "compile") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 808; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_pattern = values[0];
    if (values[1]) {
      __pyx_v_flags = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 808; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_flags = ((int)0);
    }
    if (values[2]) {
      __pyx_v_max_mem = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_max_mem == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 808; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_max_mem = ((int)8388608);
    }
  } else {
    __pyx_v_flags = ((int)0);
    __pyx_v_max_mem = ((int)8388608);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: __pyx_v_max_mem = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_max_mem == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 808; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  2: __pyx_v_flags = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 808; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  1: __pyx_v_pattern = PyTuple_GET_ITEM(__pyx_args, 0);
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compile", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 808; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.compile");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_cachekey = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_p = Py_None; __Pyx_INCREF(Py_None);

  /* "re2.pyx":809
 * 
 * def compile(pattern, int flags=0, int max_mem=8388608):
 *     cachekey = (type(pattern),) + (pattern, flags)             # <<<<<<<<<<<<<<
 *     p = _cache.get(cachekey)
 *     if p is not None:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 809; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_pattern)));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(__pyx_v_pattern)));
  __Pyx_GIVEREF(((PyObject *)Py_TYPE(__pyx_v_pattern)));
  __pyx_t_2 = PyInt_FromLong(__pyx_v_flags); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 809; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 809; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_INCREF(__pyx_v_pattern);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_pattern);
  __Pyx_GIVEREF(__pyx_v_pattern);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(((PyObject *)__pyx_t_1), ((PyObject *)__pyx_t_3)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 809; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_v_cachekey));
  __pyx_v_cachekey = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "re2.pyx":810
 * def compile(pattern, int flags=0, int max_mem=8388608):
 *     cachekey = (type(pattern),) + (pattern, flags)
 *     p = _cache.get(cachekey)             # <<<<<<<<<<<<<<
 *     if p is not None:
 *         return p
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s___cache); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 810; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__get); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 810; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 810; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(((PyObject *)__pyx_v_cachekey));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_cachekey));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_cachekey));
  __pyx_t_1 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 810; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_v_p);
  __pyx_v_p = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "re2.pyx":811
 *     cachekey = (type(pattern),) + (pattern, flags)
 *     p = _cache.get(cachekey)
 *     if p is not None:             # <<<<<<<<<<<<<<
 *         return p
 *     p = _compile(pattern, flags, max_mem)
 */
  __pyx_t_4 = (__pyx_v_p != Py_None);
  if (__pyx_t_4) {

    /* "re2.pyx":812
 *     p = _cache.get(cachekey)
 *     if p is not None:
 *         return p             # <<<<<<<<<<<<<<
 *     p = _compile(pattern, flags, max_mem)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_p);
    __pyx_r = __pyx_v_p;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "re2.pyx":813
 *     if p is not None:
 *         return p
 *     p = _compile(pattern, flags, max_mem)             # <<<<<<<<<<<<<<
 * 
 *     if len(_cache) >= _MAXCACHE:
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s___compile); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_flags); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromLong(__pyx_v_max_mem); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_5));
  __Pyx_INCREF(__pyx_v_pattern);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_pattern);
  __Pyx_GIVEREF(__pyx_v_pattern);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_v_p);
  __pyx_v_p = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "re2.pyx":815
 *     p = _compile(pattern, flags, max_mem)
 * 
 *     if len(_cache) >= _MAXCACHE:             # <<<<<<<<<<<<<<
 *         _cache.clear()
 *     _cache[cachekey] = p
 */
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s___cache); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s___MAXCACHE); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_5, Py_GE); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "re2.pyx":816
 * 
 *     if len(_cache) >= _MAXCACHE:
 *         _cache.clear()             # <<<<<<<<<<<<<<
 *     _cache[cachekey] = p
 *     return p
 */
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s___cache); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__clear); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "re2.pyx":817
 *     if len(_cache) >= _MAXCACHE:
 *         _cache.clear()
 *     _cache[cachekey] = p             # <<<<<<<<<<<<<<
 *     return p
 * 
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s___cache); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetItem(__pyx_t_1, ((PyObject *)__pyx_v_cachekey), __pyx_v_p) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":818
 *         _cache.clear()
 *     _cache[cachekey] = p
 *     return p             # <<<<<<<<<<<<<<
 * 
 * class BackreferencesException(Exception):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_p);
  __pyx_r = __pyx_v_p;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("re2.compile");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_cachekey);
  __Pyx_DECREF(__pyx_v_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":826
 * 
 * class Tokenizer:
 *     def __init__(self, string):             # <<<<<<<<<<<<<<
 *         self.string = string
 *         self.index = 0
 */

static PyObject *__pyx_pf_3re2_9Tokenizer___init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3re2_9Tokenizer___init__ = {__Pyx_NAMESTR("__init__"), (PyCFunction)__pyx_pf_3re2_9Tokenizer___init__, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pf_3re2_9Tokenizer___init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_string = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__string,0};
  __Pyx_RefNannySetupContext("__init__");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__string);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_self = values[0];
    __pyx_v_string = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_self = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_string = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.Tokenizer.__init__");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "re2.pyx":827
 * class Tokenizer:
 *     def __init__(self, string):
 *         self.string = string             # <<<<<<<<<<<<<<
 *         self.index = 0
 *         self.__next()
 */
  if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s__string, __pyx_v_string) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "re2.pyx":828
 *     def __init__(self, string):
 *         self.string = string
 *         self.index = 0             # <<<<<<<<<<<<<<
 *         self.__next()
 *     def __next(self):
 */
  if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s__index, __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "re2.pyx":829
 *         self.string = string
 *         self.index = 0
 *         self.__next()             # <<<<<<<<<<<<<<
 *     def __next(self):
 *         if self.index >= len(self.string):
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s____next); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("re2.Tokenizer.__init__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":830
 *         self.index = 0
 *         self.__next()
 *     def __next(self):             # <<<<<<<<<<<<<<
 *         if self.index >= len(self.string):
 *             self.next = None
 */

static PyObject *__pyx_pf_3re2_9Tokenizer_1__next(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_3re2_9Tokenizer_1__next = {__Pyx_NAMESTR("__next"), (PyCFunction)__pyx_pf_3re2_9Tokenizer_1__next, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pf_3re2_9Tokenizer_1__next(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_ch;
  PyObject *__pyx_v_c;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next");
  __pyx_self = __pyx_self;
  __pyx_v_ch = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_c = Py_None; __Pyx_INCREF(Py_None);

  /* "re2.pyx":831
 *         self.__next()
 *     def __next(self):
 *         if self.index >= len(self.string):             # <<<<<<<<<<<<<<
 *             self.next = None
 *             return
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__index); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__string); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_GE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_5) {

    /* "re2.pyx":832
 *     def __next(self):
 *         if self.index >= len(self.string):
 *             self.next = None             # <<<<<<<<<<<<<<
 *             return
 *         ch = self.string[self.index]
 */
    if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s__next, Py_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "re2.pyx":833
 *         if self.index >= len(self.string):
 *             self.next = None
 *             return             # <<<<<<<<<<<<<<
 *         ch = self.string[self.index]
 *         if ch[0] == "\\":
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "re2.pyx":834
 *             self.next = None
 *             return
 *         ch = self.string[self.index]             # <<<<<<<<<<<<<<
 *         if ch[0] == "\\":
 *             try:
 */
  __pyx_t_4 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__string); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__index); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_4, __pyx_t_2); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_v_ch);
  __pyx_v_ch = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "re2.pyx":835
 *             return
 *         ch = self.string[self.index]
 *         if ch[0] == "\\":             # <<<<<<<<<<<<<<
 *             try:
 *                 c = self.string[self.index + 1]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_ch, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, ((PyObject *)__pyx_kp_s_7), Py_EQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_5) {

    /* "re2.pyx":836
 *         ch = self.string[self.index]
 *         if ch[0] == "\\":
 *             try:             # <<<<<<<<<<<<<<
 *                 c = self.string[self.index + 1]
 *             except IndexError:
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      /*try:*/ {

        /* "re2.pyx":837
 *         if ch[0] == "\\":
 *             try:
 *                 c = self.string[self.index + 1]             # <<<<<<<<<<<<<<
 *             except IndexError:
 *                 raise RegexError, "bogus escape (end of line)"
 */
        __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__string); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__index); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_int_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyObject_GetItem(__pyx_t_2, __pyx_t_4); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_v_c);
        __pyx_v_c = __pyx_t_1;
        __pyx_t_1 = 0;
      }
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L14_try_end;
      __pyx_L7_error:;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "re2.pyx":838
 *             try:
 *                 c = self.string[self.index + 1]
 *             except IndexError:             # <<<<<<<<<<<<<<
 *                 raise RegexError, "bogus escape (end of line)"
 *             ch = ch + c
 */
      __pyx_t_9 = PyErr_ExceptionMatches(__pyx_builtin_IndexError);
      if (__pyx_t_9) {
        __Pyx_AddTraceback("re2.Tokenizer.__next");
        if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_4, &__pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L9_except_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_t_2);

        /* "re2.pyx":839
 *                 c = self.string[self.index + 1]
 *             except IndexError:
 *                 raise RegexError, "bogus escape (end of line)"             # <<<<<<<<<<<<<<
 *             ch = ch + c
 *         self.index = self.index + len(ch)
 */
        __pyx_t_10 = __Pyx_GetName(__pyx_m, __pyx_n_s__RegexError); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L9_except_error;}
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_Raise(__pyx_t_10, ((PyObject *)__pyx_kp_s_29), 0);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L9_except_error;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        goto __pyx_L8_exception_handled;
      }
      __pyx_L9_except_error:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      goto __pyx_L1_error;
      __pyx_L8_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      __pyx_L14_try_end:;
    }

    /* "re2.pyx":840
 *             except IndexError:
 *                 raise RegexError, "bogus escape (end of line)"
 *             ch = ch + c             # <<<<<<<<<<<<<<
 *         self.index = self.index + len(ch)
 *         self.next = ch
 */
    __pyx_t_2 = PyNumber_Add(__pyx_v_ch, __pyx_v_c); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_v_ch);
    __pyx_v_ch = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "re2.pyx":841
 *                 raise RegexError, "bogus escape (end of line)"
 *             ch = ch + c
 *         self.index = self.index + len(ch)             # <<<<<<<<<<<<<<
 *         self.next = ch
 *     def get(self):
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__index); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_Length(__pyx_v_ch); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s__index, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":842
 *             ch = ch + c
 *         self.index = self.index + len(ch)
 *         self.next = ch             # <<<<<<<<<<<<<<
 *     def get(self):
 *         this = self.next
 */
  if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s__next, __pyx_v_ch) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("re2.Tokenizer.__next");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_ch);
  __Pyx_DECREF(__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":843
 *         self.index = self.index + len(ch)
 *         self.next = ch
 *     def get(self):             # <<<<<<<<<<<<<<
 *         this = self.next
 *         self.__next()
 */

static PyObject *__pyx_pf_3re2_9Tokenizer_2get(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_3re2_9Tokenizer_2get = {__Pyx_NAMESTR("get"), (PyCFunction)__pyx_pf_3re2_9Tokenizer_2get, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pf_3re2_9Tokenizer_2get(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_this;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get");
  __pyx_self = __pyx_self;
  __pyx_v_this = Py_None; __Pyx_INCREF(Py_None);

  /* "re2.pyx":844
 *         self.next = ch
 *     def get(self):
 *         this = self.next             # <<<<<<<<<<<<<<
 *         self.__next()
 *         return this
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__next); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_v_this);
  __pyx_v_this = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "re2.pyx":845
 *     def get(self):
 *         this = self.next
 *         self.__next()             # <<<<<<<<<<<<<<
 *         return this
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s____next); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "re2.pyx":846
 *         this = self.next
 *         self.__next()
 *         return this             # <<<<<<<<<<<<<<
 * 
 * def prepare_pattern(pattern, int flags):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_this);
  __pyx_r = __pyx_v_this;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("re2.Tokenizer.get");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_this);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":848
 *         return this
 * 
 * def prepare_pattern(pattern, int flags):             # <<<<<<<<<<<<<<
 *     source = Tokenizer(pattern)
 *     new_pattern = []
 */

static PyObject *__pyx_pf_3re2_3prepare_pattern(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3re2_3prepare_pattern = {__Pyx_NAMESTR("prepare_pattern"), (PyCFunction)__pyx_pf_3re2_3prepare_pattern, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pf_3re2_3prepare_pattern(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pattern = 0;
  int __pyx_v_flags;
  PyObject *__pyx_v_source;
  PyObject *__pyx_v_new_pattern;
  PyObject *__pyx_v_strflags = 0;
  PyObject *__pyx_v_this;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannyDeclarations
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__pattern,&__pyx_n_s__flags,0};
  __Pyx_RefNannySetupContext("prepare_pattern");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pattern);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__flags);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("prepare_pattern", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 848; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "prepare_pattern") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 848; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_pattern = values[0];
    __pyx_v_flags = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 848; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_pattern = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_flags = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 848; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prepare_pattern", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 848; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.prepare_pattern");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_source = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_new_pattern = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_this = Py_None; __Pyx_INCREF(Py_None);

  /* "re2.pyx":849
 * 
 * def prepare_pattern(pattern, int flags):
 *     source = Tokenizer(pattern)             # <<<<<<<<<<<<<<
 *     new_pattern = []
 * 
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__Tokenizer); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_v_pattern);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_pattern);
  __Pyx_GIVEREF(__pyx_v_pattern);
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_v_source);
  __pyx_v_source = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "re2.pyx":850
 * def prepare_pattern(pattern, int flags):
 *     source = Tokenizer(pattern)
 *     new_pattern = []             # <<<<<<<<<<<<<<
 * 
 *     cdef str strflags = ''
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 850; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_DECREF(((PyObject *)__pyx_v_new_pattern));
  __pyx_v_new_pattern = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "re2.pyx":852
 *     new_pattern = []
 * 
 *     cdef str strflags = ''             # <<<<<<<<<<<<<<
 *     if flags & _S:
 *         strflags += 's'
 */
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_13));
  __pyx_v_strflags = __pyx_kp_s_13;

  /* "re2.pyx":853
 * 
 *     cdef str strflags = ''
 *     if flags & _S:             # <<<<<<<<<<<<<<
 *         strflags += 's'
 *     if flags & _M:
 */
  __pyx_t_4 = (__pyx_v_flags & __pyx_v_3re2__S);
  if (__pyx_t_4) {

    /* "re2.pyx":854
 *     cdef str strflags = ''
 *     if flags & _S:
 *         strflags += 's'             # <<<<<<<<<<<<<<
 *     if flags & _M:
 *         strflags += 'm'
 */
    __pyx_t_3 = PyNumber_InPlaceAdd(((PyObject *)__pyx_v_strflags), ((PyObject *)__pyx_n_s__s)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 854; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __Pyx_DECREF(((PyObject *)__pyx_v_strflags));
    __pyx_v_strflags = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "re2.pyx":855
 *     if flags & _S:
 *         strflags += 's'
 *     if flags & _M:             # <<<<<<<<<<<<<<
 *         strflags += 'm'
 * 
 */
  __pyx_t_4 = (__pyx_v_flags & __pyx_v_3re2__M);
  if (__pyx_t_4) {

    /* "re2.pyx":856
 *         strflags += 's'
 *     if flags & _M:
 *         strflags += 'm'             # <<<<<<<<<<<<<<
 * 
 *     if strflags:
 */
    __pyx_t_3 = PyNumber_InPlaceAdd(((PyObject *)__pyx_v_strflags), ((PyObject *)__pyx_n_s__m)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 856; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __Pyx_DECREF(((PyObject *)__pyx_v_strflags));
    __pyx_v_strflags = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "re2.pyx":858
 *         strflags += 'm'
 * 
 *     if strflags:             # <<<<<<<<<<<<<<
 *         new_pattern.append('(?' + strflags + ')')
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_strflags)); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 858; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_5) {

    /* "re2.pyx":859
 * 
 *     if strflags:
 *         new_pattern.append('(?' + strflags + ')')             # <<<<<<<<<<<<<<
 * 
 *     while 1:
 */
    if (unlikely(__pyx_v_new_pattern == Py_None)) {
      PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 859; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_3 = PyNumber_Add(((PyObject *)__pyx_kp_s_30), ((PyObject *)__pyx_v_strflags)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 859; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __pyx_t_2 = PyNumber_Add(((PyObject *)__pyx_t_3), ((PyObject *)__pyx_kp_s_31)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 859; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __pyx_t_6 = PyList_Append(__pyx_v_new_pattern, ((PyObject *)__pyx_t_2)); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 859; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    goto __pyx_L8;
  }
  __pyx_L8:;

  /* "re2.pyx":861
 *         new_pattern.append('(?' + strflags + ')')
 * 
 *     while 1:             # <<<<<<<<<<<<<<
 *         this = source.get()
 *         if this is None:
 */
  while (1) {
    if (!1) break;

    /* "re2.pyx":862
 * 
 *     while 1:
 *         this = source.get()             # <<<<<<<<<<<<<<
 *         if this is None:
 *             break
 */
    __pyx_t_2 = PyObject_GetAttr(__pyx_v_source, __pyx_n_s__get); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 862; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 862; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_v_this);
    __pyx_v_this = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "re2.pyx":863
 *     while 1:
 *         this = source.get()
 *         if this is None:             # <<<<<<<<<<<<<<
 *             break
 *         if flags & _X:
 */
    __pyx_t_5 = (__pyx_v_this == Py_None);
    if (__pyx_t_5) {

      /* "re2.pyx":864
 *         this = source.get()
 *         if this is None:
 *             break             # <<<<<<<<<<<<<<
 *         if flags & _X:
 *             if this in WHITESPACE:
 */
      goto __pyx_L10_break;
      goto __pyx_L11;
    }
    __pyx_L11:;

    /* "re2.pyx":865
 *         if this is None:
 *             break
 *         if flags & _X:             # <<<<<<<<<<<<<<
 *             if this in WHITESPACE:
 *                 continue
 */
    __pyx_t_4 = (__pyx_v_flags & __pyx_v_3re2__X);
    if (__pyx_t_4) {

      /* "re2.pyx":866
 *             break
 *         if flags & _X:
 *             if this in WHITESPACE:             # <<<<<<<<<<<<<<
 *                 continue
 *             if this == "#":
 */
      __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__WHITESPACE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 866; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = ((PySequence_Contains(__pyx_t_3, __pyx_v_this))); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 866; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_5) {

        /* "re2.pyx":867
 *         if flags & _X:
 *             if this in WHITESPACE:
 *                 continue             # <<<<<<<<<<<<<<
 *             if this == "#":
 *                 while 1:
 */
        goto __pyx_L9_continue;
        goto __pyx_L13;
      }
      __pyx_L13:;

      /* "re2.pyx":868
 *             if this in WHITESPACE:
 *                 continue
 *             if this == "#":             # <<<<<<<<<<<<<<
 *                 while 1:
 *                     this = source.get()
 */
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_this, ((PyObject *)__pyx_kp_s_32), Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 868; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 868; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_5) {

        /* "re2.pyx":869
 *                 continue
 *             if this == "#":
 *                 while 1:             # <<<<<<<<<<<<<<
 *                     this = source.get()
 *                     if this in (None, "\n"):
 */
        while (1) {
          if (!1) break;

          /* "re2.pyx":870
 *             if this == "#":
 *                 while 1:
 *                     this = source.get()             # <<<<<<<<<<<<<<
 *                     if this in (None, "\n"):
 *                         break
 */
          __pyx_t_3 = PyObject_GetAttr(__pyx_v_source, __pyx_n_s__get); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 870; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 870; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_v_this);
          __pyx_v_this = __pyx_t_2;
          __pyx_t_2 = 0;

          /* "re2.pyx":871
 *                 while 1:
 *                     this = source.get()
 *                     if this in (None, "\n"):             # <<<<<<<<<<<<<<
 *                         break
 *                 continue
 */
          __Pyx_INCREF(__pyx_v_this);
          __pyx_t_2 = __pyx_v_this;
          __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, Py_None, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 871; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 871; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (!__pyx_t_5) {
            __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, ((PyObject *)__pyx_kp_s_19), Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 871; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 871; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_8 = __pyx_t_7;
          } else {
            __pyx_t_8 = __pyx_t_5;
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_5 = __pyx_t_8;
          if (__pyx_t_5) {

            /* "re2.pyx":872
 *                     this = source.get()
 *                     if this in (None, "\n"):
 *                         break             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
            goto __pyx_L16_break;
            goto __pyx_L17;
          }
          __pyx_L17:;
        }
        __pyx_L16_break:;

        /* "re2.pyx":873
 *                     if this in (None, "\n"):
 *                         break
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *         if this[0] not in '[\\':
 */
        goto __pyx_L9_continue;
        goto __pyx_L14;
      }
      __pyx_L14:;
      goto __pyx_L12;
    }
    __pyx_L12:;

    /* "re2.pyx":875
 *                 continue
 * 
 *         if this[0] not in '[\\':             # <<<<<<<<<<<<<<
 *             new_pattern.append(this)
 *             continue
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_this, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 875; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = (__Pyx_NegateNonNeg(PySequence_Contains(((PyObject *)__pyx_kp_s_33), __pyx_t_2))); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 875; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_5) {

      /* "re2.pyx":876
 * 
 *         if this[0] not in '[\\':
 *             new_pattern.append(this)             # <<<<<<<<<<<<<<
 *             continue
 * 
 */
      if (unlikely(__pyx_v_new_pattern == Py_None)) {
        PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 876; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
      }
      __pyx_t_6 = PyList_Append(__pyx_v_new_pattern, __pyx_v_this); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 876; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "re2.pyx":877
 *         if this[0] not in '[\\':
 *             new_pattern.append(this)
 *             continue             # <<<<<<<<<<<<<<
 * 
 *         elif this == '[':
 */
      goto __pyx_L9_continue;
      goto __pyx_L18;
    }

    /* "re2.pyx":879
 *             continue
 * 
 *         elif this == '[':             # <<<<<<<<<<<<<<
 *             new_pattern.append(this)
 *             while 1:
 */
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_this, ((PyObject *)__pyx_kp_s_34), Py_EQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 879; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 879; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_5) {

      /* "re2.pyx":880
 * 
 *         elif this == '[':
 *             new_pattern.append(this)             # <<<<<<<<<<<<<<
 *             while 1:
 *                 this = source.get()
 */
      if (unlikely(__pyx_v_new_pattern == Py_None)) {
        PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 880; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
      }
      __pyx_t_6 = PyList_Append(__pyx_v_new_pattern, __pyx_v_this); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 880; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "re2.pyx":881
 *         elif this == '[':
 *             new_pattern.append(this)
 *             while 1:             # <<<<<<<<<<<<<<
 *                 this = source.get()
 *                 if this is None:
 */
      while (1) {
        if (!1) break;

        /* "re2.pyx":882
 *             new_pattern.append(this)
 *             while 1:
 *                 this = source.get()             # <<<<<<<<<<<<<<
 *                 if this is None:
 *                     raise RegexError, "unexpected end of regular expression"
 */
        __pyx_t_2 = PyObject_GetAttr(__pyx_v_source, __pyx_n_s__get); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 882; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 882; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_v_this);
        __pyx_v_this = __pyx_t_3;
        __pyx_t_3 = 0;

        /* "re2.pyx":883
 *             while 1:
 *                 this = source.get()
 *                 if this is None:             # <<<<<<<<<<<<<<
 *                     raise RegexError, "unexpected end of regular expression"
 *                 elif this == ']':
 */
        __pyx_t_5 = (__pyx_v_this == Py_None);
        if (__pyx_t_5) {

          /* "re2.pyx":884
 *                 this = source.get()
 *                 if this is None:
 *                     raise RegexError, "unexpected end of regular expression"             # <<<<<<<<<<<<<<
 *                 elif this == ']':
 *                     new_pattern.append(this)
 */
          __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__RegexError); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 884; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_Raise(__pyx_t_3, ((PyObject *)__pyx_kp_s_35), 0);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 884; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          goto __pyx_L21;
        }

        /* "re2.pyx":885
 *                 if this is None:
 *                     raise RegexError, "unexpected end of regular expression"
 *                 elif this == ']':             # <<<<<<<<<<<<<<
 *                     new_pattern.append(this)
 *                     break
 */
        __pyx_t_3 = PyObject_RichCompare(__pyx_v_this, ((PyObject *)__pyx_kp_s_36), Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 885; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 885; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (__pyx_t_5) {

          /* "re2.pyx":886
 *                     raise RegexError, "unexpected end of regular expression"
 *                 elif this == ']':
 *                     new_pattern.append(this)             # <<<<<<<<<<<<<<
 *                     break
 *                 elif this[0] == '\\':
 */
          if (unlikely(__pyx_v_new_pattern == Py_None)) {
            PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 886; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
          }
          __pyx_t_6 = PyList_Append(__pyx_v_new_pattern, __pyx_v_this); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 886; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

          /* "re2.pyx":887
 *                 elif this == ']':
 *                     new_pattern.append(this)
 *                     break             # <<<<<<<<<<<<<<
 *                 elif this[0] == '\\':
 *                     if flags & _U:
 */
          goto __pyx_L20_break;
          goto __pyx_L21;
        }

        /* "re2.pyx":888
 *                     new_pattern.append(this)
 *                     break
 *                 elif this[0] == '\\':             # <<<<<<<<<<<<<<
 *                     if flags & _U:
 *                         if this[1] == 'd':
 */
        __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_this, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 888; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, ((PyObject *)__pyx_kp_s_7), Py_EQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 888; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 888; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (__pyx_t_5) {

          /* "re2.pyx":889
 *                     break
 *                 elif this[0] == '\\':
 *                     if flags & _U:             # <<<<<<<<<<<<<<
 *                         if this[1] == 'd':
 *                             new_pattern.append(r'\p{Nd}')
 */
          __pyx_t_4 = (__pyx_v_flags & __pyx_v_3re2__U);
          if (__pyx_t_4) {

            /* "re2.pyx":890
 *                 elif this[0] == '\\':
 *                     if flags & _U:
 *                         if this[1] == 'd':             # <<<<<<<<<<<<<<
 *                             new_pattern.append(r'\p{Nd}')
 *                         elif this[1] == 'w':
 */
            __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_this, 1, sizeof(long), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 890; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, ((PyObject *)__pyx_n_s__d), Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 890; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 890; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (__pyx_t_5) {

              /* "re2.pyx":891
 *                     if flags & _U:
 *                         if this[1] == 'd':
 *                             new_pattern.append(r'\p{Nd}')             # <<<<<<<<<<<<<<
 *                         elif this[1] == 'w':
 *                             new_pattern.append(r'_\p{L}\p{Nd}')
 */
              if (unlikely(__pyx_v_new_pattern == Py_None)) {
                PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 891; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
              }
              __pyx_t_3 = ((PyObject *)__pyx_kp_s_37);
              __Pyx_INCREF(__pyx_t_3);
              __pyx_t_6 = PyList_Append(__pyx_v_new_pattern, __pyx_t_3); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 891; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              goto __pyx_L23;
            }

            /* "re2.pyx":892
 *                         if this[1] == 'd':
 *                             new_pattern.append(r'\p{Nd}')
 *                         elif this[1] == 'w':             # <<<<<<<<<<<<<<
 *                             new_pattern.append(r'_\p{L}\p{Nd}')
 *                         elif this[1] == 's':
 */
            __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_this, 1, sizeof(long), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 892; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, ((PyObject *)__pyx_n_s__w), Py_EQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 892; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 892; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (__pyx_t_5) {

              /* "re2.pyx":893
 *                             new_pattern.append(r'\p{Nd}')
 *                         elif this[1] == 'w':
 *                             new_pattern.append(r'_\p{L}\p{Nd}')             # <<<<<<<<<<<<<<
 *                         elif this[1] == 's':
 *                             new_pattern.append(r'\s\p{Z}')
 */
              if (unlikely(__pyx_v_new_pattern == Py_None)) {
                PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 893; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
              }
              __pyx_t_2 = ((PyObject *)__pyx_kp_s_38);
              __Pyx_INCREF(__pyx_t_2);
              __pyx_t_6 = PyList_Append(__pyx_v_new_pattern, __pyx_t_2); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 893; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              goto __pyx_L23;
            }

            /* "re2.pyx":894
 *                         elif this[1] == 'w':
 *                             new_pattern.append(r'_\p{L}\p{Nd}')
 *                         elif this[1] == 's':             # <<<<<<<<<<<<<<
 *                             new_pattern.append(r'\s\p{Z}')
 *                         else:
 */
            __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_this, 1, sizeof(long), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, ((PyObject *)__pyx_n_s__s), Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (__pyx_t_5) {

              /* "re2.pyx":895
 *                             new_pattern.append(r'_\p{L}\p{Nd}')
 *                         elif this[1] == 's':
 *                             new_pattern.append(r'\s\p{Z}')             # <<<<<<<<<<<<<<
 *                         else:
 *                             new_pattern.append(this)
 */
              if (unlikely(__pyx_v_new_pattern == Py_None)) {
                PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 895; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
              }
              __pyx_t_3 = ((PyObject *)__pyx_kp_s_39);
              __Pyx_INCREF(__pyx_t_3);
              __pyx_t_6 = PyList_Append(__pyx_v_new_pattern, __pyx_t_3); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 895; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              goto __pyx_L23;
            }
            /*else*/ {

              /* "re2.pyx":897
 *                             new_pattern.append(r'\s\p{Z}')
 *                         else:
 *                             new_pattern.append(this)             # <<<<<<<<<<<<<<
 *                     else:
 *                         new_pattern.append(this)
 */
              if (unlikely(__pyx_v_new_pattern == Py_None)) {
                PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 897; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
              }
              __pyx_t_6 = PyList_Append(__pyx_v_new_pattern, __pyx_v_this); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            __pyx_L23:;
            goto __pyx_L22;
          }
          /*else*/ {

            /* "re2.pyx":899
 *                             new_pattern.append(this)
 *                     else:
 *                         new_pattern.append(this)             # <<<<<<<<<<<<<<
 *                 else:
 *                     new_pattern.append(this)
 */
            if (unlikely(__pyx_v_new_pattern == Py_None)) {
              PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
            }
            __pyx_t_6 = PyList_Append(__pyx_v_new_pattern, __pyx_v_this); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          __pyx_L22:;
          goto __pyx_L21;
        }
        /*else*/ {

          /* "re2.pyx":901
 *                         new_pattern.append(this)
 *                 else:
 *                     new_pattern.append(this)             # <<<<<<<<<<<<<<
 *         elif this[0] == '\\':
 *             if this[1] in '89':
 */
          if (unlikely(__pyx_v_new_pattern == Py_None)) {
            PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 901; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
          }
          __pyx_t_6 = PyList_Append(__pyx_v_new_pattern, __pyx_v_this); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 901; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_L21:;
      }
      __pyx_L20_break:;
      goto __pyx_L18;
    }

    /* "re2.pyx":902
 *                 else:
 *                     new_pattern.append(this)
 *         elif this[0] == '\\':             # <<<<<<<<<<<<<<
 *             if this[1] in '89':
 *                 raise BackreferencesException()
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_this, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 902; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, ((PyObject *)__pyx_kp_s_7), Py_EQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 902; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 902; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_5) {

      /* "re2.pyx":903
 *                     new_pattern.append(this)
 *         elif this[0] == '\\':
 *             if this[1] in '89':             # <<<<<<<<<<<<<<
 *                 raise BackreferencesException()
 *             elif this[1] in '1234567':
 */
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_this, 1, sizeof(long), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 903; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = ((PySequence_Contains(((PyObject *)__pyx_kp_s__89), __pyx_t_2))); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 903; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_5) {

        /* "re2.pyx":904
 *         elif this[0] == '\\':
 *             if this[1] in '89':
 *                 raise BackreferencesException()             # <<<<<<<<<<<<<<
 *             elif this[1] in '1234567':
 *                 if source.next and source.next in '1234567':
 */
        __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s_40); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 904; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 904; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 904; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        goto __pyx_L24;
      }

      /* "re2.pyx":905
 *             if this[1] in '89':
 *                 raise BackreferencesException()
 *             elif this[1] in '1234567':             # <<<<<<<<<<<<<<
 *                 if source.next and source.next in '1234567':
 *                     this += source.get()
 */
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_this, 1, sizeof(long), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 905; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = ((PySequence_Contains(((PyObject *)__pyx_kp_s__1234567), __pyx_t_3))); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 905; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_5) {

        /* "re2.pyx":906
 *                 raise BackreferencesException()
 *             elif this[1] in '1234567':
 *                 if source.next and source.next in '1234567':             # <<<<<<<<<<<<<<
 *                     this += source.get()
 *                     if source.next and source.next in '1234567':
 */
        __pyx_t_3 = PyObject_GetAttr(__pyx_v_source, __pyx_n_s__next); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (__pyx_t_5) {
          __pyx_t_3 = PyObject_GetAttr(__pyx_v_source, __pyx_n_s__next); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_8 = ((PySequence_Contains(((PyObject *)__pyx_kp_s__1234567), __pyx_t_3))); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_7 = __pyx_t_8;
        } else {
          __pyx_t_7 = __pyx_t_5;
        }
        if (__pyx_t_7) {

          /* "re2.pyx":907
 *             elif this[1] in '1234567':
 *                 if source.next and source.next in '1234567':
 *                     this += source.get()             # <<<<<<<<<<<<<<
 *                     if source.next and source.next in '1234567':
 *                         # all clear, this is an octal escape
 */
          __pyx_t_3 = PyObject_GetAttr(__pyx_v_source, __pyx_n_s__get); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 907; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 907; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_this, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 907; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_v_this);
          __pyx_v_this = __pyx_t_3;
          __pyx_t_3 = 0;

          /* "re2.pyx":908
 *                 if source.next and source.next in '1234567':
 *                     this += source.get()
 *                     if source.next and source.next in '1234567':             # <<<<<<<<<<<<<<
 *                         # all clear, this is an octal escape
 *                         new_pattern.append(this)
 */
          __pyx_t_3 = PyObject_GetAttr(__pyx_v_source, __pyx_n_s__next); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (__pyx_t_7) {
            __pyx_t_3 = PyObject_GetAttr(__pyx_v_source, __pyx_n_s__next); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_5 = ((PySequence_Contains(((PyObject *)__pyx_kp_s__1234567), __pyx_t_3))); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_8 = __pyx_t_5;
          } else {
            __pyx_t_8 = __pyx_t_7;
          }
          if (__pyx_t_8) {

            /* "re2.pyx":910
 *                     if source.next and source.next in '1234567':
 *                         # all clear, this is an octal escape
 *                         new_pattern.append(this)             # <<<<<<<<<<<<<<
 *                     else:
 *                         raise BackreferencesException()
 */
            if (unlikely(__pyx_v_new_pattern == Py_None)) {
              PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 910; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
            }
            __pyx_t_6 = PyList_Append(__pyx_v_new_pattern, __pyx_v_this); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 910; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            goto __pyx_L26;
          }
          /*else*/ {

            /* "re2.pyx":912
 *                         new_pattern.append(this)
 *                     else:
 *                         raise BackreferencesException()             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise BackreferencesException()
 */
            __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s_40); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 912; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 912; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_Raise(__pyx_t_2, 0, 0);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 912; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          __pyx_L26:;
          goto __pyx_L25;
        }
        /*else*/ {

          /* "re2.pyx":914
 *                         raise BackreferencesException()
 *                 else:
 *                     raise BackreferencesException()             # <<<<<<<<<<<<<<
 *             elif flags & _U:
 *                 if this[1] == 'd':
 */
          __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s_40); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 914; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 914; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_Raise(__pyx_t_3, 0, 0);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 914; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_L25:;
        goto __pyx_L24;
      }

      /* "re2.pyx":915
 *                 else:
 *                     raise BackreferencesException()
 *             elif flags & _U:             # <<<<<<<<<<<<<<
 *                 if this[1] == 'd':
 *                     new_pattern.append(r'\p{Nd}')
 */
      __pyx_t_4 = (__pyx_v_flags & __pyx_v_3re2__U);
      if (__pyx_t_4) {

        /* "re2.pyx":916
 *                     raise BackreferencesException()
 *             elif flags & _U:
 *                 if this[1] == 'd':             # <<<<<<<<<<<<<<
 *                     new_pattern.append(r'\p{Nd}')
 *                 elif this[1] == 'w':
 */
        __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_this, 1, sizeof(long), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 916; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, ((PyObject *)__pyx_n_s__d), Py_EQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 916; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 916; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (__pyx_t_8) {

          /* "re2.pyx":917
 *             elif flags & _U:
 *                 if this[1] == 'd':
 *                     new_pattern.append(r'\p{Nd}')             # <<<<<<<<<<<<<<
 *                 elif this[1] == 'w':
 *                     new_pattern.append(r'[_\p{L}\p{Nd}]')
 */
          if (unlikely(__pyx_v_new_pattern == Py_None)) {
            PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 917; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
          }
          __pyx_t_2 = ((PyObject *)__pyx_kp_s_37);
          __Pyx_INCREF(__pyx_t_2);
          __pyx_t_6 = PyList_Append(__pyx_v_new_pattern, __pyx_t_2); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 917; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          goto __pyx_L27;
        }

        /* "re2.pyx":918
 *                 if this[1] == 'd':
 *                     new_pattern.append(r'\p{Nd}')
 *                 elif this[1] == 'w':             # <<<<<<<<<<<<<<
 *                     new_pattern.append(r'[_\p{L}\p{Nd}]')
 *                 elif this[1] == 's':
 */
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_this, 1, sizeof(long), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 918; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, ((PyObject *)__pyx_n_s__w), Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 918; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 918; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (__pyx_t_8) {

          /* "re2.pyx":919
 *                     new_pattern.append(r'\p{Nd}')
 *                 elif this[1] == 'w':
 *                     new_pattern.append(r'[_\p{L}\p{Nd}]')             # <<<<<<<<<<<<<<
 *                 elif this[1] == 's':
 *                     new_pattern.append(r'[\s\p{Z}]')
 */
          if (unlikely(__pyx_v_new_pattern == Py_None)) {
            PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 919; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
          }
          __pyx_t_3 = ((PyObject *)__pyx_kp_s_41);
          __Pyx_INCREF(__pyx_t_3);
          __pyx_t_6 = PyList_Append(__pyx_v_new_pattern, __pyx_t_3); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 919; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          goto __pyx_L27;
        }

        /* "re2.pyx":920
 *                 elif this[1] == 'w':
 *                     new_pattern.append(r'[_\p{L}\p{Nd}]')
 *                 elif this[1] == 's':             # <<<<<<<<<<<<<<
 *                     new_pattern.append(r'[\s\p{Z}]')
 *                 else:
 */
        __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_this, 1, sizeof(long), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 920; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, ((PyObject *)__pyx_n_s__s), Py_EQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 920; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 920; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (__pyx_t_8) {

          /* "re2.pyx":921
 *                     new_pattern.append(r'[_\p{L}\p{Nd}]')
 *                 elif this[1] == 's':
 *                     new_pattern.append(r'[\s\p{Z}]')             # <<<<<<<<<<<<<<
 *                 else:
 *                     new_pattern.append(this)
 */
          if (unlikely(__pyx_v_new_pattern == Py_None)) {
            PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 921; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
          }
          __pyx_t_2 = ((PyObject *)__pyx_kp_s_42);
          __Pyx_INCREF(__pyx_t_2);
          __pyx_t_6 = PyList_Append(__pyx_v_new_pattern, __pyx_t_2); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 921; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          goto __pyx_L27;
        }
        /*else*/ {

          /* "re2.pyx":923
 *                     new_pattern.append(r'[\s\p{Z}]')
 *                 else:
 *                     new_pattern.append(this)             # <<<<<<<<<<<<<<
 *             else:
 *                 new_pattern.append(this)
 */
          if (unlikely(__pyx_v_new_pattern == Py_None)) {
            PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 923; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
          }
          __pyx_t_6 = PyList_Append(__pyx_v_new_pattern, __pyx_v_this); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_L27:;
        goto __pyx_L24;
      }
      /*else*/ {

        /* "re2.pyx":925
 *                     new_pattern.append(this)
 *             else:
 *                 new_pattern.append(this)             # <<<<<<<<<<<<<<
 * 
 *     return ''.join(new_pattern)
 */
        if (unlikely(__pyx_v_new_pattern == Py_None)) {
          PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 925; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
        }
        __pyx_t_6 = PyList_Append(__pyx_v_new_pattern, __pyx_v_this); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 925; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L24:;
      goto __pyx_L18;
    }
    __pyx_L18:;
    __pyx_L9_continue:;
  }
  __pyx_L10_break:;

  /* "re2.pyx":927
 *                 new_pattern.append(this)
 * 
 *     return ''.join(new_pattern)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_kp_s_13), __pyx_n_s__join); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 927; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 927; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_INCREF(((PyObject *)__pyx_v_new_pattern));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_new_pattern));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_new_pattern));
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 927; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("re2.prepare_pattern");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_source);
  __Pyx_DECREF(__pyx_v_new_pattern);
  __Pyx_XDECREF(__pyx_v_strflags);
  __Pyx_DECREF(__pyx_v_this);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":931
 * 
 * 
 * def _compile(pattern, int flags=0, int max_mem=8388608):             # <<<<<<<<<<<<<<
 *     """
 *     Compile a regular expression pattern, returning a pattern object.
 */

static PyObject *__pyx_pf_3re2_4_compile(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_4_compile[] = "\n    Compile a regular expression pattern, returning a pattern object.\n    ";
static PyMethodDef __pyx_mdef_3re2_4_compile = {__Pyx_NAMESTR("_compile"), (PyCFunction)__pyx_pf_3re2_4_compile, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_3re2_4_compile)};
static PyObject *__pyx_pf_3re2_4_compile(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pattern = 0;
  int __pyx_v_flags;
  int __pyx_v_max_mem;
  char *__pyx_v_string;
  Py_ssize_t __pyx_v_length;
  re2::StringPiece *__pyx_v_s;
  RE2::Options __pyx_v_opts;
  int __pyx_v_error_code;
  int __pyx_v_encoded;
  PyObject *__pyx_v_original_pattern = 0;
  PyObject *__pyx_v_error_msg;
  re2::RE2 *__pyx_v_re_pattern;
  struct __pyx_obj_3re2_Pattern *__pyx_v_pypattern = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  __Pyx_RefNannyDeclarations
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__pattern,&__pyx_n_s__flags,&__pyx_n_s__max_mem,0};
  __Pyx_RefNannySetupContext("_compile");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pattern);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__flags);
        if (value) { values[1] = value; kw_args--; }
      }
      case  2:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__max_mem);
        if (value) { values[2] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "_compile") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 931; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_pattern = values[0];
    if (values[1]) {
      __pyx_v_flags = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 931; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_flags = ((int)0);
    }
    if (values[2]) {
      __pyx_v_max_mem = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_max_mem == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 931; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_max_mem = ((int)8388608);
    }
  } else {
    __pyx_v_flags = ((int)0);
    __pyx_v_max_mem = ((int)8388608);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: __pyx_v_max_mem = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_max_mem == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 931; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  2: __pyx_v_flags = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 931; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  1: __pyx_v_pattern = PyTuple_GET_ITEM(__pyx_args, 0);
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_compile", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 931; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2._compile");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_INCREF(__pyx_v_pattern);
  __pyx_v_error_msg = Py_None; __Pyx_INCREF(Py_None);

  /* "re2.pyx":940
 *     cdef _re2.Options opts
 *     cdef int error_code
 *     cdef int encoded = 0             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(pattern, (Pattern, SREPattern)):
 */
  __pyx_v_encoded = 0;

  /* "re2.pyx":942
 *     cdef int encoded = 0
 * 
 *     if isinstance(pattern, (Pattern, SREPattern)):             # <<<<<<<<<<<<<<
 *         if flags:
 *             raise ValueError('Cannot process flags argument with a compiled pattern')
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__SREPattern); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 942; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 942; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(((PyObject *)((PyObject*)__pyx_ptype_3re2_Pattern)));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)((PyObject*)__pyx_ptype_3re2_Pattern)));
  __Pyx_GIVEREF(((PyObject *)((PyObject*)__pyx_ptype_3re2_Pattern)));
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_pattern, ((PyObject *)__pyx_t_2)); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 942; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "re2.pyx":943
 * 
 *     if isinstance(pattern, (Pattern, SREPattern)):
 *         if flags:             # <<<<<<<<<<<<<<
 *             raise ValueError('Cannot process flags argument with a compiled pattern')
 *         return pattern
 */
    if (__pyx_v_flags) {

      /* "re2.pyx":944
 *     if isinstance(pattern, (Pattern, SREPattern)):
 *         if flags:
 *             raise ValueError('Cannot process flags argument with a compiled pattern')             # <<<<<<<<<<<<<<
 *         return pattern
 * 
 */
      __pyx_t_2 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_44), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L7;
    }
    __pyx_L7:;

    /* "re2.pyx":945
 *         if flags:
 *             raise ValueError('Cannot process flags argument with a compiled pattern')
 *         return pattern             # <<<<<<<<<<<<<<
 * 
 *     cdef object original_pattern = pattern
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_pattern);
    __pyx_r = __pyx_v_pattern;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "re2.pyx":947
 *         return pattern
 * 
 *     cdef object original_pattern = pattern             # <<<<<<<<<<<<<<
 *     try:
 *         pattern = prepare_pattern(original_pattern, flags)
 */
  __Pyx_INCREF(__pyx_v_pattern);
  __pyx_v_original_pattern = __pyx_v_pattern;

  /* "re2.pyx":948
 * 
 *     cdef object original_pattern = pattern
 *     try:             # <<<<<<<<<<<<<<
 *         pattern = prepare_pattern(original_pattern, flags)
 *     except BackreferencesException:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    /*try:*/ {

      /* "re2.pyx":949
 *     cdef object original_pattern = pattern
 *     try:
 *         pattern = prepare_pattern(original_pattern, flags)             # <<<<<<<<<<<<<<
 *     except BackreferencesException:
 *         error_msg = "Backreferences not supported"
 */
      __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__prepare_pattern); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 949; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = PyInt_FromLong(__pyx_v_flags); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 949; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 949; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_7));
      __Pyx_INCREF(__pyx_v_original_pattern);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_original_pattern);
      __Pyx_GIVEREF(__pyx_v_original_pattern);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 949; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_v_pattern);
      __pyx_v_pattern = __pyx_t_1;
      __pyx_t_1 = 0;
    }
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L15_try_end;
    __pyx_L8_error:;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "re2.pyx":950
 *     try:
 *         pattern = prepare_pattern(original_pattern, flags)
 *     except BackreferencesException:             # <<<<<<<<<<<<<<
 *         error_msg = "Backreferences not supported"
 *         if current_notification == <int>FALLBACK_EXCEPTION:
 */
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s_40); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 950; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = PyErr_ExceptionMatches(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_8) {
      __Pyx_AddTraceback("re2._compile");
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_7, &__pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 950; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_2);

      /* "re2.pyx":951
 *         pattern = prepare_pattern(original_pattern, flags)
 *     except BackreferencesException:
 *         error_msg = "Backreferences not supported"             # <<<<<<<<<<<<<<
 *         if current_notification == <int>FALLBACK_EXCEPTION:
 *             # Raise an exception regardless of the type of error.
 */
      __Pyx_INCREF(((PyObject *)__pyx_kp_s_45));
      __Pyx_DECREF(__pyx_v_error_msg);
      __pyx_v_error_msg = ((PyObject *)__pyx_kp_s_45);

      /* "re2.pyx":952
 *     except BackreferencesException:
 *         error_msg = "Backreferences not supported"
 *         if current_notification == <int>FALLBACK_EXCEPTION:             # <<<<<<<<<<<<<<
 *             # Raise an exception regardless of the type of error.
 *             raise RegexError(error_msg)
 */
      __pyx_t_9 = __Pyx_GetName(__pyx_m, __pyx_n_s__FALLBACK_EXCEPTION); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 952; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_8 = __Pyx_PyInt_AsInt(__pyx_t_9); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 952; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_3 = (__pyx_v_3re2_current_notification == __pyx_t_8);
      if (__pyx_t_3) {

        /* "re2.pyx":954
 *         if current_notification == <int>FALLBACK_EXCEPTION:
 *             # Raise an exception regardless of the type of error.
 *             raise RegexError(error_msg)             # <<<<<<<<<<<<<<
 *         elif current_notification == <int>FALLBACK_WARNING:
 *             warnings.warn("WARNING: Using re module. Reason: %s" % error_msg)
 */
        __pyx_t_9 = __Pyx_GetName(__pyx_m, __pyx_n_s__RegexError); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 954; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 954; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_10));
        __Pyx_INCREF(__pyx_v_error_msg);
        PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_error_msg);
        __Pyx_GIVEREF(__pyx_v_error_msg);
        __pyx_t_11 = PyObject_Call(__pyx_t_9, ((PyObject *)__pyx_t_10), NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 954; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(((PyObject *)__pyx_t_10)); __pyx_t_10 = 0;
        __Pyx_Raise(__pyx_t_11, 0, 0);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 954; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
        goto __pyx_L18;
      }

      /* "re2.pyx":955
 *             # Raise an exception regardless of the type of error.
 *             raise RegexError(error_msg)
 *         elif current_notification == <int>FALLBACK_WARNING:             # <<<<<<<<<<<<<<
 *             warnings.warn("WARNING: Using re module. Reason: %s" % error_msg)
 *         return re.compile(original_pattern, flags)
 */
      __pyx_t_11 = __Pyx_GetName(__pyx_m, __pyx_n_s__FALLBACK_WARNING); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 955; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_8 = __Pyx_PyInt_AsInt(__pyx_t_11); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 955; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_3 = (__pyx_v_3re2_current_notification == __pyx_t_8);
      if (__pyx_t_3) {

        /* "re2.pyx":956
 *             raise RegexError(error_msg)
 *         elif current_notification == <int>FALLBACK_WARNING:
 *             warnings.warn("WARNING: Using re module. Reason: %s" % error_msg)             # <<<<<<<<<<<<<<
 *         return re.compile(original_pattern, flags)
 * 
 */
        __pyx_t_11 = __Pyx_GetName(__pyx_m, __pyx_n_s__warnings); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 956; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_10 = PyObject_GetAttr(__pyx_t_11, __pyx_n_s__warn); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 956; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_46), __pyx_v_error_msg); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 956; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_11));
        __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 956; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_9));
        PyTuple_SET_ITEM(__pyx_t_9, 0, ((PyObject *)__pyx_t_11));
        __Pyx_GIVEREF(((PyObject *)__pyx_t_11));
        __pyx_t_11 = 0;
        __pyx_t_11 = PyObject_Call(__pyx_t_10, ((PyObject *)__pyx_t_9), NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 956; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(((PyObject *)__pyx_t_9)); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        goto __pyx_L18;
      }
      __pyx_L18:;

      /* "re2.pyx":957
 *         elif current_notification == <int>FALLBACK_WARNING:
 *             warnings.warn("WARNING: Using re module. Reason: %s" % error_msg)
 *         return re.compile(original_pattern, flags)             # <<<<<<<<<<<<<<
 * 
 *     # Set the options given the flags above.
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_11 = __Pyx_GetName(__pyx_m, __pyx_n_s__re); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 957; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_9 = PyObject_GetAttr(__pyx_t_11, __pyx_n_s__compile); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 957; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = PyInt_FromLong(__pyx_v_flags); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 957; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 957; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_10));
      __Pyx_INCREF(__pyx_v_original_pattern);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_original_pattern);
      __Pyx_GIVEREF(__pyx_v_original_pattern);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_11);
      __pyx_t_11 = 0;
      __pyx_t_11 = PyObject_Call(__pyx_t_9, ((PyObject *)__pyx_t_10), NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 957; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_10)); __pyx_t_10 = 0;
      __pyx_r = __pyx_t_11;
      __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L11_except_return;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L9_exception_handled;
    }
    __pyx_L10_except_error:;
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
    goto __pyx_L1_error;
    __pyx_L11_except_return:;
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
    goto __pyx_L0;
    __pyx_L9_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
    __pyx_L15_try_end:;
  }

  /* "re2.pyx":960
 * 
 *     # Set the options given the flags above.
 *     if flags & _I:             # <<<<<<<<<<<<<<
 *         opts.set_case_sensitive(0);
 * 
 */
  __pyx_t_8 = (__pyx_v_flags & __pyx_v_3re2__I);
  if (__pyx_t_8) {

    /* "re2.pyx":961
 *     # Set the options given the flags above.
 *     if flags & _I:
 *         opts.set_case_sensitive(0);             # <<<<<<<<<<<<<<
 * 
 *     opts.set_max_mem(max_mem)
 */
    __pyx_v_opts.set_case_sensitive(0);
    goto __pyx_L19;
  }
  __pyx_L19:;

  /* "re2.pyx":963
 *         opts.set_case_sensitive(0);
 * 
 *     opts.set_max_mem(max_mem)             # <<<<<<<<<<<<<<
 *     opts.set_log_errors(0)
 *     opts.set_encoding(_re2.EncodingUTF8)
 */
  __pyx_v_opts.set_max_mem(__pyx_v_max_mem);

  /* "re2.pyx":964
 * 
 *     opts.set_max_mem(max_mem)
 *     opts.set_log_errors(0)             # <<<<<<<<<<<<<<
 *     opts.set_encoding(_re2.EncodingUTF8)
 * 
 */
  __pyx_v_opts.set_log_errors(0);

  /* "re2.pyx":965
 *     opts.set_max_mem(max_mem)
 *     opts.set_log_errors(0)
 *     opts.set_encoding(_re2.EncodingUTF8)             # <<<<<<<<<<<<<<
 * 
 *     # We use this function to get the proper length of the string.
 */
  __pyx_v_opts.set_encoding(RE2::Options::EncodingUTF8);

  /* "re2.pyx":969
 *     # We use this function to get the proper length of the string.
 * 
 *     pattern = unicode_to_bytestring(pattern, &encoded)             # <<<<<<<<<<<<<<
 *     if pystring_to_bytestring(pattern, &string, &length) == -1:
 *         raise TypeError("first argument must be a string or compiled pattern")
 */
  __pyx_t_2 = __pyx_f_3re2_unicode_to_bytestring(__pyx_v_pattern, (&__pyx_v_encoded)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 969; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_v_pattern);
  __pyx_v_pattern = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "re2.pyx":970
 * 
 *     pattern = unicode_to_bytestring(pattern, &encoded)
 *     if pystring_to_bytestring(pattern, &string, &length) == -1:             # <<<<<<<<<<<<<<
 *         raise TypeError("first argument must be a string or compiled pattern")
 * 
 */
  __pyx_t_3 = (__pyx_f_3re2_pystring_to_bytestring(__pyx_v_pattern, (&__pyx_v_string), (&__pyx_v_length)) == -1);
  if (__pyx_t_3) {

    /* "re2.pyx":971
 *     pattern = unicode_to_bytestring(pattern, &encoded)
 *     if pystring_to_bytestring(pattern, &string, &length) == -1:
 *         raise TypeError("first argument must be a string or compiled pattern")             # <<<<<<<<<<<<<<
 * 
 *     s = new _re2.StringPiece(string, length)
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_TypeError, ((PyObject *)__pyx_k_tuple_48), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L20;
  }
  __pyx_L20:;

  /* "re2.pyx":973
 *         raise TypeError("first argument must be a string or compiled pattern")
 * 
 *     s = new _re2.StringPiece(string, length)             # <<<<<<<<<<<<<<
 * 
 *     cdef _re2.RE2 * re_pattern = new _re2.RE2(s[0], opts)
 */
  __pyx_v_s = new re2::StringPiece(__pyx_v_string, __pyx_v_length);

  /* "re2.pyx":975
 *     s = new _re2.StringPiece(string, length)
 * 
 *     cdef _re2.RE2 * re_pattern = new _re2.RE2(s[0], opts)             # <<<<<<<<<<<<<<
 *     if not re_pattern.ok():
 *         # Something went wrong with the compilation.
 */
  __pyx_v_re_pattern = new re2::RE2((__pyx_v_s[0]), __pyx_v_opts);

  /* "re2.pyx":976
 * 
 *     cdef _re2.RE2 * re_pattern = new _re2.RE2(s[0], opts)
 *     if not re_pattern.ok():             # <<<<<<<<<<<<<<
 *         # Something went wrong with the compilation.
 *         del s
 */
  __pyx_t_3 = (!__pyx_v_re_pattern->ok());
  if (__pyx_t_3) {

    /* "re2.pyx":978
 *     if not re_pattern.ok():
 *         # Something went wrong with the compilation.
 *         del s             # <<<<<<<<<<<<<<
 *         error_msg = cpp_to_pystring(re_pattern.error())
 *         error_code = re_pattern.error_code()
 */
    delete __pyx_v_s;

    /* "re2.pyx":979
 *         # Something went wrong with the compilation.
 *         del s
 *         error_msg = cpp_to_pystring(re_pattern.error())             # <<<<<<<<<<<<<<
 *         error_code = re_pattern.error_code()
 *         del re_pattern
 */
    __pyx_t_2 = __pyx_f_3re2_cpp_to_pystring(__pyx_v_re_pattern->error()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 979; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_v_error_msg);
    __pyx_v_error_msg = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "re2.pyx":980
 *         del s
 *         error_msg = cpp_to_pystring(re_pattern.error())
 *         error_code = re_pattern.error_code()             # <<<<<<<<<<<<<<
 *         del re_pattern
 *         if current_notification == <int>FALLBACK_EXCEPTION:
 */
    __pyx_v_error_code = __pyx_v_re_pattern->error_code();

    /* "re2.pyx":981
 *         error_msg = cpp_to_pystring(re_pattern.error())
 *         error_code = re_pattern.error_code()
 *         del re_pattern             # <<<<<<<<<<<<<<
 *         if current_notification == <int>FALLBACK_EXCEPTION:
 *             # Raise an exception regardless of the type of error.
 */
    delete __pyx_v_re_pattern;

    /* "re2.pyx":982
 *         error_code = re_pattern.error_code()
 *         del re_pattern
 *         if current_notification == <int>FALLBACK_EXCEPTION:             # <<<<<<<<<<<<<<
 *             # Raise an exception regardless of the type of error.
 *             raise RegexError(error_msg)
 */
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__FALLBACK_EXCEPTION); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = __Pyx_PyInt_AsInt(__pyx_t_2); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = (__pyx_v_3re2_current_notification == __pyx_t_8);
    if (__pyx_t_3) {

      /* "re2.pyx":984
 *         if current_notification == <int>FALLBACK_EXCEPTION:
 *             # Raise an exception regardless of the type of error.
 *             raise RegexError(error_msg)             # <<<<<<<<<<<<<<
 *         elif error_code not in (_re2.ErrorBadPerlOp, _re2.ErrorRepeatSize,
 *                                 _re2.ErrorBadEscape):
 */
      __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__RegexError); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_7));
      __Pyx_INCREF(__pyx_v_error_msg);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_error_msg);
      __Pyx_GIVEREF(__pyx_v_error_msg);
      __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L22;
    }

    /* "re2.pyx":985
 *             # Raise an exception regardless of the type of error.
 *             raise RegexError(error_msg)
 *         elif error_code not in (_re2.ErrorBadPerlOp, _re2.ErrorRepeatSize,             # <<<<<<<<<<<<<<
 *                                 _re2.ErrorBadEscape):
 *             # Raise an error because these will not be fixed by using the
 */
    __pyx_t_8 = __pyx_v_error_code;
    if ((__pyx_t_8 != RE2::ErrorBadPerlOp)) {
      __pyx_t_3 = (__pyx_t_8 != RE2::ErrorRepeatSize);
    } else {
      __pyx_t_3 = (__pyx_t_8 != RE2::ErrorBadPerlOp);
    }
    if (__pyx_t_3) {

      /* "re2.pyx":986
 *             raise RegexError(error_msg)
 *         elif error_code not in (_re2.ErrorBadPerlOp, _re2.ErrorRepeatSize,
 *                                 _re2.ErrorBadEscape):             # <<<<<<<<<<<<<<
 *             # Raise an error because these will not be fixed by using the
 *             # ``re`` module.
 */
      __pyx_t_12 = (__pyx_t_8 != RE2::ErrorBadEscape);
    } else {
      __pyx_t_12 = __pyx_t_3;
    }
    __pyx_t_3 = __pyx_t_12;
    if (__pyx_t_3) {

      /* "re2.pyx":989
 *             # Raise an error because these will not be fixed by using the
 *             # ``re`` module.
 *             raise RegexError(error_msg)             # <<<<<<<<<<<<<<
 *         elif current_notification == <int>FALLBACK_WARNING:
 *             warnings.warn("WARNING: Using re module. Reason: %s" % error_msg)
 */
      __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__RegexError); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 989; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 989; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_7));
      __Pyx_INCREF(__pyx_v_error_msg);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_error_msg);
      __Pyx_GIVEREF(__pyx_v_error_msg);
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 989; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 989; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L22;
    }

    /* "re2.pyx":990
 *             # ``re`` module.
 *             raise RegexError(error_msg)
 *         elif current_notification == <int>FALLBACK_WARNING:             # <<<<<<<<<<<<<<
 *             warnings.warn("WARNING: Using re module. Reason: %s" % error_msg)
 *         return re.compile(original_pattern, flags)
 */
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__FALLBACK_WARNING); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 990; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = __Pyx_PyInt_AsInt(__pyx_t_2); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 990; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = (__pyx_v_3re2_current_notification == __pyx_t_8);
    if (__pyx_t_3) {

      /* "re2.pyx":991
 *             raise RegexError(error_msg)
 *         elif current_notification == <int>FALLBACK_WARNING:
 *             warnings.warn("WARNING: Using re module. Reason: %s" % error_msg)             # <<<<<<<<<<<<<<
 *         return re.compile(original_pattern, flags)
 * 
 */
      __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__warnings); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__warn); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_46), __pyx_v_error_msg); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_2));
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_1));
      PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_t_2));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_t_7, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L22;
    }
    __pyx_L22:;

    /* "re2.pyx":992
 *         elif current_notification == <int>FALLBACK_WARNING:
 *             warnings.warn("WARNING: Using re module. Reason: %s" % error_msg)
 *         return re.compile(original_pattern, flags)             # <<<<<<<<<<<<<<
 * 
 *     cdef Pattern pypattern = Pattern()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__re); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 992; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__compile); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 992; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyInt_FromLong(__pyx_v_flags); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 992; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 992; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_7));
    __Pyx_INCREF(__pyx_v_original_pattern);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_original_pattern);
    __Pyx_GIVEREF(__pyx_v_original_pattern);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 992; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L21;
  }
  __pyx_L21:;

  /* "re2.pyx":994
 *         return re.compile(original_pattern, flags)
 * 
 *     cdef Pattern pypattern = Pattern()             # <<<<<<<<<<<<<<
 *     pypattern.pattern = original_pattern
 *     pypattern.re_pattern = re_pattern
 */
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_3re2_Pattern)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 994; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_pypattern = ((struct __pyx_obj_3re2_Pattern *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "re2.pyx":995
 * 
 *     cdef Pattern pypattern = Pattern()
 *     pypattern.pattern = original_pattern             # <<<<<<<<<<<<<<
 *     pypattern.re_pattern = re_pattern
 *     pypattern.ngroups = re_pattern.NumberOfCapturingGroups()
 */
  __Pyx_INCREF(__pyx_v_original_pattern);
  __Pyx_GIVEREF(__pyx_v_original_pattern);
  __Pyx_GOTREF(__pyx_v_pypattern->pattern);
  __Pyx_DECREF(__pyx_v_pypattern->pattern);
  __pyx_v_pypattern->pattern = __pyx_v_original_pattern;

  /* "re2.pyx":996
 *     cdef Pattern pypattern = Pattern()
 *     pypattern.pattern = original_pattern
 *     pypattern.re_pattern = re_pattern             # <<<<<<<<<<<<<<
 *     pypattern.ngroups = re_pattern.NumberOfCapturingGroups()
 *     pypattern.encoded = <bint>encoded
 */
  __pyx_v_pypattern->re_pattern = __pyx_v_re_pattern;

  /* "re2.pyx":997
 *     pypattern.pattern = original_pattern
 *     pypattern.re_pattern = re_pattern
 *     pypattern.ngroups = re_pattern.NumberOfCapturingGroups()             # <<<<<<<<<<<<<<
 *     pypattern.encoded = <bint>encoded
 *     pypattern._flags = flags
 */
  __pyx_v_pypattern->ngroups = __pyx_v_re_pattern->NumberOfCapturingGroups();

  /* "re2.pyx":998
 *     pypattern.re_pattern = re_pattern
 *     pypattern.ngroups = re_pattern.NumberOfCapturingGroups()
 *     pypattern.encoded = <bint>encoded             # <<<<<<<<<<<<<<
 *     pypattern._flags = flags
 *     del s
 */
  __pyx_v_pypattern->encoded = ((int)__pyx_v_encoded);

  /* "re2.pyx":999
 *     pypattern.ngroups = re_pattern.NumberOfCapturingGroups()
 *     pypattern.encoded = <bint>encoded
 *     pypattern._flags = flags             # <<<<<<<<<<<<<<
 *     del s
 *     return pypattern
 */
  __pyx_v_pypattern->_flags = __pyx_v_flags;

  /* "re2.pyx":1000
 *     pypattern.encoded = <bint>encoded
 *     pypattern._flags = flags
 *     del s             # <<<<<<<<<<<<<<
 *     return pypattern
 * 
 */
  delete __pyx_v_s;

  /* "re2.pyx":1001
 *     pypattern._flags = flags
 *     del s
 *     return pypattern             # <<<<<<<<<<<<<<
 * 
 * def search(pattern, string, int flags=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_pypattern));
  __pyx_r = ((PyObject *)__pyx_v_pypattern);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("re2._compile");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_original_pattern);
  __Pyx_DECREF(__pyx_v_error_msg);
  __Pyx_XDECREF((PyObject *)__pyx_v_pypattern);
  __Pyx_DECREF(__pyx_v_pattern);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":1003
 *     return pypattern
 * 
 * def search(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """
 *     Scan through string looking for a match to the pattern, returning
 */

static PyObject *__pyx_pf_3re2_5search(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_5search[] = "\n    Scan through string looking for a match to the pattern, returning\n    a match object or none if no match was found.\n    ";
static PyMethodDef __pyx_mdef_3re2_5search = {__Pyx_NAMESTR("search"), (PyCFunction)__pyx_pf_3re2_5search, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_3re2_5search)};
static PyObject *__pyx_pf_3re2_5search(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pattern = 0;
  PyObject *__pyx_v_string = 0;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannyDeclarations
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__pattern,&__pyx_n_s__string,&__pyx_n_s__flags,0};
  __Pyx_RefNannySetupContext("search");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pattern);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__string);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("search", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1003; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__flags);
        if (value) { values[2] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "search") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1003; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_pattern = values[0];
    __pyx_v_string = values[1];
    if (values[2]) {
      __pyx_v_flags = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1003; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_flags = ((int)0);
    }
  } else {
    __pyx_v_flags = ((int)0);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3:
      __pyx_v_flags = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1003; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  2:
      __pyx_v_string = PyTuple_GET_ITEM(__pyx_args, 1);
      __pyx_v_pattern = PyTuple_GET_ITEM(__pyx_args, 0);
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("search", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1003; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.search");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "re2.pyx":1008
 *     a match object or none if no match was found.
 *     """
 *     return compile(pattern, flags).search(string)             # <<<<<<<<<<<<<<
 * 
 * def match(pattern, string, int flags=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__compile); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_flags); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_INCREF(__pyx_v_pattern);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_pattern);
  __Pyx_GIVEREF(__pyx_v_pattern);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__search); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_v_string);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_string);
  __Pyx_GIVEREF(__pyx_v_string);
  __pyx_t_1 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("re2.search");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":1010
 *     return compile(pattern, flags).search(string)
 * 
 * def match(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """
 *     Try to apply the pattern at the start of the string, returning
 */

static PyObject *__pyx_pf_3re2_6match(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_6match[] = "\n    Try to apply the pattern at the start of the string, returning\n    a match object, or None if no match was found.\n    ";
static PyMethodDef __pyx_mdef_3re2_6match = {__Pyx_NAMESTR("match"), (PyCFunction)__pyx_pf_3re2_6match, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_3re2_6match)};
static PyObject *__pyx_pf_3re2_6match(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pattern = 0;
  PyObject *__pyx_v_string = 0;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannyDeclarations
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__pattern,&__pyx_n_s__string,&__pyx_n_s__flags,0};
  __Pyx_RefNannySetupContext("match");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pattern);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__string);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("match", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1010; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__flags);
        if (value) { values[2] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "match") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1010; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_pattern = values[0];
    __pyx_v_string = values[1];
    if (values[2]) {
      __pyx_v_flags = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1010; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_flags = ((int)0);
    }
  } else {
    __pyx_v_flags = ((int)0);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3:
      __pyx_v_flags = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1010; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  2:
      __pyx_v_string = PyTuple_GET_ITEM(__pyx_args, 1);
      __pyx_v_pattern = PyTuple_GET_ITEM(__pyx_args, 0);
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("match", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1010; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.match");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "re2.pyx":1015
 *     a match object, or None if no match was found.
 *     """
 *     return compile(pattern, flags).match(string)             # <<<<<<<<<<<<<<
 * 
 * def finditer(pattern, string, int flags=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__compile); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1015; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_flags); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1015; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1015; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_INCREF(__pyx_v_pattern);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_pattern);
  __Pyx_GIVEREF(__pyx_v_pattern);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1015; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__match); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1015; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1015; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_v_string);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_string);
  __Pyx_GIVEREF(__pyx_v_string);
  __pyx_t_1 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1015; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("re2.match");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":1017
 *     return compile(pattern, flags).match(string)
 * 
 * def finditer(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """
 *     Return an list of all non-overlapping matches in the
 */

static PyObject *__pyx_pf_3re2_7finditer(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_7finditer[] = "\n    Return an list of all non-overlapping matches in the\n    string.  For each match, the iterator returns a match object.\n\n    Empty matches are included in the result.\n    ";
static PyMethodDef __pyx_mdef_3re2_7finditer = {__Pyx_NAMESTR("finditer"), (PyCFunction)__pyx_pf_3re2_7finditer, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_3re2_7finditer)};
static PyObject *__pyx_pf_3re2_7finditer(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pattern = 0;
  PyObject *__pyx_v_string = 0;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannyDeclarations
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__pattern,&__pyx_n_s__string,&__pyx_n_s__flags,0};
  __Pyx_RefNannySetupContext("finditer");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pattern);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__string);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("finditer", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1017; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__flags);
        if (value) { values[2] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "finditer") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1017; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_pattern = values[0];
    __pyx_v_string = values[1];
    if (values[2]) {
      __pyx_v_flags = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1017; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_flags = ((int)0);
    }
  } else {
    __pyx_v_flags = ((int)0);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3:
      __pyx_v_flags = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1017; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  2:
      __pyx_v_string = PyTuple_GET_ITEM(__pyx_args, 1);
      __pyx_v_pattern = PyTuple_GET_ITEM(__pyx_args, 0);
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("finditer", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1017; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.finditer");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "re2.pyx":1024
 *     Empty matches are included in the result.
 *     """
 *     return compile(pattern, flags).finditer(string)             # <<<<<<<<<<<<<<
 * 
 * def findall(pattern, string, int flags=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__compile); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1024; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_flags); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1024; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1024; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_INCREF(__pyx_v_pattern);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_pattern);
  __Pyx_GIVEREF(__pyx_v_pattern);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1024; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__finditer); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1024; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1024; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_v_string);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_string);
  __Pyx_GIVEREF(__pyx_v_string);
  __pyx_t_1 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1024; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("re2.finditer");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":1026
 *     return compile(pattern, flags).finditer(string)
 * 
 * def findall(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """
 *     Return an list of all non-overlapping matches in the
 */

static PyObject *__pyx_pf_3re2_8findall(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_8findall[] = "\n    Return an list of all non-overlapping matches in the\n    string.  For each match, the iterator returns a match object.\n\n    Empty matches are included in the result.\n    ";
static PyMethodDef __pyx_mdef_3re2_8findall = {__Pyx_NAMESTR("findall"), (PyCFunction)__pyx_pf_3re2_8findall, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_3re2_8findall)};
static PyObject *__pyx_pf_3re2_8findall(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pattern = 0;
  PyObject *__pyx_v_string = 0;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannyDeclarations
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__pattern,&__pyx_n_s__string,&__pyx_n_s__flags,0};
  __Pyx_RefNannySetupContext("findall");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pattern);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__string);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("findall", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1026; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__flags);
        if (value) { values[2] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "findall") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1026; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_pattern = values[0];
    __pyx_v_string = values[1];
    if (values[2]) {
      __pyx_v_flags = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1026; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_flags = ((int)0);
    }
  } else {
    __pyx_v_flags = ((int)0);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3:
      __pyx_v_flags = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1026; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  2:
      __pyx_v_string = PyTuple_GET_ITEM(__pyx_args, 1);
      __pyx_v_pattern = PyTuple_GET_ITEM(__pyx_args, 0);
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("findall", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1026; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.findall");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "re2.pyx":1033
 *     Empty matches are included in the result.
 *     """
 *     return compile(pattern, flags).findall(string)             # <<<<<<<<<<<<<<
 * 
 * def split(pattern, string, int maxsplit=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__compile); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1033; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_flags); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1033; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1033; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_INCREF(__pyx_v_pattern);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_pattern);
  __Pyx_GIVEREF(__pyx_v_pattern);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1033; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__findall); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1033; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1033; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_v_string);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_string);
  __Pyx_GIVEREF(__pyx_v_string);
  __pyx_t_1 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1033; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("re2.findall");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":1035
 *     return compile(pattern, flags).findall(string)
 * 
 * def split(pattern, string, int maxsplit=0):             # <<<<<<<<<<<<<<
 *     """
 *     Split the source string by the occurrences of the pattern,
 */

static PyObject *__pyx_pf_3re2_9split(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_9split[] = "\n    Split the source string by the occurrences of the pattern,\n    returning a list containing the resulting substrings.\n    ";
static PyMethodDef __pyx_mdef_3re2_9split = {__Pyx_NAMESTR("split"), (PyCFunction)__pyx_pf_3re2_9split, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_3re2_9split)};
static PyObject *__pyx_pf_3re2_9split(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pattern = 0;
  PyObject *__pyx_v_string = 0;
  int __pyx_v_maxsplit;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannyDeclarations
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__pattern,&__pyx_n_s__string,&__pyx_n_s__maxsplit,0};
  __Pyx_RefNannySetupContext("split");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pattern);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__string);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("split", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1035; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__maxsplit);
        if (value) { values[2] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "split") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1035; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_pattern = values[0];
    __pyx_v_string = values[1];
    if (values[2]) {
      __pyx_v_maxsplit = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_maxsplit == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1035; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_maxsplit = ((int)0);
    }
  } else {
    __pyx_v_maxsplit = ((int)0);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3:
      __pyx_v_maxsplit = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_maxsplit == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1035; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  2:
      __pyx_v_string = PyTuple_GET_ITEM(__pyx_args, 1);
      __pyx_v_pattern = PyTuple_GET_ITEM(__pyx_args, 0);
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("split", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1035; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.split");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "re2.pyx":1040
 *     returning a list containing the resulting substrings.
 *     """
 *     return compile(pattern).split(string, maxsplit)             # <<<<<<<<<<<<<<
 * 
 * def sub(pattern, repl, string, int count=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__compile); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1040; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1040; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_v_pattern);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_pattern);
  __Pyx_GIVEREF(__pyx_v_pattern);
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1040; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__split); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1040; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyInt_FromLong(__pyx_v_maxsplit); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1040; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1040; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_string);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_string);
  __Pyx_GIVEREF(__pyx_v_string);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1040; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("re2.split");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":1042
 *     return compile(pattern).split(string, maxsplit)
 * 
 * def sub(pattern, repl, string, int count=0):             # <<<<<<<<<<<<<<
 *     """
 *     Return the string obtained by replacing the leftmost
 */

static PyObject *__pyx_pf_3re2_10sub(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_10sub[] = "\n    Return the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in string by the\n    replacement repl.  repl can be either a string or a callable;\n    if a string, backslash escapes in it are processed.  If it is\n    a callable, it's passed the match object and must return\n    a replacement string to be used.\n    ";
static PyMethodDef __pyx_mdef_3re2_10sub = {__Pyx_NAMESTR("sub"), (PyCFunction)__pyx_pf_3re2_10sub, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_3re2_10sub)};
static PyObject *__pyx_pf_3re2_10sub(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pattern = 0;
  PyObject *__pyx_v_repl = 0;
  PyObject *__pyx_v_string = 0;
  int __pyx_v_count;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannyDeclarations
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__pattern,&__pyx_n_s__repl,&__pyx_n_s__string,&__pyx_n_s__count,0};
  __Pyx_RefNannySetupContext("sub");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pattern);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__repl);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("sub", 0, 3, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1042; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__string);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("sub", 0, 3, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1042; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__count);
        if (value) { values[3] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "sub") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1042; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_pattern = values[0];
    __pyx_v_repl = values[1];
    __pyx_v_string = values[2];
    if (values[3]) {
      __pyx_v_count = __Pyx_PyInt_AsInt(values[3]); if (unlikely((__pyx_v_count == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1042; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_count = ((int)0);
    }
  } else {
    __pyx_v_count = ((int)0);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4:
      __pyx_v_count = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely((__pyx_v_count == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1042; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  3:
      __pyx_v_string = PyTuple_GET_ITEM(__pyx_args, 2);
      __pyx_v_repl = PyTuple_GET_ITEM(__pyx_args, 1);
      __pyx_v_pattern = PyTuple_GET_ITEM(__pyx_args, 0);
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sub", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1042; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.sub");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "re2.pyx":1051
 *     a replacement string to be used.
 *     """
 *     return compile(pattern).sub(repl, string, count)             # <<<<<<<<<<<<<<
 * 
 * def subn(pattern, repl, string, int count=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__compile); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1051; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1051; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_v_pattern);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_pattern);
  __Pyx_GIVEREF(__pyx_v_pattern);
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1051; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__sub); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1051; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyInt_FromLong(__pyx_v_count); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1051; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1051; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_repl);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_repl);
  __Pyx_GIVEREF(__pyx_v_repl);
  __Pyx_INCREF(__pyx_v_string);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_string);
  __Pyx_GIVEREF(__pyx_v_string);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1051; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("re2.sub");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":1053
 *     return compile(pattern).sub(repl, string, count)
 * 
 * def subn(pattern, repl, string, int count=0):             # <<<<<<<<<<<<<<
 *     """
 *     Return a 2-tuple containing (new_string, number).
 */

static PyObject *__pyx_pf_3re2_11subn(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_11subn[] = "\n    Return a 2-tuple containing (new_string, number).\n    new_string is the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in the source\n    string by the replacement repl.  number is the number of\n    substitutions that were made. repl can be either a string or a\n    callable; if a string, backslash escapes in it are processed.\n    If it is a callable, it's passed the match object and must\n    return a replacement string to be used.\n    ";
static PyMethodDef __pyx_mdef_3re2_11subn = {__Pyx_NAMESTR("subn"), (PyCFunction)__pyx_pf_3re2_11subn, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_3re2_11subn)};
static PyObject *__pyx_pf_3re2_11subn(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pattern = 0;
  PyObject *__pyx_v_repl = 0;
  PyObject *__pyx_v_string = 0;
  int __pyx_v_count;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannyDeclarations
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__pattern,&__pyx_n_s__repl,&__pyx_n_s__string,&__pyx_n_s__count,0};
  __Pyx_RefNannySetupContext("subn");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pattern);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__repl);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("subn", 0, 3, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1053; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__string);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("subn", 0, 3, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1053; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__count);
        if (value) { values[3] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "subn") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1053; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_pattern = values[0];
    __pyx_v_repl = values[1];
    __pyx_v_string = values[2];
    if (values[3]) {
      __pyx_v_count = __Pyx_PyInt_AsInt(values[3]); if (unlikely((__pyx_v_count == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1053; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_count = ((int)0);
    }
  } else {
    __pyx_v_count = ((int)0);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4:
      __pyx_v_count = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely((__pyx_v_count == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1053; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  3:
      __pyx_v_string = PyTuple_GET_ITEM(__pyx_args, 2);
      __pyx_v_repl = PyTuple_GET_ITEM(__pyx_args, 1);
      __pyx_v_pattern = PyTuple_GET_ITEM(__pyx_args, 0);
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("subn", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1053; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.subn");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "re2.pyx":1064
 *     return a replacement string to be used.
 *     """
 *     return compile(pattern).subn(repl, string, count)             # <<<<<<<<<<<<<<
 * 
 * _alphanum = {}
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__compile); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1064; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1064; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_v_pattern);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_pattern);
  __Pyx_GIVEREF(__pyx_v_pattern);
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1064; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__subn); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1064; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyInt_FromLong(__pyx_v_count); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1064; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1064; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_repl);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_repl);
  __Pyx_GIVEREF(__pyx_v_repl);
  __Pyx_INCREF(__pyx_v_string);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_string);
  __Pyx_GIVEREF(__pyx_v_string);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1064; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("re2.subn");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":1071
 * del c
 * 
 * def escape(pattern):             # <<<<<<<<<<<<<<
 *     "Escape all non-alphanumeric characters in pattern."
 *     s = list(pattern)
 */

static PyObject *__pyx_pf_3re2_12escape(PyObject *__pyx_self, PyObject *__pyx_v_pattern); /*proto*/
static char __pyx_doc_3re2_12escape[] = "Escape all non-alphanumeric characters in pattern.";
static PyMethodDef __pyx_mdef_3re2_12escape = {__Pyx_NAMESTR("escape"), (PyCFunction)__pyx_pf_3re2_12escape, METH_O, __Pyx_DOCSTR(__pyx_doc_3re2_12escape)};
static PyObject *__pyx_pf_3re2_12escape(PyObject *__pyx_self, PyObject *__pyx_v_pattern) {
  PyObject *__pyx_v_s;
  PyObject *__pyx_v_alphanum;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_c;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("escape");
  __pyx_self = __pyx_self;
  __pyx_v_s = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_alphanum = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_c = Py_None; __Pyx_INCREF(Py_None);

  /* "re2.pyx":1073
 * def escape(pattern):
 *     "Escape all non-alphanumeric characters in pattern."
 *     s = list(pattern)             # <<<<<<<<<<<<<<
 *     alphanum = _alphanum
 *     for i in range(len(pattern)):
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1073; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_pattern);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_pattern);
  __Pyx_GIVEREF(__pyx_v_pattern);
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)(&PyList_Type))), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1073; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_v_s));
  __pyx_v_s = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "re2.pyx":1074
 *     "Escape all non-alphanumeric characters in pattern."
 *     s = list(pattern)
 *     alphanum = _alphanum             # <<<<<<<<<<<<<<
 *     for i in range(len(pattern)):
 *         c = pattern[i]
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s___alphanum); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_v_alphanum);
  __pyx_v_alphanum = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "re2.pyx":1075
 *     s = list(pattern)
 *     alphanum = _alphanum
 *     for i in range(len(pattern)):             # <<<<<<<<<<<<<<
 *         c = pattern[i]
 *         if ord(c) < 0x80 and c not in alphanum:
 */
  __pyx_t_3 = PyObject_Length(__pyx_v_pattern); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "re2.pyx":1076
 *     alphanum = _alphanum
 *     for i in range(len(pattern)):
 *         c = pattern[i]             # <<<<<<<<<<<<<<
 *         if ord(c) < 0x80 and c not in alphanum:
 *             if c == "\000":
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_pattern, __pyx_v_i, sizeof(Py_ssize_t), PyInt_FromSsize_t); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1076; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_v_c);
    __pyx_v_c = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "re2.pyx":1077
 *     for i in range(len(pattern)):
 *         c = pattern[i]
 *         if ord(c) < 0x80 and c not in alphanum:             # <<<<<<<<<<<<<<
 *             if c == "\000":
 *                 s[i] = "\\000"
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1077; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    __Pyx_INCREF(__pyx_v_c);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_c);
    __Pyx_GIVEREF(__pyx_v_c);
    __pyx_t_1 = PyObject_Call(__pyx_builtin_ord, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1077; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_128, Py_LT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1077; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1077; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_5) {
      __pyx_t_6 = (__Pyx_NegateNonNeg(PySequence_Contains(__pyx_v_alphanum, __pyx_v_c))); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1077; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_7 = __pyx_t_6;
    } else {
      __pyx_t_7 = __pyx_t_5;
    }
    if (__pyx_t_7) {

      /* "re2.pyx":1078
 *         c = pattern[i]
 *         if ord(c) < 0x80 and c not in alphanum:
 *             if c == "\000":             # <<<<<<<<<<<<<<
 *                 s[i] = "\\000"
 *             else:
 */
      __pyx_t_2 = PyObject_RichCompare(__pyx_v_c, ((PyObject *)__pyx_kp_s_9), Py_EQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1078; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1078; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_7) {

        /* "re2.pyx":1079
 *         if ord(c) < 0x80 and c not in alphanum:
 *             if c == "\000":
 *                 s[i] = "\\000"             # <<<<<<<<<<<<<<
 *             else:
 *                 s[i] = "\\" + c
 */
        if (__Pyx_SetItemInt(((PyObject *)__pyx_v_s), __pyx_v_i, ((PyObject *)__pyx_kp_s_50), sizeof(Py_ssize_t), PyInt_FromSsize_t) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1079; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        goto __pyx_L8;
      }
      /*else*/ {

        /* "re2.pyx":1081
 *                 s[i] = "\\000"
 *             else:
 *                 s[i] = "\\" + c             # <<<<<<<<<<<<<<
 *     return pattern[:0].join(s)
 * 
 */
        __pyx_t_2 = PyNumber_Add(((PyObject *)__pyx_kp_s_7), __pyx_v_c); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1081; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        if (__Pyx_SetItemInt(((PyObject *)__pyx_v_s), __pyx_v_i, __pyx_t_2, sizeof(Py_ssize_t), PyInt_FromSsize_t) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1081; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __pyx_L8:;
      goto __pyx_L7;
    }
    __pyx_L7:;
  }

  /* "re2.pyx":1082
 *             else:
 *                 s[i] = "\\" + c
 *     return pattern[:0].join(s)             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PySequence_GetSlice(__pyx_v_pattern, 0, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1082; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__join); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1082; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1082; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(((PyObject *)__pyx_v_s));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_s));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_s));
  __pyx_t_8 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1082; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("re2.escape");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_s);
  __Pyx_DECREF(__pyx_v_alphanum);
  __Pyx_DECREF(__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_3re2_Match __pyx_vtable_3re2_Match;

static PyObject *__pyx_tp_new_3re2_Match(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_3re2_Match *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_3re2_Match *)o);
  p->__pyx_vtab = __pyx_vtabptr_3re2_Match;
  p->match_string = Py_None; Py_INCREF(Py_None);
  p->_pattern_object = Py_None; Py_INCREF(Py_None);
  p->_groups = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_spans = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_named_groups = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_named_indexes = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_3re2_Match(PyObject *o) {
  struct __pyx_obj_3re2_Match *p = (struct __pyx_obj_3re2_Match *)o;
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_3re2_5Match_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_XDECREF(p->match_string);
  Py_XDECREF(p->_pattern_object);
  Py_XDECREF(((PyObject *)p->_groups));
  Py_XDECREF(((PyObject *)p->_spans));
  Py_XDECREF(((PyObject *)p->_named_groups));
  Py_XDECREF(((PyObject *)p->_named_indexes));
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_3re2_Match(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3re2_Match *p = (struct __pyx_obj_3re2_Match *)o;
  if (p->match_string) {
    e = (*v)(p->match_string, a); if (e) return e;
  }
  if (p->_pattern_object) {
    e = (*v)(p->_pattern_object, a); if (e) return e;
  }
  if (p->_groups) {
    e = (*v)(p->_groups, a); if (e) return e;
  }
  if (p->_spans) {
    e = (*v)(p->_spans, a); if (e) return e;
  }
  if (p->_named_groups) {
    e = (*v)(p->_named_groups, a); if (e) return e;
  }
  if (p->_named_indexes) {
    e = (*v)(p->_named_indexes, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3re2_Match(PyObject *o) {
  struct __pyx_obj_3re2_Match *p = (struct __pyx_obj_3re2_Match *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->match_string);
  p->match_string = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_pattern_object);
  p->_pattern_object = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_groups);
  p->_groups = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_spans);
  p->_spans = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_named_groups);
  p->_named_groups = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_named_indexes);
  p->_named_indexes = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_3re2_5Match_re(PyObject *o, void *x) {
  return __pyx_pf_3re2_5Match_2re___get__(o);
}

static PyObject *__pyx_getprop_3re2_5Match_pos(PyObject *o, void *x) {
  return __pyx_pf_3re2_5Match_3pos___get__(o);
}

static PyObject *__pyx_getprop_3re2_5Match_endpos(PyObject *o, void *x) {
  return __pyx_pf_3re2_5Match_6endpos___get__(o);
}

static PyObject *__pyx_getprop_3re2_5Match_string(PyObject *o, void *x) {
  return __pyx_pf_3re2_5Match_6string___get__(o);
}

static PyObject *__pyx_getprop_3re2_5Match_regs(PyObject *o, void *x) {
  return __pyx_pf_3re2_5Match_4regs___get__(o);
}

static PyObject *__pyx_getprop_3re2_5Match_lastindex(PyObject *o, void *x) {
  return __pyx_pf_3re2_5Match_9lastindex___get__(o);
}

static PyObject *__pyx_getprop_3re2_5Match_lastgroup(PyObject *o, void *x) {
  return __pyx_pf_3re2_5Match_9lastgroup___get__(o);
}

static PyMethodDef __pyx_methods_3re2_Match[] = {
  {__Pyx_NAMESTR("groups"), (PyCFunction)__pyx_pf_3re2_5Match_2groups, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("group"), (PyCFunction)__pyx_pf_3re2_5Match_3group, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("_convert_spans"), (PyCFunction)__pyx_pf_3re2_5Match_4_convert_spans, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("expand"), (PyCFunction)__pyx_pf_3re2_5Match_5expand, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("groupdict"), (PyCFunction)__pyx_pf_3re2_5Match_6groupdict, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("end"), (PyCFunction)__pyx_pf_3re2_5Match_7end, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("start"), (PyCFunction)__pyx_pf_3re2_5Match_8start, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("span"), (PyCFunction)__pyx_pf_3re2_5Match_9span, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_3re2_Match[] = {
  {(char *)"re", __pyx_getprop_3re2_5Match_re, 0, 0, 0},
  {(char *)"pos", __pyx_getprop_3re2_5Match_pos, 0, 0, 0},
  {(char *)"endpos", __pyx_getprop_3re2_5Match_endpos, 0, 0, 0},
  {(char *)"string", __pyx_getprop_3re2_5Match_string, 0, 0, 0},
  {(char *)"regs", __pyx_getprop_3re2_5Match_regs, 0, 0, 0},
  {(char *)"lastindex", __pyx_getprop_3re2_5Match_lastindex, 0, 0, 0},
  {(char *)"lastgroup", __pyx_getprop_3re2_5Match_lastgroup, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Match = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Match = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Match = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Match = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_3re2_Match = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("re2.Match"), /*tp_name*/
  sizeof(struct __pyx_obj_3re2_Match), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3re2_Match, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Match, /*tp_as_number*/
  &__pyx_tp_as_sequence_Match, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Match, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Match, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3re2_Match, /*tp_traverse*/
  __pyx_tp_clear_3re2_Match, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3re2_Match, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_3re2_Match, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_3re2_5Match___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3re2_Match, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_3re2_Pattern __pyx_vtable_3re2_Pattern;

static PyObject *__pyx_tp_new_3re2_Pattern(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_3re2_Pattern *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_3re2_Pattern *)o);
  p->__pyx_vtab = __pyx_vtabptr_3re2_Pattern;
  p->pattern = Py_None; Py_INCREF(Py_None);
  p->__weakref__ = 0;
  return o;
}

static void __pyx_tp_dealloc_3re2_Pattern(PyObject *o) {
  struct __pyx_obj_3re2_Pattern *p = (struct __pyx_obj_3re2_Pattern *)o;
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_3re2_7Pattern___dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  if (p->__weakref__) PyObject_ClearWeakRefs(o);
  Py_XDECREF(p->pattern);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_3re2_Pattern(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3re2_Pattern *p = (struct __pyx_obj_3re2_Pattern *)o;
  if (p->pattern) {
    e = (*v)(p->pattern, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3re2_Pattern(PyObject *o) {
  struct __pyx_obj_3re2_Pattern *p = (struct __pyx_obj_3re2_Pattern *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->pattern);
  p->pattern = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_3re2_7Pattern_flags(PyObject *o, void *x) {
  return __pyx_pf_3re2_7Pattern_5flags___get__(o);
}

static PyObject *__pyx_getprop_3re2_7Pattern_groups(PyObject *o, void *x) {
  return __pyx_pf_3re2_7Pattern_6groups___get__(o);
}

static PyObject *__pyx_getprop_3re2_7Pattern_pattern(PyObject *o, void *x) {
  return __pyx_pf_3re2_7Pattern_7pattern___get__(o);
}

static int __pyx_setprop_3re2_7Pattern_pattern(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_3re2_7Pattern_7pattern_1__set__(o, v);
  }
  else {
    return __pyx_pf_3re2_7Pattern_7pattern_2__del__(o);
  }
}

static PyMethodDef __pyx_methods_3re2_Pattern[] = {
  {__Pyx_NAMESTR("search"), (PyCFunction)__pyx_pf_3re2_7Pattern_1search, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_3re2_7Pattern_1search)},
  {__Pyx_NAMESTR("match"), (PyCFunction)__pyx_pf_3re2_7Pattern_2match, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_3re2_7Pattern_2match)},
  {__Pyx_NAMESTR("finditer"), (PyCFunction)__pyx_pf_3re2_7Pattern_3finditer, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_3re2_7Pattern_3finditer)},
  {__Pyx_NAMESTR("findall"), (PyCFunction)__pyx_pf_3re2_7Pattern_4findall, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_3re2_7Pattern_4findall)},
  {__Pyx_NAMESTR("split"), (PyCFunction)__pyx_pf_3re2_7Pattern_5split, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_3re2_7Pattern_5split)},
  {__Pyx_NAMESTR("sub"), (PyCFunction)__pyx_pf_3re2_7Pattern_6sub, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_3re2_7Pattern_6sub)},
  {__Pyx_NAMESTR("subn"), (PyCFunction)__pyx_pf_3re2_7Pattern_7subn, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_3re2_7Pattern_7subn)},
  {__Pyx_NAMESTR("_subn_callback"), (PyCFunction)__pyx_pf_3re2_7Pattern_8_subn_callback, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_3re2_7Pattern_8_subn_callback)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_3re2_Pattern[] = {
  {(char *)"flags", __pyx_getprop_3re2_7Pattern_flags, 0, 0, 0},
  {(char *)"groups", __pyx_getprop_3re2_7Pattern_groups, 0, 0, 0},
  {(char *)"pattern", __pyx_getprop_3re2_7Pattern_pattern, __pyx_setprop_3re2_7Pattern_pattern, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Pattern = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Pattern = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Pattern = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Pattern = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_3re2_Pattern = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("re2.Pattern"), /*tp_name*/
  sizeof(struct __pyx_obj_3re2_Pattern), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3re2_Pattern, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Pattern, /*tp_as_number*/
  &__pyx_tp_as_sequence_Pattern, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Pattern, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Pattern, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3re2_Pattern, /*tp_traverse*/
  __pyx_tp_clear_3re2_Pattern, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3re2_Pattern, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_3re2_Pattern, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3re2_Pattern, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_3re2_MatchIterator(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_3re2_MatchIterator *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_3re2_MatchIterator *)o);
  p->pattern = ((struct __pyx_obj_3re2_Pattern *)Py_None); Py_INCREF(Py_None);
  p->bytestring = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_3re2_MatchIterator(PyObject *o) {
  struct __pyx_obj_3re2_MatchIterator *p = (struct __pyx_obj_3re2_MatchIterator *)o;
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_3re2_13MatchIterator_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_XDECREF(((PyObject *)p->pattern));
  Py_XDECREF(p->bytestring);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_3re2_MatchIterator(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3re2_MatchIterator *p = (struct __pyx_obj_3re2_MatchIterator *)o;
  if (p->pattern) {
    e = (*v)(((PyObject*)p->pattern), a); if (e) return e;
  }
  if (p->bytestring) {
    e = (*v)(p->bytestring, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3re2_MatchIterator(PyObject *o) {
  struct __pyx_obj_3re2_MatchIterator *p = (struct __pyx_obj_3re2_MatchIterator *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->pattern);
  p->pattern = ((struct __pyx_obj_3re2_Pattern *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->bytestring);
  p->bytestring = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_3re2_MatchIterator[] = {
  {__Pyx_NAMESTR("__next__"), (PyCFunction)__pyx_pf_3re2_13MatchIterator_3__next__, METH_NOARGS|METH_COEXIST, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_MatchIterator = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_MatchIterator = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MatchIterator = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_MatchIterator = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_3re2_MatchIterator = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("re2.MatchIterator"), /*tp_name*/
  sizeof(struct __pyx_obj_3re2_MatchIterator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3re2_MatchIterator, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_MatchIterator, /*tp_as_number*/
  &__pyx_tp_as_sequence_MatchIterator, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MatchIterator, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_MatchIterator, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3re2_MatchIterator, /*tp_traverse*/
  __pyx_tp_clear_3re2_MatchIterator, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pf_3re2_13MatchIterator_2__iter__, /*tp_iter*/
  __pyx_pf_3re2_13MatchIterator_3__next__, /*tp_iternext*/
  __pyx_methods_3re2_MatchIterator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_3re2_13MatchIterator___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3re2_MatchIterator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("re2"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 0},
  {&__pyx_kp_s_10, __pyx_k_10, sizeof(__pyx_k_10), 0, 0, 1, 0},
  {&__pyx_kp_s_11, __pyx_k_11, sizeof(__pyx_k_11), 0, 0, 1, 0},
  {&__pyx_kp_s_13, __pyx_k_13, sizeof(__pyx_k_13), 0, 0, 1, 0},
  {&__pyx_kp_u_13, __pyx_k_13, sizeof(__pyx_k_13), 0, 1, 0, 0},
  {&__pyx_kp_s_16, __pyx_k_16, sizeof(__pyx_k_16), 0, 0, 1, 0},
  {&__pyx_n_s_18, __pyx_k_18, sizeof(__pyx_k_18), 0, 0, 1, 1},
  {&__pyx_kp_s_19, __pyx_k_19, sizeof(__pyx_k_19), 0, 0, 1, 0},
  {&__pyx_kp_s_22, __pyx_k_22, sizeof(__pyx_k_22), 0, 0, 1, 0},
  {&__pyx_kp_s_24, __pyx_k_24, sizeof(__pyx_k_24), 0, 0, 1, 0},
  {&__pyx_kp_s_29, __pyx_k_29, sizeof(__pyx_k_29), 0, 0, 1, 0},
  {&__pyx_kp_s_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 0, 1, 0},
  {&__pyx_kp_s_30, __pyx_k_30, sizeof(__pyx_k_30), 0, 0, 1, 0},
  {&__pyx_kp_s_31, __pyx_k_31, sizeof(__pyx_k_31), 0, 0, 1, 0},
  {&__pyx_kp_s_32, __pyx_k_32, sizeof(__pyx_k_32), 0, 0, 1, 0},
  {&__pyx_kp_s_33, __pyx_k_33, sizeof(__pyx_k_33), 0, 0, 1, 0},
  {&__pyx_kp_s_34, __pyx_k_34, sizeof(__pyx_k_34), 0, 0, 1, 0},
  {&__pyx_kp_s_35, __pyx_k_35, sizeof(__pyx_k_35), 0, 0, 1, 0},
  {&__pyx_kp_s_36, __pyx_k_36, sizeof(__pyx_k_36), 0, 0, 1, 0},
  {&__pyx_kp_s_37, __pyx_k_37, sizeof(__pyx_k_37), 0, 0, 1, 0},
  {&__pyx_kp_s_38, __pyx_k_38, sizeof(__pyx_k_38), 0, 0, 1, 0},
  {&__pyx_kp_s_39, __pyx_k_39, sizeof(__pyx_k_39), 0, 0, 1, 0},
  {&__pyx_n_s_40, __pyx_k_40, sizeof(__pyx_k_40), 0, 0, 1, 1},
  {&__pyx_kp_s_41, __pyx_k_41, sizeof(__pyx_k_41), 0, 0, 1, 0},
  {&__pyx_kp_s_42, __pyx_k_42, sizeof(__pyx_k_42), 0, 0, 1, 0},
  {&__pyx_kp_s_43, __pyx_k_43, sizeof(__pyx_k_43), 0, 0, 1, 0},
  {&__pyx_kp_s_45, __pyx_k_45, sizeof(__pyx_k_45), 0, 0, 1, 0},
  {&__pyx_kp_s_46, __pyx_k_46, sizeof(__pyx_k_46), 0, 0, 1, 0},
  {&__pyx_kp_s_47, __pyx_k_47, sizeof(__pyx_k_47), 0, 0, 1, 0},
  {&__pyx_n_s_49, __pyx_k_49, sizeof(__pyx_k_49), 0, 0, 1, 1},
  {&__pyx_kp_s_50, __pyx_k_50, sizeof(__pyx_k_50), 0, 0, 1, 0},
  {&__pyx_n_s_53, __pyx_k_53, sizeof(__pyx_k_53), 0, 0, 1, 1},
  {&__pyx_kp_s_54, __pyx_k_54, sizeof(__pyx_k_54), 0, 0, 1, 0},
  {&__pyx_kp_s_55, __pyx_k_55, sizeof(__pyx_k_55), 0, 0, 1, 0},
  {&__pyx_n_s_57, __pyx_k_57, sizeof(__pyx_k_57), 0, 0, 1, 1},
  {&__pyx_kp_s_7, __pyx_k_7, sizeof(__pyx_k_7), 0, 0, 1, 0},
  {&__pyx_kp_s_9, __pyx_k_9, sizeof(__pyx_k_9), 0, 0, 1, 0},
  {&__pyx_kp_s__0, __pyx_k__0, sizeof(__pyx_k__0), 0, 0, 1, 0},
  {&__pyx_kp_s__1234567, __pyx_k__1234567, sizeof(__pyx_k__1234567), 0, 0, 1, 0},
  {&__pyx_kp_s__89, __pyx_k__89, sizeof(__pyx_k__89), 0, 0, 1, 0},
  {&__pyx_n_s__DOTALL, __pyx_k__DOTALL, sizeof(__pyx_k__DOTALL), 0, 0, 1, 1},
  {&__pyx_n_s__Exception, __pyx_k__Exception, sizeof(__pyx_k__Exception), 0, 0, 1, 1},
  {&__pyx_n_s__FALLBACK_EXCEPTION, __pyx_k__FALLBACK_EXCEPTION, sizeof(__pyx_k__FALLBACK_EXCEPTION), 0, 0, 1, 1},
  {&__pyx_n_s__FALLBACK_QUIETLY, __pyx_k__FALLBACK_QUIETLY, sizeof(__pyx_k__FALLBACK_QUIETLY), 0, 0, 1, 1},
  {&__pyx_n_s__FALLBACK_WARNING, __pyx_k__FALLBACK_WARNING, sizeof(__pyx_k__FALLBACK_WARNING), 0, 0, 1, 1},
  {&__pyx_n_s__I, __pyx_k__I, sizeof(__pyx_k__I), 0, 0, 1, 1},
  {&__pyx_n_s__IGNORECASE, __pyx_k__IGNORECASE, sizeof(__pyx_k__IGNORECASE), 0, 0, 1, 1},
  {&__pyx_n_s__IndexError, __pyx_k__IndexError, sizeof(__pyx_k__IndexError), 0, 0, 1, 1},
  {&__pyx_n_s__L, __pyx_k__L, sizeof(__pyx_k__L), 0, 0, 1, 1},
  {&__pyx_n_s__LOCALE, __pyx_k__LOCALE, sizeof(__pyx_k__LOCALE), 0, 0, 1, 1},
  {&__pyx_n_s__M, __pyx_k__M, sizeof(__pyx_k__M), 0, 0, 1, 1},
  {&__pyx_n_s__MULTILINE, __pyx_k__MULTILINE, sizeof(__pyx_k__MULTILINE), 0, 0, 1, 1},
  {&__pyx_n_s__Match, __pyx_k__Match, sizeof(__pyx_k__Match), 0, 0, 1, 1},
  {&__pyx_n_s__NotImplementedError, __pyx_k__NotImplementedError, sizeof(__pyx_k__NotImplementedError), 0, 0, 1, 1},
  {&__pyx_n_s__RegexError, __pyx_k__RegexError, sizeof(__pyx_k__RegexError), 0, 0, 1, 1},
  {&__pyx_n_s__S, __pyx_k__S, sizeof(__pyx_k__S), 0, 0, 1, 1},
  {&__pyx_n_s__SREPattern, __pyx_k__SREPattern, sizeof(__pyx_k__SREPattern), 0, 0, 1, 1},
  {&__pyx_n_s__StopIteration, __pyx_k__StopIteration, sizeof(__pyx_k__StopIteration), 0, 0, 1, 1},
  {&__pyx_n_s__Tokenizer, __pyx_k__Tokenizer, sizeof(__pyx_k__Tokenizer), 0, 0, 1, 1},
  {&__pyx_n_s__TypeError, __pyx_k__TypeError, sizeof(__pyx_k__TypeError), 0, 0, 1, 1},
  {&__pyx_n_s__U, __pyx_k__U, sizeof(__pyx_k__U), 0, 0, 1, 1},
  {&__pyx_n_s__UNICODE, __pyx_k__UNICODE, sizeof(__pyx_k__UNICODE), 0, 0, 1, 1},
  {&__pyx_n_s__VERBOSE, __pyx_k__VERBOSE, sizeof(__pyx_k__VERBOSE), 0, 0, 1, 1},
  {&__pyx_n_s__VERSION, __pyx_k__VERSION, sizeof(__pyx_k__VERSION), 0, 0, 1, 1},
  {&__pyx_n_s__VERSION_HEX, __pyx_k__VERSION_HEX, sizeof(__pyx_k__VERSION_HEX), 0, 0, 1, 1},
  {&__pyx_n_s__ValueError, __pyx_k__ValueError, sizeof(__pyx_k__ValueError), 0, 0, 1, 1},
  {&__pyx_n_s__WHITESPACE, __pyx_k__WHITESPACE, sizeof(__pyx_k__WHITESPACE), 0, 0, 1, 1},
  {&__pyx_n_s__X, __pyx_k__X, sizeof(__pyx_k__X), 0, 0, 1, 1},
  {&__pyx_n_s___MAXCACHE, __pyx_k___MAXCACHE, sizeof(__pyx_k___MAXCACHE), 0, 0, 1, 1},
  {&__pyx_n_s____init__, __pyx_k____init__, sizeof(__pyx_k____init__), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____next, __pyx_k____next, sizeof(__pyx_k____next), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s___alphanum, __pyx_k___alphanum, sizeof(__pyx_k___alphanum), 0, 0, 1, 1},
  {&__pyx_n_s___cache, __pyx_k___cache, sizeof(__pyx_k___cache), 0, 0, 1, 1},
  {&__pyx_n_s___cache_repl, __pyx_k___cache_repl, sizeof(__pyx_k___cache_repl), 0, 0, 1, 1},
  {&__pyx_n_s___compile, __pyx_k___compile, sizeof(__pyx_k___compile), 0, 0, 1, 1},
  {&__pyx_n_s___convert_positions, __pyx_k___convert_positions, sizeof(__pyx_k___convert_positions), 0, 0, 1, 1},
  {&__pyx_n_s___convert_spans, __pyx_k___convert_spans, sizeof(__pyx_k___convert_spans), 0, 0, 1, 1},
  {&__pyx_n_s___endpos, __pyx_k___endpos, sizeof(__pyx_k___endpos), 0, 0, 1, 1},
  {&__pyx_n_s___flags, __pyx_k___flags, sizeof(__pyx_k___flags), 0, 0, 1, 1},
  {&__pyx_n_s___groups, __pyx_k___groups, sizeof(__pyx_k___groups), 0, 0, 1, 1},
  {&__pyx_n_s___lastindex, __pyx_k___lastindex, sizeof(__pyx_k___lastindex), 0, 0, 1, 1},
  {&__pyx_n_s___make_spans, __pyx_k___make_spans, sizeof(__pyx_k___make_spans), 0, 0, 1, 1},
  {&__pyx_n_s___named_groups, __pyx_k___named_groups, sizeof(__pyx_k___named_groups), 0, 0, 1, 1},
  {&__pyx_n_s___named_indexes, __pyx_k___named_indexes, sizeof(__pyx_k___named_indexes), 0, 0, 1, 1},
  {&__pyx_n_s___pattern_object, __pyx_k___pattern_object, sizeof(__pyx_k___pattern_object), 0, 0, 1, 1},
  {&__pyx_n_s___pos, __pyx_k___pos, sizeof(__pyx_k___pos), 0, 0, 1, 1},
  {&__pyx_n_s___search, __pyx_k___search, sizeof(__pyx_k___search), 0, 0, 1, 1},
  {&__pyx_n_s___spans, __pyx_k___spans, sizeof(__pyx_k___spans), 0, 0, 1, 1},
  {&__pyx_n_s___subn_callback, __pyx_k___subn_callback, sizeof(__pyx_k___subn_callback), 0, 0, 1, 1},
  {&__pyx_n_s__append, __pyx_k__append, sizeof(__pyx_k__append), 0, 0, 1, 1},
  {&__pyx_n_s__as_match, __pyx_k__as_match, sizeof(__pyx_k__as_match), 0, 0, 1, 1},
  {&__pyx_n_s__basestring, __pyx_k__basestring, sizeof(__pyx_k__basestring), 0, 0, 1, 1},
  {&__pyx_n_s__begin, __pyx_k__begin, sizeof(__pyx_k__begin), 0, 0, 1, 1},
  {&__pyx_n_s__bytestring, __pyx_k__bytestring, sizeof(__pyx_k__bytestring), 0, 0, 1, 1},
  {&__pyx_n_s__c, __pyx_k__c, sizeof(__pyx_k__c), 0, 0, 1, 1},
  {&__pyx_n_s__c_str, __pyx_k__c_str, sizeof(__pyx_k__c_str), 0, 0, 1, 1},
  {&__pyx_n_s__callable, __pyx_k__callable, sizeof(__pyx_k__callable), 0, 0, 1, 1},
  {&__pyx_n_s__callback, __pyx_k__callback, sizeof(__pyx_k__callback), 0, 0, 1, 1},
  {&__pyx_n_s__clear, __pyx_k__clear, sizeof(__pyx_k__clear), 0, 0, 1, 1},
  {&__pyx_n_s__compile, __pyx_k__compile, sizeof(__pyx_k__compile), 0, 0, 1, 1},
  {&__pyx_n_s__convert_position, __pyx_k__convert_position, sizeof(__pyx_k__convert_position), 0, 0, 1, 1},
  {&__pyx_n_s__count, __pyx_k__count, sizeof(__pyx_k__count), 0, 0, 1, 1},
  {&__pyx_n_s__cstring, __pyx_k__cstring, sizeof(__pyx_k__cstring), 0, 0, 1, 1},
  {&__pyx_n_s__d, __pyx_k__d, sizeof(__pyx_k__d), 0, 0, 1, 1},
  {&__pyx_n_s__data, __pyx_k__data, sizeof(__pyx_k__data), 0, 0, 1, 1},
  {&__pyx_n_s__default, __pyx_k__default, sizeof(__pyx_k__default), 0, 0, 1, 1},
  {&__pyx_n_s__encoded, __pyx_k__encoded, sizeof(__pyx_k__encoded), 0, 0, 1, 1},
  {&__pyx_n_s__end, __pyx_k__end, sizeof(__pyx_k__end), 0, 0, 1, 1},
  {&__pyx_n_s__endpos, __pyx_k__endpos, sizeof(__pyx_k__endpos), 0, 0, 1, 1},
  {&__pyx_n_s__enumerate, __pyx_k__enumerate, sizeof(__pyx_k__enumerate), 0, 0, 1, 1},
  {&__pyx_n_s__error, __pyx_k__error, sizeof(__pyx_k__error), 0, 0, 1, 1},
  {&__pyx_n_s__error_code, __pyx_k__error_code, sizeof(__pyx_k__error_code), 0, 0, 1, 1},
  {&__pyx_n_s__escape, __pyx_k__escape, sizeof(__pyx_k__escape), 0, 0, 1, 1},
  {&__pyx_n_s__findall, __pyx_k__findall, sizeof(__pyx_k__findall), 0, 0, 1, 1},
  {&__pyx_n_s__finditer, __pyx_k__finditer, sizeof(__pyx_k__finditer), 0, 0, 1, 1},
  {&__pyx_n_s__first, __pyx_k__first, sizeof(__pyx_k__first), 0, 0, 1, 1},
  {&__pyx_n_s__flags, __pyx_k__flags, sizeof(__pyx_k__flags), 0, 0, 1, 1},
  {&__pyx_n_s__flush, __pyx_k__flush, sizeof(__pyx_k__flush), 0, 0, 1, 1},
  {&__pyx_n_s__get, __pyx_k__get, sizeof(__pyx_k__get), 0, 0, 1, 1},
  {&__pyx_n_s__group, __pyx_k__group, sizeof(__pyx_k__group), 0, 0, 1, 1},
  {&__pyx_n_s__groupdict, __pyx_k__groupdict, sizeof(__pyx_k__groupdict), 0, 0, 1, 1},
  {&__pyx_n_s__groups, __pyx_k__groups, sizeof(__pyx_k__groups), 0, 0, 1, 1},
  {&__pyx_n_s__index, __pyx_k__index, sizeof(__pyx_k__index), 0, 0, 1, 1},
  {&__pyx_n_s__init_groups, __pyx_k__init_groups, sizeof(__pyx_k__init_groups), 0, 0, 1, 1},
  {&__pyx_n_s__isdigit, __pyx_k__isdigit, sizeof(__pyx_k__isdigit), 0, 0, 1, 1},
  {&__pyx_n_s__join, __pyx_k__join, sizeof(__pyx_k__join), 0, 0, 1, 1},
  {&__pyx_n_s__length, __pyx_k__length, sizeof(__pyx_k__length), 0, 0, 1, 1},
  {&__pyx_n_s__m, __pyx_k__m, sizeof(__pyx_k__m), 0, 0, 1, 1},
  {&__pyx_n_s__match, __pyx_k__match, sizeof(__pyx_k__match), 0, 0, 1, 1},
  {&__pyx_n_s__match_string, __pyx_k__match_string, sizeof(__pyx_k__match_string), 0, 0, 1, 1},
  {&__pyx_n_s__matches, __pyx_k__matches, sizeof(__pyx_k__matches), 0, 0, 1, 1},
  {&__pyx_n_s__max_mem, __pyx_k__max_mem, sizeof(__pyx_k__max_mem), 0, 0, 1, 1},
  {&__pyx_n_s__maxsplit, __pyx_k__maxsplit, sizeof(__pyx_k__maxsplit), 0, 0, 1, 1},
  {&__pyx_n_s__named_groups, __pyx_k__named_groups, sizeof(__pyx_k__named_groups), 0, 0, 1, 1},
  {&__pyx_n_s__next, __pyx_k__next, sizeof(__pyx_k__next), 0, 0, 1, 1},
  {&__pyx_n_s__ngroups, __pyx_k__ngroups, sizeof(__pyx_k__ngroups), 0, 0, 1, 1},
  {&__pyx_n_s__nmatches, __pyx_k__nmatches, sizeof(__pyx_k__nmatches), 0, 0, 1, 1},
  {&__pyx_n_s__num_groups, __pyx_k__num_groups, sizeof(__pyx_k__num_groups), 0, 0, 1, 1},
  {&__pyx_n_s__ok, __pyx_k__ok, sizeof(__pyx_k__ok), 0, 0, 1, 1},
  {&__pyx_n_s__ord, __pyx_k__ord, sizeof(__pyx_k__ord), 0, 0, 1, 1},
  {&__pyx_n_s__pattern, __pyx_k__pattern, sizeof(__pyx_k__pattern), 0, 0, 1, 1},
  {&__pyx_n_s__pattern_object, __pyx_k__pattern_object, sizeof(__pyx_k__pattern_object), 0, 0, 1, 1},
  {&__pyx_n_s__pos, __pyx_k__pos, sizeof(__pyx_k__pos), 0, 0, 1, 1},
  {&__pyx_n_s__position, __pyx_k__position, sizeof(__pyx_k__position), 0, 0, 1, 1},
  {&__pyx_n_s__prepare_pattern, __pyx_k__prepare_pattern, sizeof(__pyx_k__prepare_pattern), 0, 0, 1, 1},
  {&__pyx_n_s__push_back, __pyx_k__push_back, sizeof(__pyx_k__push_back), 0, 0, 1, 1},
  {&__pyx_n_s__range, __pyx_k__range, sizeof(__pyx_k__range), 0, 0, 1, 1},
  {&__pyx_n_s__re, __pyx_k__re, sizeof(__pyx_k__re), 0, 0, 1, 1},
  {&__pyx_n_s__re2, __pyx_k__re2, sizeof(__pyx_k__re2), 0, 0, 1, 1},
  {&__pyx_n_s__re_pattern, __pyx_k__re_pattern, sizeof(__pyx_k__re_pattern), 0, 0, 1, 1},
  {&__pyx_n_s__repl, __pyx_k__repl, sizeof(__pyx_k__repl), 0, 0, 1, 1},
  {&__pyx_n_s__s, __pyx_k__s, sizeof(__pyx_k__s), 0, 0, 1, 1},
  {&__pyx_n_s__search, __pyx_k__search, sizeof(__pyx_k__search), 0, 0, 1, 1},
  {&__pyx_n_s__second, __pyx_k__second, sizeof(__pyx_k__second), 0, 0, 1, 1},
  {&__pyx_n_s__self, __pyx_k__self, sizeof(__pyx_k__self), 0, 0, 1, 1},
  {&__pyx_n_s__set_case_sensitive, __pyx_k__set_case_sensitive, sizeof(__pyx_k__set_case_sensitive), 0, 0, 1, 1},
  {&__pyx_n_s__set_encoding, __pyx_k__set_encoding, sizeof(__pyx_k__set_encoding), 0, 0, 1, 1},
  {&__pyx_n_s__set_log_errors, __pyx_k__set_log_errors, sizeof(__pyx_k__set_log_errors), 0, 0, 1, 1},
  {&__pyx_n_s__set_max_mem, __pyx_k__set_max_mem, sizeof(__pyx_k__set_max_mem), 0, 0, 1, 1},
  {&__pyx_n_s__size, __pyx_k__size, sizeof(__pyx_k__size), 0, 0, 1, 1},
  {&__pyx_n_s__sorted, __pyx_k__sorted, sizeof(__pyx_k__sorted), 0, 0, 1, 1},
  {&__pyx_n_s__sp, __pyx_k__sp, sizeof(__pyx_k__sp), 0, 0, 1, 1},
  {&__pyx_n_s__span, __pyx_k__span, sizeof(__pyx_k__span), 0, 0, 1, 1},
  {&__pyx_n_s__split, __pyx_k__split, sizeof(__pyx_k__split), 0, 0, 1, 1},
  {&__pyx_n_s__stdout, __pyx_k__stdout, sizeof(__pyx_k__stdout), 0, 0, 1, 1},
  {&__pyx_n_s__string, __pyx_k__string, sizeof(__pyx_k__string), 0, 0, 1, 1},
  {&__pyx_n_s__sub, __pyx_k__sub, sizeof(__pyx_k__sub), 0, 0, 1, 1},
  {&__pyx_n_s__subn, __pyx_k__subn, sizeof(__pyx_k__subn), 0, 0, 1, 1},
  {&__pyx_n_s__sys, __pyx_k__sys, sizeof(__pyx_k__sys), 0, 0, 1, 1},
  {&__pyx_n_s__tostring, __pyx_k__tostring, sizeof(__pyx_k__tostring), 0, 0, 1, 1},
  {&__pyx_n_s__w, __pyx_k__w, sizeof(__pyx_k__w), 0, 0, 1, 1},
  {&__pyx_n_s__warn, __pyx_k__warn, sizeof(__pyx_k__warn), 0, 0, 1, 1},
  {&__pyx_n_s__warnings, __pyx_k__warnings, sizeof(__pyx_k__warnings), 0, 0, 1, 1},
  {&__pyx_n_s__zip, __pyx_k__zip, sizeof(__pyx_k__zip), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_Exception = __Pyx_GetName(__pyx_b, __pyx_n_s__Exception); if (!__pyx_builtin_Exception) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 820; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ValueError = __Pyx_GetName(__pyx_b, __pyx_n_s__ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetName(__pyx_b, __pyx_n_s__range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_basestring = __Pyx_GetName(__pyx_b, __pyx_n_s__basestring); if (!__pyx_builtin_basestring) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_IndexError = __Pyx_GetName(__pyx_b, __pyx_n_s__IndexError); if (!__pyx_builtin_IndexError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_sorted = __Pyx_GetName(__pyx_b, __pyx_n_s__sorted); if (!__pyx_builtin_sorted) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_zip = __Pyx_GetName(__pyx_b, __pyx_n_s__zip); if (!__pyx_builtin_zip) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_enumerate = __Pyx_GetName(__pyx_b, __pyx_n_s__enumerate); if (!__pyx_builtin_enumerate) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_TypeError = __Pyx_GetName(__pyx_b, __pyx_n_s__TypeError); if (!__pyx_builtin_TypeError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_callable = __Pyx_GetName(__pyx_b, __pyx_n_s__callable); if (!__pyx_builtin_callable) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_NotImplementedError = __Pyx_GetName(__pyx_b, __pyx_n_s__NotImplementedError); if (!__pyx_builtin_NotImplementedError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_StopIteration = __Pyx_GetName(__pyx_b, __pyx_n_s__StopIteration); if (!__pyx_builtin_StopIteration) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ord = __Pyx_GetName(__pyx_b, __pyx_n_s__ord); if (!__pyx_builtin_ord) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1077; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants");

  /* "re2.pyx":41
 *     level = int(level)
 *     if level < 0 or level > 2:
 *         raise ValueError("This function expects a valid notification level.")             # <<<<<<<<<<<<<<
 *     current_notification = level
 * 
 */
  __pyx_k_tuple_2 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_2));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_1));
  PyTuple_SET_ITEM(__pyx_k_tuple_2, 0, ((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_2));

  /* "re2.pyx":231
 * 
 *         if idx > self.nmatches - 1:
 *             raise IndexError("no such group")             # <<<<<<<<<<<<<<
 *         return self._groups[idx]
 * 
 */
  __pyx_k_tuple_4 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_4));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_3));
  PyTuple_SET_ITEM(__pyx_k_tuple_4, 0, ((PyObject *)__pyx_kp_s_3));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_3));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_4));

  /* "re2.pyx":300
 *         for i in range(self.nmatches):
 *             if self.matches[i].data() == NULL:
 *                 spans.append((-1, -1))             # <<<<<<<<<<<<<<
 *             else:
 *                 piece = &self.matches[i]
 */
  __pyx_k_tuple_5 = PyTuple_New(2); if (unlikely(!__pyx_k_tuple_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_5));
  __Pyx_INCREF(__pyx_int_neg_1);
  PyTuple_SET_ITEM(__pyx_k_tuple_5, 0, __pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  __Pyx_INCREF(__pyx_int_neg_1);
  PyTuple_SET_ITEM(__pyx_k_tuple_5, 1, __pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_5));

  /* "re2.pyx":304
 *                 piece = &self.matches[i]
 *                 if piece.data() == NULL:
 *                     return (-1, -1)             # <<<<<<<<<<<<<<
 *                 start = piece.data() - s
 *                 end = start + piece.length()
 */
  __pyx_k_tuple_6 = PyTuple_New(2); if (unlikely(!__pyx_k_tuple_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_6));
  __Pyx_INCREF(__pyx_int_neg_1);
  PyTuple_SET_ITEM(__pyx_k_tuple_6, 0, __pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  __Pyx_INCREF(__pyx_int_neg_1);
  PyTuple_SET_ITEM(__pyx_k_tuple_6, 1, __pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_6));

  /* "re2.pyx":323
 *         # TODO - This can be optimized to work a bit faster in C.
 *         # Expand a template with groups
 *         items = template.split('\\')             # <<<<<<<<<<<<<<
 *         for i, item in enumerate(items[1:]):
 *             if item[0].isdigit():
 */
  __pyx_k_tuple_8 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_8));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_7));
  PyTuple_SET_ITEM(__pyx_k_tuple_8, 0, ((PyObject *)__pyx_kp_s_7));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_7));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_8));

  /* "re2.pyx":333
 *             elif item[:2] == 'g<' and '>' in item:
 *                 # This is a named group
 *                 name, rest = item[2:].split('>', 1)             # <<<<<<<<<<<<<<
 *                 items[i + 1] = self.group(name) + rest
 *             else:
 */
  __pyx_k_tuple_12 = PyTuple_New(2); if (unlikely(!__pyx_k_tuple_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_12));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_11));
  PyTuple_SET_ITEM(__pyx_k_tuple_12, 0, ((PyObject *)__pyx_kp_s_11));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_11));
  __Pyx_INCREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_k_tuple_12, 1, __pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_12));

  /* "re2.pyx":371
 *         if type(group) is int:
 *             if group > len(self._spans):
 *                 raise IndexError("no such group")             # <<<<<<<<<<<<<<
 *             return self._spans[group]
 *         else:
 */
  __pyx_k_tuple_14 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_14));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_3));
  PyTuple_SET_ITEM(__pyx_k_tuple_14, 0, ((PyObject *)__pyx_kp_s_3));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_3));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_14));

  /* "re2.pyx":376
 *             self.groupdict()
 *             if group not in self._named_indexes:
 *                 raise IndexError("no such group")             # <<<<<<<<<<<<<<
 *             return self._spans[self._named_indexes[group]]
 * 
 */
  __pyx_k_tuple_15 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_15));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_3));
  PyTuple_SET_ITEM(__pyx_k_tuple_15, 0, ((PyObject *)__pyx_kp_s_3));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_3));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_15));

  /* "re2.pyx":439
 *         string = unicode_to_bytestring(string, &encoded)
 *         if pystring_to_bytestring(string, &cstring, &size) == -1:
 *             raise TypeError("expected string or buffer")             # <<<<<<<<<<<<<<
 * 
 *         if endpos != -1 and endpos < size:
 */
  __pyx_k_tuple_17 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_17));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_16));
  PyTuple_SET_ITEM(__pyx_k_tuple_17, 0, ((PyObject *)__pyx_kp_s_16));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_16));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_17));

  /* "re2.pyx":521
 *         string = unicode_to_bytestring(string, &encoded)
 *         if pystring_to_bytestring(string, &cstring, &size) == -1:
 *             raise TypeError("expected string or buffer")             # <<<<<<<<<<<<<<
 * 
 *         encoded = <bint>encoded
 */
  __pyx_k_tuple_20 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_20));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_16));
  PyTuple_SET_ITEM(__pyx_k_tuple_20, 0, ((PyObject *)__pyx_kp_s_16));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_16));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_20));

  /* "re2.pyx":606
 *         repl = unicode_to_bytestring(repl, &repl_encoded)
 *         if pystring_to_bytestring(repl, &cstring, &size) == -1:
 *             raise TypeError("expected string or buffer")             # <<<<<<<<<<<<<<
 * 
 *         fixed_repl = NULL
 */
  __pyx_k_tuple_21 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 606; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_21));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_16));
  PyTuple_SET_ITEM(__pyx_k_tuple_21, 0, ((PyObject *)__pyx_kp_s_16));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_16));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_21));

  /* "re2.pyx":617
 *                 s += 1
 *                 if s == end:
 *                     raise RegexError("Invalid rewrite pattern")             # <<<<<<<<<<<<<<
 *                 c = s[0]
 *                 if c == '\\' or (c >= '0' and c <= '9'):
 */
  __pyx_k_tuple_23 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_23));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_22));
  PyTuple_SET_ITEM(__pyx_k_tuple_23, 0, ((PyObject *)__pyx_kp_s_22));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_22));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_23));

  /* "re2.pyx":655
 *             del input_str
 *             del sp
 *             raise NotImplementedError("So far pyre2 does not support custom replacement counts")             # <<<<<<<<<<<<<<
 * 
 *         if string_encoded or (repl_encoded and total_replacements > 0):
 */
  __pyx_k_tuple_25 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_25));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_24));
  PyTuple_SET_ITEM(__pyx_k_tuple_25, 0, ((PyObject *)__pyx_kp_s_24));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_24));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_25));

  /* "re2.pyx":687
 *         string = unicode_to_bytestring(string, &encoded)
 *         if pystring_to_bytestring(string, &cstring, &size) == -1:
 *             raise TypeError("expected string or buffer")             # <<<<<<<<<<<<<<
 *         encoded = <bint>encoded
 * 
 */
  __pyx_k_tuple_26 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 687; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_26));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_16));
  PyTuple_SET_ITEM(__pyx_k_tuple_26, 0, ((PyObject *)__pyx_kp_s_16));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_16));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_26));

  /* "re2.pyx":743
 *         self.bytestring = unicode_to_bytestring(string, &self.encoded)
 *         if pystring_to_bytestring(self.bytestring, &self.cstring, &self.size) == -1:
 *             raise TypeError("expected string or buffer")             # <<<<<<<<<<<<<<
 * 
 *         if self.encoded:
 */
  __pyx_k_tuple_27 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_27));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_16));
  PyTuple_SET_ITEM(__pyx_k_tuple_27, 0, ((PyObject *)__pyx_kp_s_16));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_16));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_27));

  /* "re2.pyx":796
 *         if self.as_match:
 *             if self.pattern.ngroups > 1:
 *                 return m.groups("")             # <<<<<<<<<<<<<<
 *             else:
 *                 return m.group(self.pattern.ngroups)
 */
  __pyx_k_tuple_28 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_28));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_13));
  PyTuple_SET_ITEM(__pyx_k_tuple_28, 0, ((PyObject *)__pyx_kp_s_13));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_13));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_28));

  /* "re2.pyx":944
 *     if isinstance(pattern, (Pattern, SREPattern)):
 *         if flags:
 *             raise ValueError('Cannot process flags argument with a compiled pattern')             # <<<<<<<<<<<<<<
 *         return pattern
 * 
 */
  __pyx_k_tuple_44 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_44)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_44));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_43));
  PyTuple_SET_ITEM(__pyx_k_tuple_44, 0, ((PyObject *)__pyx_kp_s_43));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_43));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_44));

  /* "re2.pyx":971
 *     pattern = unicode_to_bytestring(pattern, &encoded)
 *     if pystring_to_bytestring(pattern, &string, &length) == -1:
 *         raise TypeError("first argument must be a string or compiled pattern")             # <<<<<<<<<<<<<<
 * 
 *     s = new _re2.StringPiece(string, length)
 */
  __pyx_k_tuple_48 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_48)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_48));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_47));
  PyTuple_SET_ITEM(__pyx_k_tuple_48, 0, ((PyObject *)__pyx_kp_s_47));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_47));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_48));

  /* "re2.pyx":23
 * FALLBACK_EXCEPTION = 2
 * 
 * VERSION = (0, 2, 13)             # <<<<<<<<<<<<<<
 * VERSION_HEX = 0x00020D
 * 
 */
  __pyx_k_tuple_51 = PyTuple_New(3); if (unlikely(!__pyx_k_tuple_51)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_51));
  __Pyx_INCREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_k_tuple_51, 0, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __Pyx_INCREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_k_tuple_51, 1, __pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  __Pyx_INCREF(__pyx_int_13);
  PyTuple_SET_ITEM(__pyx_k_tuple_51, 2, __pyx_int_13);
  __Pyx_GIVEREF(__pyx_int_13);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_51));

  /* "re2.pyx":27
 * 
 * # Type of compiled re object from Python stdlib
 * SREPattern = type(re.compile(''))             # <<<<<<<<<<<<<<
 * 
 * cdef int current_notification = FALLBACK_QUIETLY
 */
  __pyx_k_tuple_52 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_52)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_52));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_13));
  PyTuple_SET_ITEM(__pyx_k_tuple_52, 0, ((PyObject *)__pyx_kp_s_13));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_13));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_52));

  /* "re2.pyx":823
 *     pass
 * 
 * WHITESPACE = set(" \t\n\r\v\f")             # <<<<<<<<<<<<<<
 * 
 * class Tokenizer:
 */
  __pyx_k_tuple_56 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_56)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_56));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_55));
  PyTuple_SET_ITEM(__pyx_k_tuple_56, 0, ((PyObject *)__pyx_kp_s_55));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_55));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_56));
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  #if PY_VERSION_HEX < 0x02040000
  if (unlikely(__Pyx_Py23SetsImport() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_13 = PyInt_FromLong(13); if (unlikely(!__pyx_int_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_100 = PyInt_FromLong(100); if (unlikely(!__pyx_int_100)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_128 = PyInt_FromLong(128); if (unlikely(!__pyx_int_128)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_525 = PyInt_FromLong(525); if (unlikely(!__pyx_int_525)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initre2(void); /*proto*/
PyMODINIT_FUNC initre2(void)
#else
PyMODINIT_FUNC PyInit_re2(void); /*proto*/
PyMODINIT_FUNC PyInit_re2(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_re2(void)");
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __pyx_binding_PyCFunctionType_USED
  if (__pyx_binding_PyCFunctionType_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("re2"), __pyx_methods, 0, 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main_re2) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_3re2_Match = &__pyx_vtable_3re2_Match;
  __pyx_vtable_3re2_Match.init_groups = (PyObject *(*)(struct __pyx_obj_3re2_Match *))__pyx_f_3re2_5Match_init_groups;
  __pyx_vtable_3re2_Match._convert_positions = (PyObject *(*)(struct __pyx_obj_3re2_Match *, PyObject *))__pyx_f_3re2_5Match__convert_positions;
  __pyx_vtable_3re2_Match._make_spans = (PyObject *(*)(struct __pyx_obj_3re2_Match *))__pyx_f_3re2_5Match__make_spans;
  if (PyType_Ready(&__pyx_type_3re2_Match) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_3re2_Match.tp_dict, __pyx_vtabptr_3re2_Match) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Match", (PyObject *)&__pyx_type_3re2_Match) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_3re2_Match = &__pyx_type_3re2_Match;
  __pyx_vtabptr_3re2_Pattern = &__pyx_vtable_3re2_Pattern;
  __pyx_vtable_3re2_Pattern._search = (PyObject *(*)(struct __pyx_obj_3re2_Pattern *, PyObject *, int, int, RE2::Anchor))__pyx_f_3re2_7Pattern__search;
  __pyx_vtable_3re2_Pattern._print_pattern = (PyObject *(*)(struct __pyx_obj_3re2_Pattern *))__pyx_f_3re2_7Pattern__print_pattern;
  if (PyType_Ready(&__pyx_type_3re2_Pattern) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_3re2_Pattern.tp_dict, __pyx_vtabptr_3re2_Pattern) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Pattern", (PyObject *)&__pyx_type_3re2_Pattern) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_type_3re2_Pattern.tp_weaklistoffset == 0) __pyx_type_3re2_Pattern.tp_weaklistoffset = offsetof(struct __pyx_obj_3re2_Pattern, __weakref__);
  __pyx_ptype_3re2_Pattern = &__pyx_type_3re2_Pattern;
  if (PyType_Ready(&__pyx_type_3re2_MatchIterator) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 726; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "MatchIterator", (PyObject *)&__pyx_type_3re2_MatchIterator) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 726; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_3re2_MatchIterator = &__pyx_type_3re2_MatchIterator;
  /*--- Type import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "re2.pyx":3
 * # cython: infer_types(False)
 * # Import re flags to be compatible.
 * import sys             # <<<<<<<<<<<<<<
 * import re
 * 
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__sys), 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__sys, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":4
 * # Import re flags to be compatible.
 * import sys
 * import re             # <<<<<<<<<<<<<<
 * 
 * I = re.I
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__re), 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__re, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":6
 * import re
 * 
 * I = re.I             # <<<<<<<<<<<<<<
 * IGNORECASE = re.IGNORECASE
 * M = re.M
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__re); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__I); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__I, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "re2.pyx":7
 * 
 * I = re.I
 * IGNORECASE = re.IGNORECASE             # <<<<<<<<<<<<<<
 * M = re.M
 * MULTILINE = re.MULTILINE
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__re); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__IGNORECASE); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__IGNORECASE, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":8
 * I = re.I
 * IGNORECASE = re.IGNORECASE
 * M = re.M             # <<<<<<<<<<<<<<
 * MULTILINE = re.MULTILINE
 * S = re.S
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__re); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__M); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__M, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "re2.pyx":9
 * IGNORECASE = re.IGNORECASE
 * M = re.M
 * MULTILINE = re.MULTILINE             # <<<<<<<<<<<<<<
 * S = re.S
 * DOTALL = re.DOTALL
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__re); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__MULTILINE); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__MULTILINE, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":10
 * M = re.M
 * MULTILINE = re.MULTILINE
 * S = re.S             # <<<<<<<<<<<<<<
 * DOTALL = re.DOTALL
 * U = re.U
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__re); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__S); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__S, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "re2.pyx":11
 * MULTILINE = re.MULTILINE
 * S = re.S
 * DOTALL = re.DOTALL             # <<<<<<<<<<<<<<
 * U = re.U
 * UNICODE = re.UNICODE
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__re); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__DOTALL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__DOTALL, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":12
 * S = re.S
 * DOTALL = re.DOTALL
 * U = re.U             # <<<<<<<<<<<<<<
 * UNICODE = re.UNICODE
 * X = re.X
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__re); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__U); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__U, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "re2.pyx":13
 * DOTALL = re.DOTALL
 * U = re.U
 * UNICODE = re.UNICODE             # <<<<<<<<<<<<<<
 * X = re.X
 * VERBOSE = re.VERBOSE
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__re); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__UNICODE); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__UNICODE, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":14
 * U = re.U
 * UNICODE = re.UNICODE
 * X = re.X             # <<<<<<<<<<<<<<
 * VERBOSE = re.VERBOSE
 * L = re.L
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__re); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__X); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__X, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "re2.pyx":15
 * UNICODE = re.UNICODE
 * X = re.X
 * VERBOSE = re.VERBOSE             # <<<<<<<<<<<<<<
 * L = re.L
 * LOCALE = re.LOCALE
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__re); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__VERBOSE); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__VERBOSE, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":16
 * X = re.X
 * VERBOSE = re.VERBOSE
 * L = re.L             # <<<<<<<<<<<<<<
 * LOCALE = re.LOCALE
 * 
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__re); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__L); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__L, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "re2.pyx":17
 * VERBOSE = re.VERBOSE
 * L = re.L
 * LOCALE = re.LOCALE             # <<<<<<<<<<<<<<
 * 
 * FALLBACK_QUIETLY = 0
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__re); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__LOCALE); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__LOCALE, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":19
 * LOCALE = re.LOCALE
 * 
 * FALLBACK_QUIETLY = 0             # <<<<<<<<<<<<<<
 * FALLBACK_WARNING = 1
 * FALLBACK_EXCEPTION = 2
 */
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__FALLBACK_QUIETLY, __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "re2.pyx":20
 * 
 * FALLBACK_QUIETLY = 0
 * FALLBACK_WARNING = 1             # <<<<<<<<<<<<<<
 * FALLBACK_EXCEPTION = 2
 * 
 */
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__FALLBACK_WARNING, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "re2.pyx":21
 * FALLBACK_QUIETLY = 0
 * FALLBACK_WARNING = 1
 * FALLBACK_EXCEPTION = 2             # <<<<<<<<<<<<<<
 * 
 * VERSION = (0, 2, 13)
 */
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__FALLBACK_EXCEPTION, __pyx_int_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "re2.pyx":23
 * FALLBACK_EXCEPTION = 2
 * 
 * VERSION = (0, 2, 13)             # <<<<<<<<<<<<<<
 * VERSION_HEX = 0x00020D
 * 
 */
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__VERSION, ((PyObject *)__pyx_k_tuple_51)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "re2.pyx":24
 * 
 * VERSION = (0, 2, 13)
 * VERSION_HEX = 0x00020D             # <<<<<<<<<<<<<<
 * 
 * # Type of compiled re object from Python stdlib
 */
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__VERSION_HEX, __pyx_int_525) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "re2.pyx":27
 * 
 * # Type of compiled re object from Python stdlib
 * SREPattern = type(re.compile(''))             # <<<<<<<<<<<<<<
 * 
 * cdef int current_notification = FALLBACK_QUIETLY
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__re); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__compile); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_k_tuple_52), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__SREPattern, ((PyObject *)Py_TYPE(__pyx_t_1))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":29
 * SREPattern = type(re.compile(''))
 * 
 * cdef int current_notification = FALLBACK_QUIETLY             # <<<<<<<<<<<<<<
 * 
 * def set_fallback_notification(level):
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__FALLBACK_QUIETLY); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_3re2_current_notification = __pyx_t_3;

  /* "re2.pyx":31
 * cdef int current_notification = FALLBACK_QUIETLY
 * 
 * def set_fallback_notification(level):             # <<<<<<<<<<<<<<
 *     """
 *     Set the fallback notification to a level; one of:
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_3re2_set_fallback_notification, NULL, __pyx_n_s__re2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_53, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":45
 * 
 * 
 * class RegexError(re.error):             # <<<<<<<<<<<<<<
 *     """
 *     Some error has occured in compilation of the regex.
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__re); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__error); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  if (PyDict_SetItemString(((PyObject *)__pyx_t_1), "__doc__", ((PyObject *)__pyx_kp_s_54)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_CreateClass(((PyObject *)__pyx_t_2), ((PyObject *)__pyx_t_1), __pyx_n_s__RegexError, __pyx_n_s__re2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__RegexError, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "re2.pyx":51
 *     pass
 * 
 * error = RegexError             # <<<<<<<<<<<<<<
 * 
 * cdef int _I = I, _M = M, _S = S, _U = U, _X = X, _L = L
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__RegexError); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__error, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":53
 * error = RegexError
 * 
 * cdef int _I = I, _M = M, _S = S, _U = U, _X = X, _L = L             # <<<<<<<<<<<<<<
 * 
 * cimport _re2
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__I); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_3re2__I = __pyx_t_3;
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__M); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_3re2__M = __pyx_t_3;
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__S); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_3re2__S = __pyx_t_3;
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__U); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_3re2__U = __pyx_t_3;
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__X); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_3re2__X = __pyx_t_3;
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__L); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_3re2__L = __pyx_t_3;

  /* "re2.pyx":58
 * cimport cpython.unicode
 * from cython.operator cimport preincrement as inc, dereference as deref
 * import warnings             # <<<<<<<<<<<<<<
 * 
 * cdef object cpp_to_pystring(_re2.cpp_string input):
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__warnings), 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__warnings, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":97
 *     cdef void emit_endif "#endif //" ()
 * 
 * def convert_position(char* match_string, int position):             # <<<<<<<<<<<<<<
 *     cdef char * s = match_string
 *     cdef int cpos = 0
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_3re2_1convert_position, NULL, __pyx_n_s__re2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__convert_position, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":803
 * 
 * 
 * _cache = {}             # <<<<<<<<<<<<<<
 * _cache_repl = {}
 * 
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s___cache, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "re2.pyx":804
 * 
 * _cache = {}
 * _cache_repl = {}             # <<<<<<<<<<<<<<
 * 
 * _MAXCACHE = 100
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 804; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s___cache_repl, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 804; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "re2.pyx":806
 * _cache_repl = {}
 * 
 * _MAXCACHE = 100             # <<<<<<<<<<<<<<
 * 
 * def compile(pattern, int flags=0, int max_mem=8388608):
 */
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s___MAXCACHE, __pyx_int_100) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "re2.pyx":808
 * _MAXCACHE = 100
 * 
 * def compile(pattern, int flags=0, int max_mem=8388608):             # <<<<<<<<<<<<<<
 *     cachekey = (type(pattern),) + (pattern, flags)
 *     p = _cache.get(cachekey)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_3re2_2compile, NULL, __pyx_n_s__re2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 808; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__compile, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 808; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":820
 *     return p
 * 
 * class BackreferencesException(Exception):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 820; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 820; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  __Pyx_INCREF(__pyx_builtin_Exception);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_builtin_Exception);
  __Pyx_GIVEREF(__pyx_builtin_Exception);
  __pyx_t_2 = __Pyx_CreateClass(((PyObject *)__pyx_t_4), ((PyObject *)__pyx_t_1), __pyx_n_s_40, __pyx_n_s__re2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 820; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_40, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 820; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "re2.pyx":823
 *     pass
 * 
 * WHITESPACE = set(" \t\n\r\v\f")             # <<<<<<<<<<<<<<
 * 
 * class Tokenizer:
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)(&PySet_Type))), ((PyObject *)__pyx_k_tuple_56), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__WHITESPACE, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":825
 * WHITESPACE = set(" \t\n\r\v\f")
 * 
 * class Tokenizer:             # <<<<<<<<<<<<<<
 *     def __init__(self, string):
 *         self.string = string
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 825; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

  /* "re2.pyx":826
 * 
 * class Tokenizer:
 *     def __init__(self, string):             # <<<<<<<<<<<<<<
 *         self.string = string
 *         self.index = 0
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_3re2_9Tokenizer___init__, NULL, __pyx_n_s__re2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s____init__, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "re2.pyx":830
 *         self.index = 0
 *         self.__next()
 *     def __next(self):             # <<<<<<<<<<<<<<
 *         if self.index >= len(self.string):
 *             self.next = None
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_3re2_9Tokenizer_1__next, NULL, __pyx_n_s__re2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s____next, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "re2.pyx":843
 *         self.index = self.index + len(ch)
 *         self.next = ch
 *     def get(self):             # <<<<<<<<<<<<<<
 *         this = self.next
 *         self.__next()
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_3re2_9Tokenizer_2get, NULL, __pyx_n_s__re2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__get, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "re2.pyx":825
 * WHITESPACE = set(" \t\n\r\v\f")
 * 
 * class Tokenizer:             # <<<<<<<<<<<<<<
 *     def __init__(self, string):
 *         self.string = string
 */
  __pyx_t_2 = __Pyx_CreateClass(((PyObject *)__pyx_empty_tuple), ((PyObject *)__pyx_t_1), __pyx_n_s__Tokenizer, __pyx_n_s__re2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 825; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__Tokenizer, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 825; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "re2.pyx":848
 *         return this
 * 
 * def prepare_pattern(pattern, int flags):             # <<<<<<<<<<<<<<
 *     source = Tokenizer(pattern)
 *     new_pattern = []
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_3re2_3prepare_pattern, NULL, __pyx_n_s__re2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 848; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__prepare_pattern, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 848; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":931
 * 
 * 
 * def _compile(pattern, int flags=0, int max_mem=8388608):             # <<<<<<<<<<<<<<
 *     """
 *     Compile a regular expression pattern, returning a pattern object.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_3re2_4_compile, NULL, __pyx_n_s__re2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 931; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s___compile, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 931; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":1003
 *     return pypattern
 * 
 * def search(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """
 *     Scan through string looking for a match to the pattern, returning
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_3re2_5search, NULL, __pyx_n_s__re2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1003; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__search, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1003; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":1010
 *     return compile(pattern, flags).search(string)
 * 
 * def match(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """
 *     Try to apply the pattern at the start of the string, returning
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_3re2_6match, NULL, __pyx_n_s__re2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1010; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__match, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1010; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":1017
 *     return compile(pattern, flags).match(string)
 * 
 * def finditer(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """
 *     Return an list of all non-overlapping matches in the
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_3re2_7finditer, NULL, __pyx_n_s__re2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1017; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__finditer, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1017; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":1026
 *     return compile(pattern, flags).finditer(string)
 * 
 * def findall(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """
 *     Return an list of all non-overlapping matches in the
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_3re2_8findall, NULL, __pyx_n_s__re2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1026; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__findall, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1026; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":1035
 *     return compile(pattern, flags).findall(string)
 * 
 * def split(pattern, string, int maxsplit=0):             # <<<<<<<<<<<<<<
 *     """
 *     Split the source string by the occurrences of the pattern,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_3re2_9split, NULL, __pyx_n_s__re2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1035; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__split, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1035; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":1042
 *     return compile(pattern).split(string, maxsplit)
 * 
 * def sub(pattern, repl, string, int count=0):             # <<<<<<<<<<<<<<
 *     """
 *     Return the string obtained by replacing the leftmost
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_3re2_10sub, NULL, __pyx_n_s__re2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1042; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__sub, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1042; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":1053
 *     return compile(pattern).sub(repl, string, count)
 * 
 * def subn(pattern, repl, string, int count=0):             # <<<<<<<<<<<<<<
 *     """
 *     Return a 2-tuple containing (new_string, number).
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_3re2_11subn, NULL, __pyx_n_s__re2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1053; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__subn, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1053; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":1066
 *     return compile(pattern).subn(repl, string, count)
 * 
 * _alphanum = {}             # <<<<<<<<<<<<<<
 * for c in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890':
 *     _alphanum[c] = 1
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1066; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s___alphanum, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1066; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "re2.pyx":1067
 * 
 * _alphanum = {}
 * for c in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890':             # <<<<<<<<<<<<<<
 *     _alphanum[c] = 1
 * del c
 */
  __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(((PyObject *)__pyx_n_s_57)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  for (;;) {
    {
      __pyx_t_2 = PyIter_Next(__pyx_t_1);
      if (!__pyx_t_2) {
        if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s__c, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "re2.pyx":1068
 * _alphanum = {}
 * for c in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890':
 *     _alphanum[c] = 1             # <<<<<<<<<<<<<<
 * del c
 * 
 */
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s___alphanum); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1068; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__c); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1068; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (PyObject_SetItem(__pyx_t_2, __pyx_t_4, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1068; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":1069
 * for c in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890':
 *     _alphanum[c] = 1
 * del c             # <<<<<<<<<<<<<<
 * 
 * def escape(pattern):
 */
  if (__Pyx_DelAttrString(__pyx_m, "c") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1069; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "re2.pyx":1071
 * del c
 * 
 * def escape(pattern):             # <<<<<<<<<<<<<<
 *     "Escape all non-alphanumeric characters in pattern."
 *     s = list(pattern)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_3re2_12escape, NULL, __pyx_n_s__re2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1071; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__escape, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1071; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":1
 * # cython: infer_types(False)             # <<<<<<<<<<<<<<
 * # Import re flags to be compatible.
 * import sys
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    __Pyx_AddTraceback("init re2");
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init re2");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */

#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result)
        PyErr_SetObject(PyExc_NameError, name);
    return result;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();

    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}

static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;

    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}


#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb) {
    Py_XINCREF(type);
    Py_XINCREF(value);
    Py_XINCREF(tb);
    /* First, check the traceback argument, replacing None with NULL. */
    if (tb == Py_None) {
        Py_DECREF(tb);
        tb = 0;
    }
    else if (tb != NULL && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto raise_error;
    }
    /* Next, replace a missing value with None */
    if (value == NULL) {
        value = Py_None;
        Py_INCREF(value);
    }
    #if PY_VERSION_HEX < 0x02050000
    if (!PyClass_Check(type))
    #else
    if (!PyType_Check(type))
    #endif
    {
        /* Raising an instance.  The value should be a dummy. */
        if (value != Py_None) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        /* Normalize to raise <class>, <instance> */
        Py_DECREF(value);
        value = type;
        #if PY_VERSION_HEX < 0x02050000
            if (PyInstance_Check(type)) {
                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
                Py_INCREF(type);
            }
            else {
                type = 0;
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception must be an old-style class or instance");
                goto raise_error;
            }
        #else
            type = (PyObject*) Py_TYPE(type);
            Py_INCREF(type);
            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception class must be a subclass of BaseException");
                goto raise_error;
            }
        #endif
    }

    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}

#else /* Python 3+ */

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb) {
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;

    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (!PyExceptionClass_Check(type)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }

    PyErr_SetObject(type, value);

    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }

bad:
    return;
}
#endif

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *number, *more_or_less;

    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    number = (num_expected == 1) ? "" : "s";
    PyErr_Format(PyExc_TypeError,
        #if PY_VERSION_HEX < 0x02050000
            "%s() takes %s %d positional argument%s (%d given)",
        #else
            "%s() takes %s %zd positional argument%s (%zd given)",
        #endif
        func_name, more_or_less, num_expected, number, num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AS_STRING(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;

    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
        } else {
            #if PY_MAJOR_VERSION < 3
            if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
            #else
            if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key))) {
            #endif
                goto invalid_keyword_type;
            } else {
                for (name = first_kw_arg; *name; name++) {
                    #if PY_MAJOR_VERSION >= 3
                    if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                        PyUnicode_Compare(**name, key) == 0) break;
                    #else
                    if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                        _PyString_Eq(**name, key)) break;
                    #endif
                }
                if (*name) {
                    values[name-argnames] = value;
                } else {
                    /* unexpected keyword found */
                    for (name=argnames; name != first_kw_arg; name++) {
                        if (**name == key) goto arg_passed_twice;
                        #if PY_MAJOR_VERSION >= 3
                        if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                            PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
                        #else
                        if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                            _PyString_Eq(**name, key)) goto arg_passed_twice;
                        #endif
                    }
                    if (kwds2) {
                        if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                    } else {
                        goto invalid_keyword;
                    }
                }
            }
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, **name);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #else
        if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key)))
        #endif
            goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    return 0;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}


static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
        #if PY_VERSION_HEX < 0x02050000
                 "need more than %d value%s to unpack", (int)index,
        #else
                 "need more than %zd value%s to unpack", index,
        #endif
                 (index == 1) ? "" : "s");
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
        #if PY_VERSION_HEX < 0x02050000
            "too many values to unpack (expected %d)", (int)expected);
        #else
            "too many values to unpack (expected %zd)", expected);
        #endif
}

static PyObject *__Pyx_UnpackItem(PyObject *iter, Py_ssize_t index) {
    PyObject *item;
    if (!(item = PyIter_Next(iter))) {
        if (!PyErr_Occurred()) {
            __Pyx_RaiseNeedMoreValuesError(index);
        }
    }
    return item;
}

static int __Pyx_EndUnpack(PyObject *iter, Py_ssize_t expected) {
    PyObject *item;
    if ((item = PyIter_Next(iter))) {
        Py_DECREF(item);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    }
    else if (!PyErr_Occurred())
        return 0;
    else
        return -1;
}

static CYTHON_INLINE void __Pyx_RaiseNoneIndexingError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is unsubscriptable");
}

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *local_type, *local_value, *local_tb;
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
    if (unlikely(tstate->curexc_type))
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
        goto bad;
    #endif
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
    Py_INCREF(local_type);
    Py_INCREF(local_value);
    Py_INCREF(local_tb);
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    /* Make sure tstate is in a consistent state when we XDECREF
       these objects (XDECREF may run arbitrary code). */
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}



static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}

static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, long level) {
    PyObject *py_import = 0;
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    py_import = __Pyx_GetAttrString(__pyx_b, "__import__");
    if (!py_import)
        goto bad;
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    #if PY_VERSION_HEX >= 0x02050000
    {
        PyObject *py_level = PyInt_FromLong(level);
        if (!py_level)
            goto bad;
        module = PyObject_CallFunctionObjArgs(py_import,
            name, global_dict, empty_dict, list, py_level, NULL);
        Py_DECREF(py_level);
    }
    #else
    if (level>0) {
        PyErr_SetString(PyExc_RuntimeError, "Relative import is not supported for Python <=2.4.");
        goto bad;
    }
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
    #endif
bad:
    Py_XDECREF(empty_list);
    Py_XDECREF(py_import);
    Py_XDECREF(empty_dict);
    return module;
}

static PyObject *__Pyx_FindPy2Metaclass(PyObject *bases) {
    PyObject *metaclass;
    /* Default metaclass */
#if PY_MAJOR_VERSION < 3
    if (PyTuple_Check(bases) && PyTuple_GET_SIZE(bases) > 0) {
        PyObject *base = PyTuple_GET_ITEM(bases, 0);
        metaclass = PyObject_GetAttrString(base, (char *)"__class__");
        if (!metaclass) {
            PyErr_Clear();
            metaclass = (PyObject*) Py_TYPE(base);
        }
    } else {
        metaclass = (PyObject *) &PyClass_Type;
    }
#else
    if (PyTuple_Check(bases) && PyTuple_GET_SIZE(bases) > 0) {
        PyObject *base = PyTuple_GET_ITEM(bases, 0);
        metaclass = (PyObject*) Py_TYPE(base);
    } else {
        metaclass = (PyObject *) &PyType_Type;
    }
#endif
    Py_INCREF(metaclass);
    return metaclass;
}

static PyObject *__Pyx_CreateClass(PyObject *bases, PyObject *dict, PyObject *name,
                                   PyObject *modname) {
    PyObject *result;
    PyObject *metaclass;

    if (PyDict_SetItemString(dict, "__module__", modname) < 0)
        return NULL;

    /* Python2 __metaclass__ */
    metaclass = PyDict_GetItemString(dict, "__metaclass__");
    if (metaclass) {
        Py_INCREF(metaclass);
    } else {
        metaclass = __Pyx_FindPy2Metaclass(bases);
    }
    result = PyObject_CallFunctionObjArgs(metaclass, name, bases, dict, NULL);
    Py_DECREF(metaclass);
    return result;
}


static PyObject *__pyx_binding_PyCFunctionType_NewEx(PyMethodDef *ml, PyObject *self, PyObject *module) {
	__pyx_binding_PyCFunctionType_object *op = PyObject_GC_New(__pyx_binding_PyCFunctionType_object, __pyx_binding_PyCFunctionType);
    if (op == NULL)
        return NULL;
	op->func.m_ml = ml;
	Py_XINCREF(self);
	op->func.m_self = self;
	Py_XINCREF(module);
	op->func.m_module = module;
	PyObject_GC_Track(op);
	return (PyObject *)op;
}

static void __pyx_binding_PyCFunctionType_dealloc(__pyx_binding_PyCFunctionType_object *m) {
	PyObject_GC_UnTrack(m);
	Py_XDECREF(m->func.m_self);
	Py_XDECREF(m->func.m_module);
    PyObject_GC_Del(m);
}

static PyObject *__pyx_binding_PyCFunctionType_descr_get(PyObject *func, PyObject *obj, PyObject *type) {
	if (obj == Py_None)
		obj = NULL;
	return PyMethod_New(func, obj, type);
}

static int __pyx_binding_PyCFunctionType_init(void) {
    __pyx_binding_PyCFunctionType_type = PyCFunction_Type;
    __pyx_binding_PyCFunctionType_type.tp_name = __Pyx_NAMESTR("cython_binding_builtin_function_or_method");
    __pyx_binding_PyCFunctionType_type.tp_dealloc = (destructor)__pyx_binding_PyCFunctionType_dealloc;
    __pyx_binding_PyCFunctionType_type.tp_descr_get = __pyx_binding_PyCFunctionType_descr_get;
    if (PyType_Ready(&__pyx_binding_PyCFunctionType_type) < 0) {
        return -1;
    }
    __pyx_binding_PyCFunctionType = &__pyx_binding_PyCFunctionType_type;
    return 0;

}

static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *v = PyObject_GetAttr(o, n);
    if (v) {
        Py_DECREF(v);
        return 1;
    }
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
        return 0;
    }
    return -1;
}

#if PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}

static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    PyObject* v;
    int i;

    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                return -1;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            return -1;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0 &&
                isspace(Py_CHARMASK(s[len-1])) &&
                s[len-1] != ' ')
                    PyFile_SoftSpace(f, 0);
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            return -1;
        PyFile_SoftSpace(f, 0);
    }
    return 0;
}

#else /* Python 3 has a print function */

static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = __Pyx_GetAttrString(__pyx_b, "print");
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItemString(kwargs, "file", stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItemString(kwargs, "end", end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItemString(__pyx_print_kwargs, "end", end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}

#endif

#if PY_MAJOR_VERSION < 3

static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            return -1;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        return -1;
    if (PyFile_WriteString("\n", f) < 0)
        return -1;
    return 0;
    /* the line below is just to avoid compiler
     * compiler warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}

#else /* Python 3 has a print function */

static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_New(1);
    if (unlikely(!arg_tuple))
        return -1;
    Py_INCREF(o);
    PyTuple_SET_ITEM(arg_tuple, 0, o);
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}

#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItemString(dict, "__pyx_vtable__", ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"

static void __Pyx_AddTraceback(const char *funcname) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyObject *py_globals = 0;
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;

    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(__pyx_filename);
    #else
    py_srcfile = PyUnicode_FromString(__pyx_filename);
    #endif
    if (!py_srcfile) goto bad;
    if (__pyx_clineno) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_code = PyCode_New(
        0,            /*int argcount,*/
        #if PY_MAJOR_VERSION >= 3
        0,            /*int kwonlyargcount,*/
        #endif
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple,  /*PyObject *consts,*/
        __pyx_empty_tuple,  /*PyObject *names,*/
        __pyx_empty_tuple,  /*PyObject *varnames,*/
        __pyx_empty_tuple,  /*PyObject *freevars,*/
        __pyx_empty_tuple,  /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        __pyx_lineno,   /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    if (!py_code) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = __pyx_lineno;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

/* Type Conversion Functions */

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
